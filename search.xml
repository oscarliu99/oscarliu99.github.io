<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python for Finance part 2]]></title>
    <url>%2FPython_for_Finance_2%2F</url>
    <content type="text"><![CDATA[9. Time series analysis Key words related to time series: Trend: Upward, Horizontal/Stationary and Downward. Seasonality(季节性): repeated trends Cyclical(周期性): trends with no set repetition Statsmodels: import statsmodels.api as sm Demo: Hodrick-Prescott filter: $\min_{\{ \tau_{t}\} }\sum_{t}^{T}\zeta_{t}^{2}+\lambda\sum_{t=1}^{T}\left[\left(\tau_{t}-\tau_{t-1}\right)-\left(\tau_{t-1}-\tau_{t-2}\right)\right]^{2}$ 1234567891011121314151617181920#Fetching datayf.pdr_override()start = datetime.date(2018,1,1)end = datetime.date(2019,9,16)data = pdr.get_data_yahoo("TSLA",start,end)#Applying Hodrick-Prescott filter, We get back a tuple with two elements, the first is the cycle pandas series and the second is the trend pandas series.close_cycle, close_trend = sm.tsa.filters.hpfilter(data["Close"])#Plottingfig,axe = plt.subplots(1,1)#data["Close"].plot(label = "Raw data")#close_cycle.plot(label = "Cycle")close_trend.plot(label = "Trend")data["Close"].rolling(20).mean().plot(label = "20MA")axe.set_xlabel("Price")axe.set_ylabel("Time")axe.set_title("Hodrick-Prescott filter analysis on Tesla")plt.legend()plt.show() Splitting data into two components: trend and cycle. We can find some similarities between the 20MA plot and the trend plot. ETS model(Error-Trend-Seasonality): ETS decomposition: decompose the time series data into those three main factors: Seasonal patterns General trends Error Demo: 12345678910111213141516171819202122232425import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport pandas_datareader as pdrimport yfinance as yfimport datetimefrom statsmodels.tsa.seasonal import seasonal_decompose#Fetching datastart = datetime.date(2013,1,1)end = datetime.date(2019,1,1)yf.pdr_override()data = pdr.get_data_yahoo("TSLA",start,end)#whether to use EWMA values#data1["Close"] = data1["Close"].ewm(span = 7).mean()#Filter datesdata1 = data.reset_index()data1 = data1[(data1["Date"].apply(lambda x:x.day == 10))|(data1["Date"].apply(lambda x:x.day == 20)) | (data1["Date"].apply(lambda x:x.day == 30))]data1 = data1.set_index("Date")#Plotting dataseasonal_decompose(data1["Close"],freq = 36,model='multiplicative').plot()plt.show() seasonal_decompose() has two main parameters. freq equals 52 for weekly data, equals 12 for monthly data etc. model has two options, by default it is additive and we can also choose to use multiplicative. I use two sets of data(raw and EWMA) and set frequencies to be every 5 days or every 10 days for comparison purpose. Result: raw data every 5 days ​ raw data every 10 days ​ EWMA data every 5 days ​ EWMA data every 10 days EWMA model(Exponentially Weighted Moving Average): We have Simple Moving average by using .rolling() in Pandas but it has some cons: Smaller window will still lead to noise. Always lag by the size of the window(missing data at the beginning). Never reach the full peak or valley due to the averaging nature. Can’t estimate future behavior as all SMA does is describing the trend in the past. Key nature about EWMA: Overcome the cons of SMA. Put more weight on values that occurred more recently. The weight applied depends on the actual parameters used and the window size. .ewm() has parameters: com(center of mass); span, halflife and adjust. Formula for the EWMA:$$y_t = \frac{\sum\limits_{i=0}^t w_i x_{t-i}}{\sum\limits_{i=0}^t w_i}$$ $y_{t}$ is the output value at time t $x_{t}$ is the input value at time t All we need to define is $\omega _{i}$ and it depends on the adjust parameter you provided. If adjust = True:$$y_t = \frac{x_t + (1 - \alpha)x_{t-1} + (1 - \alpha)^2 x_{t-2} + … (1 - \alpha)^t x_{0}}{1 + (1 - \alpha) + (1 - \alpha)^2 + … (1 - \alpha)^t}$$ By default, adjust = True. $0&lt; \alpha &lt;1$ This is basically the same as the first expression. We are taking all historical values into account. $\omega _{i}= (1-\alpha)^{i}$ If adjust = False:$$\begin{split}y_0 &amp;= x_0 \y_t &amp;= (1 - \alpha) y_{t-1} + \alpha x_t,\end{split}$$ $0&lt; \alpha &lt;1$ A bit different We only take into account the input at t and the output at t-1 From the above expressions, we still need to determine $\alpha$. There are three ways: Span:$$\alpha = \frac{2}{s + 1},\text{for span}\ s \geq 1$$Span corresponds to what is commonly called an “N-day EWMA”. Center of mass:$$\alpha = \frac{1}{1 + c},\text{for center of mass}\ c \geq 0$$Center of mass has more physical interpretation and can be thought of in terms of span: $c=\frac{s−1}{2}$ Half-life:$$\alpha = 1 - \exp^{\frac{\log 0.5}{h}},\text{for half-life}\ h &gt; 0$$Half-life is the period of time for the exponential weight to reduce to one half. Demo: 12345678910111213141516171819202122import matplotlib.pyplot as pltimport pandas_datareader as pdrimport yfinance as yfimport datetime#Fetching datayf.pdr_override()start = datetime.date(2019,8,1) end = datetime.date(2019,9,16)data = pdr.get_data_yahoo("TSLA",start,end)#Plotting datafig,axe = plt.subplots(1,1)data["Close"].plot(label = "Raw data")#data["Close"].rolling(7).mean().plot(label = "7MA")data["Close"].ewm(span = 7).mean().plot(label = "7EWMA")axe.set_xlabel("Price")axe.set_ylabel("Time")axe.set_title("7 days EWMA analysis on Tesla")plt.legend()plt.show()]]></content>
      <categories>
        <category>Programming</category>
        <category>Finance</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python for Finance part 1]]></title>
    <url>%2FPython_for_Finance_1%2F</url>
    <content type="text"><![CDATA[1. Introduction First do activate pyfinance to activate the conda environment. Then do jupyter notebook to run the note book 2. Python review 0 also means False in python. 0.1 is True [1,2,3] can also means True but [] means False If you have something, we can say it is True. If there is nothing(empty), we can say it is False. .format() 12print("My name is &#123;x&#125;, I am &#123;y&#125; years old".format(y=19,x="Oscar"))print("My name is &#123;&#125;, I am &#123;&#125; years old".format("Oscar",19)) The two methods above are equivalent. Lambda expression: anonymous function, we don’t have to write the whole def structure. Basics: 1234567a = lambda x,y:x+yprint(a(1,2))def plus(x,y): return x+yprint(plus(1,2)) These two methods are equivalent. Jump table: 1234jump = [lambda x:x+1,lambda x:x+2,lambda x:x+3]print(jump[0](1))print(jump[1](1))print(jump[2](1)) map() : takes two arguments, the first argument is a function, the second argument is an iterable object. Each element within the iterable object will be passed in the function respectively. See example below. One way: 12345678def plus(x): return x+2list1 = [1,2,3,4]list2 = []for i in list1: tem = plus(i) list2.append(tem)print(list2) As you can see, super tedious. Using lambda expression and map function: 1print(list(map((lambda x:x+2),[1,2,3,4]))) We can simply make it one line of code only(for demo purpose only, can be hard to read). Don’t forget to put a list() or something similar functions after using map() filter(): similar to map()takes two arguments, a function(must return a Boolean value) and an iterable object. Elements can only pass the filter if the function returns True. See the demo below. 12list1 = [1,2,4,6,7,8]print(list(filter((lambda x:(x%2==0)),list1))) Again, for demo purpose only and don’t forget list(). zip(): we can combine two list into one. See below. 123list1 = [1,2,3]list2 = [4,5,6]print(list(zip(list1,list2))) This gives [(1,4),(2,5),(3,6)]. A useful trick, we can combine two lists of same length into one dictionary. See below. 123list1 = ["one","two","three"]list2 = [1,2,3]print(dict(zip(list1,list2))) This gives {&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: 3} Please view Python basics and Python revision notes for more information about Python. 3. Numpy introductionPlease refer to my Numpy notes. 4. Pandas introductionPlease refer to my Pandas basics notes, Pandas advanced notes and Pandas visualization notes. 5. Matplotlib introductionPlease refer to my Matplotlib notes. 6. Data sources Two ways of obtaining data: Pandas-datareader and Quandl. Pandas-datareader: Documentation: https://pandas-datareader.readthedocs.io/en/latest/index.html Using Pandas-datareader to access Yahoo API: 12345678import pandas_datareader.data as pdrimport yfinance as yfimport datetimeyf.pdr_override()start = datetime.date(2019,1,1).__format__('%Y-%m-%d')end = datetime.date(2019,6,6).__format__('%Y-%m-%d')data = pdr.get_data_yahoo("FB",start,end)print(data.head()) Using Pandas-datareader to access Quandl: 1234567import pandas_datareader.data as pdrimport datetimeapi_key= "Fill in your api key"start = datetime.date(2014,1,1)end = datetime.date(2015,6,6)data = pdr.DataReader("WIKI/FB","quandl",start,end,access_key=api_key)print(data.head()) &quot;WIKI/FB&quot; is the key on Quandl, which is in the format of DB_name/Sticker_name. You can find out these keys on their website. Quandl 12345import datetimeimport quandlquandl.ApiConfig.api_key = "Fill in your api key"data = quandl.get("WIKI/FB")print(data.head()) 7. Pandas with time series data Python datatime basics: refer to my notes. Creating datetime index: df[&quot;A&quot;]=pd.to_date_time(df[&quot;A&quot;],format = &quot;%d/%m/%Y&quot;) to convert a string date object to datetime.date object so it can be manipulated easily using Pandas. format argument gives the format that the string datetime is in. index = pd.DatetimeIndex(list_of_datetime) to convert Python datetime objects to the format that can be used in Pandas as a datetime index. A quick demo: 1234567import pandas as pdimport datetimeimport numpy as nplist1 = [datetime.date(2019,9,12),datetime.date(2019,9,13)]index1 = pd.DatetimeIndex(list1)df = pd.DataFrame(np.random.rand(2,3),columns = ["A","B","C"],index = index1)print(df) Methods of datetime index: df.index.argmax(): return the index of the latest date. df.index.max(): return the latest date. df.index.argmin(): return the index of the earliest date. df.index.min(): return the earliest date. Time resampling(need index to be datetime index): Similar to the groupby method, we can groupby datetime index using year-end frequency etc. In other words, put rows within one year together for aggregate functions. df.resample(rule = &quot;A&quot;).sum() perform aggregate functions just like doing groupby Another example: df.resample(rule = &quot;W&quot;).apply(lambda x:x[0]) List of rules: Alias Description B Business day frequency D Calendar day frequency W Weekly frequency SM Semi-month end frequency(15th and end of month) M Month end frequency Q Quarter end frequency A Year end frequency BA Business year end frequency AS Year start frequency H Hourly frequency T, min Minutely frequency S Secondly frequency L, ms Millisecond frequency U, us Microsecond frequency N, ns Nanosecond frequency df.resample(rule = &quot;A&quot;).mean().plot.bar() a quick bar plot Time shifts(need the index to be datetime.datetime): df = df.shift(periods = 1) push data forward by one day, leaving the first row NaN. In other words, data was on 2019-01-01 is now on 2019-01-02. df = df.shift(periods = -1) push data back by one day, leaving the last row NaN. In other words, data was on 2019-01-02 is now on 2019-01-01. df = df.tshift(freq = &quot;M&quot;) push dates within each month to the end of the month. For example, 2019-01-01 becomes 2019-01-31 and 2019-01-02 becomes 2019-01-31 etc. freq arguments also followed the table above. Rolling average(Moving mean): df[&quot;A&quot;].rolling(window = 5).mean() : This means we are setting the value at row 4 to be the average of row 0 to row 4 and leaving row 0 to row 3 NaN. Similarly, we are setting the value at row 5 to be the average of row 1 to row 5 and keep going. This method can remove noise from the graph and help find a general trend. Quick demo: 123456789101112131415import pandas_datareader.data as pdrimport yfinance as yfimport datetimeimport matplotlib.pyplot as pltyf.pdr_override()start = datetime.date(2019,1,1).__format__('%Y-%m-%d')end = datetime.date(2019,9,15).__format__('%Y-%m-%d')data = pdr.get_data_yahoo("FB",start,end)fig,axe = plt.subplots(1,1)axe.plot(data.index,data["Open"],label = "acutal data")axe.plot(data.index,data["Open"].rolling(14).mean(), label = "rolling data")axe.legend(loc = 0)plt.show() Expanding method: df[&quot;A&quot;].expanding().mean() This means we are setting the value at each row to be the average of all values in previous rows. Quick demo: 12345678910111213141516import pandas_datareader.data as pdrimport yfinance as yfimport datetimeimport matplotlib.pyplot as pltyf.pdr_override()start = datetime.date(2019,1,1).__format__('%Y-%m-%d')end = datetime.date(2019,9,15).__format__('%Y-%m-%d')data = pdr.get_data_yahoo("FB",start,end)fig,axe = plt.subplots(1,1)axe.plot(data.index,data["Open"],label = "acutal data")axe.plot(data.index,data["Open"].rolling(30).mean(), label = "rolling data")axe.plot(data.index,data["Open"].expanding().mean(), label = "expanding data")axe.legend(loc = 0)plt.show() The .rolling() method is more popular than the .expanding() method. Bollinger bands(布林线): General information: Bollinger bands are volatility bands placed above and below the moving average. Volatility is based on the standard deviation. Bands widen when volatility increases and narrow when volatility decreases. Bands are used to determine whether a price movement is significant. Price is relatively high when it is above the upper band and relatively low under the lower band. You shouldn’t use Bollinger bands solely for trading. Full code for plotting: 12345678910111213141516171819202122232425import pandas_datareader.data as pdrimport yfinance as yfimport datetimeimport matplotlib.pyplot as pltyf.pdr_override()start = datetime.date(2019,1,1).__format__('%Y-%m-%d')end = datetime.date(2019,9,15).__format__('%Y-%m-%d')data = pdr.get_data_yahoo("FB",start,end)fig,axe = plt.subplots(1,1)#Source dataaxe.plot(data.index,data["Close"],label = "Source data")#20MAaxe.plot(data.index,data["Close"].rolling(20).mean(), label = "20MA")#Upper bandaxe.plot(data.index,data["Close"].rolling(20).mean()+2*data["Close"].rolling(20).std(), label = "Upper band")#Lower bandaxe.plot(data.index,data["Close"].rolling(20).mean()-2*data["Close"].rolling(20).std(), label = "Lower band")axe.set_xlabel("Time")axe.set_ylabel("Price")axe.set_title("Bollinger bands for Facebook between 1/1/2019 and 15/9/2015")axe.legend(loc = 0)plt.show() 20 days closing moving average is used(20MA) Upper band = 20MA + 2$\times$ std(20 days) Lower band = 20MA - 2$\times$ std(20 days) 8. Notes on the capstone project Two ways of finding the index of the maximum value in a column: data3.sort_values(&quot;Volume&quot;,ascending= False).iloc[0:1].index data3[&quot;Volume&quot;].argmax() Market cap = share price $\times$ total units of stock present A company with higher share price does not necessary be more valuable than the other with a lower share price as we also need to take into account the total units of stock present. Plotting scatter matrix: 12from pandas.plotting import scatter_matrixscatter_matrix(df1,figsize=(16,8),alpha = 0.2,hist_kwds= &#123;'bins':30&#125;) Candlestick chart(K线图): 12345678910111213141516171819202122232425262728293031323334353637383940import matplotlib.pyplot as pltimport pandas_datareader as pdrimport yfinance as yffrom mpl_finance import candlestick_ohlcfrom matplotlib.dates import DateFormatter, date2num, WeekdayLocator, DayLocator, MONDAYimport datetime#Fetching datayf.pdr_override()start = datetime.date(2019,8,16).__format__("%d-%m-%Y")end = datetime.date(2019,9,16).__format__("%d-%m-%Y")data = pdr.get_data_yahoo("TSLA",start,end)#Reset index because there is no .apply() method on datetimeindex, we need to change it into a normal column first.df2 = data.reset_index()#Change datetime.date into integer days so it can be recognised by Matplotlibdf2["date in num"] = df2["Date"].apply(lambda x:date2num(x))#candlestick_ohlc() is taking a list with tuples(date_num,Open,High,Low,Close) insidelist_for_plotting = []for i in range(len(df2["Date"])): info=(float(df2.loc[i,"date in num"]),float(df2.loc[i,"Open"]),float(df2.loc[i,"High"]),float(df2.loc[i,"Low"]),float(df2.loc[i,"Close"])) list_for_plotting.append(info) #Formatting candlestick chartmondays = WeekdayLocator(MONDAY) # major ticks on the mondaysalldays = DayLocator() # minor ticks on the daysweekFormatter = DateFormatter('%b %d') # e.g., Jan 12dayFormatter = DateFormatter('%d') # e.g., 12#Plot itfig, ax = plt.subplots(figsize = (16,8))fig.subplots_adjust(bottom=0.2)ax.xaxis.set_major_locator(mondays)ax.xaxis.set_minor_locator(alldays)ax.xaxis.set_major_formatter(weekFormatter)candlestick_ohlc(ax, list_for_plotting, width=0.6, colorup='g',colordown='r')ax.set_title("Candlestick chart for Tesla between 17/8/2019 and 17/9/2015")plt.show() Daily percentage change(Daily return) = $\frac{P_{t}}{P_{t-1}}-1$ $P_{t}$: price at time t $P_{t-1}$: price at time t-1 Percentage of gain in one day relative to the price of yesterday. If you plot daily return in a histogram and it is wide means high volatility Python code: Method 1: 1df["daily return"] = (df["Close"]/df.shift(1)["Close"]) - 1 Method 2” 1df["daily return"] = df["Close"].pct_change(1) .pct_change(1) means percentage change in a period of 1 day and it is exactly what we do in method 1. Cumulative daily returns: The aggregate amount an investment has gained or lost over time, independent of the period of time involved. Daily return is useful but it doesn’t give a insight into how much a investor is actually making. Cumulative return is computed relatively to the day investment is made. Formula: $i_{i}=(1+r_{t})\times i_{t-1}$ Python code: 1df["daily_cumulative_return"] = ( 1 + df["daily_return"] ).cumprod() Assume we invest $1 on the first day, we are finding out how much we actually have today. We need to find daily return first before finding daily cumulative return. .cumprod() means cumulative product. Old $i_{i}$ becomes $i_{t-1}$ to calculate new $i_{i}$]]></content>
      <categories>
        <category>Programming</category>
        <category>Finance</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pandas visulisation basics]]></title>
    <url>%2Fpandas_visulisation%2F</url>
    <content type="text"><![CDATA[import seaborn as sns to make your plots more stylish(optional). df1[&quot;A&quot;].plot.hist(bins = 30) to produce a histogram from values, y axis will be frequency. df1[&quot;A&quot;].plot.line() to produce a line plot. It is also the graph you get if you do df1[&quot;A&quot;].plot() df1.plot.area(alpha = 0.5) to produce an area plot which is similar to a line plot but the area under the lines is filled. df1.plot.bar() to produce a bar plot df1.plot.scatter(x=&quot;A&quot;,y=&quot;B&quot;,c=&quot;C&quot;) to produce a scatter plot(散布图). Use the argument c to set intensity of the color so we have a scatter plot in 3D. df1.plot.scatter(x=&quot;A&quot;,y=&quot;B&quot;,s=df1[&quot;C&quot;]*100) we can also use sizes of the dots rather than intensity of the color to express values of the third column. df = pd.read_csv(&quot;Filename.csv&quot;,index_col = &quot;A&quot;, parse_dates= True) to read data with datetime information. df.plot.line(xlim = [&quot;2007-01-01&quot;,&quot;2008-01-01&quot;],ylim = [20,50]) set boundaries for x axis and y axis of the plot. Formatting plots with datatime information: Full code: 12345678910111213141516171819202122232425import matplotlib.pyplot as pltimport matplotlib.dates as datesdf = pd.read_csv('mcdonalds.csv',index_col='Date',parse_dates=True)#Slcing date informationidx = df.loc["2007-01-01":"2007-01-29"].index#slicing datadata = df.loc["2007-01-01":"2007-01-29","Adj. Close"]#Creating a plot on Matplotlibfig,axe = plt.subplots(1,1)#A special line of code when ploting time series dataaxe.plot_date(idx,data,"-")#Setting scale and formatting of the minor axisaxe.xaxis.set_minor_locator(dates.DayLocator())axe.xaxis.set_minor_formatter(dates.DateFormatter("%d"))#Setting scale and formatting of the major axisaxe.xaxis.set_major_locator(dates.WeekdayLocator(byweekday=0))axe.xaxis.set_major_formatter(dates.DateFormatter("%A"))#Fixing overlapfig.autofmt_xdate()plt.tight_layout()plt.show() Basically slicing data from the dataframe first. Then, plot and format data again in Matplotlib. import matplotlib.dates as dates the module used for formatting dates 12idx = df.loc["2007-01-01":"2007-01-29"].indexdata = df.loc["2007-01-01":"2007-01-29","Adj. Close"] Slicing dates and values from the dataframe axe.xaxis.set_major_locator(dates.Monthlocator()) setting the scale(刻度) of the major axis and the minor axis. There are: .MinuteLocator(): set minute as the scale .HourLocator(): set hour as the scale .DayLocator(): set day as the scale .WeekdayLocator(byweekday = 0): Set week as the scale and every Monday will be shown .MonthLocator(): Set month as the scale .YearLocator(): Set year as the scale axe.xaxis.set_major_formatter(dates.DateFormatter(&quot;%b-%Y&quot;)) formatting date expression 12axe.xaxis.set_minor_locator(dates.MonthLocator())axe.xaxis.set_minor_locator(dates.DateFormattor("%n")) Works exactly the same for setting minor axis. fig.autofmt_xdate() solve the overlapping problem in the x axis]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python datetime summary]]></title>
    <url>%2Fdatetime_summary%2F</url>
    <content type="text"><![CDATA[import datetime 1. datetime.date datetime.date.today() return the date of today. Accessing year, month and date attributes: 1234a = datetime.date.today()print(a.year)print(a.month)print(a.day) b = datetime.date(Year,Month,Day) create a datetime.date object manually Difference between two datetime.date objects: 12345a = datetime.date.today()b = datetime.date(2019,3,15)diff = a - bprint(diff)print(diff.day) diff is a datetime.timedelta object with day, hour, minute, second and microsecond attributes but you can’t print() these attributes directly. In stead, you need to add datetime.timedelta to datetime.date or datetime.datetime. Compare size between datetime.date objects 123a = datetime.date.today()b = datetime.date(2019,3,15)print(a.__gt__(b)) There are a list of similar methods available: Methods Operators a.__eq__(b) a==b a.__ge__(b) a&gt;=b a.__gt__(b) a&gt;b a.__le__(b) a&lt;b a.__lt__(b) a&lt;=b a.__ne__(b) a!=b datetime.date() methods: .isocalendar() 1234day = datetime.date(2019,9,3)tup_format = day.isocalendar()print(tup_format)#(2019, 36, 2) Returns a tuple in the format of (year, week number, weekday) String formatting .isoformat() 1234day = datetime.date(2019,9,3)str_format = day.isoformat()print(str_format)#"2019-09-03" Change datetime.date into a string(“%Y-%m-%d”) .__format__() 1234day = datetime.date(2019,9,3)str_format = day.__format("%d/%m/%Y")print(str_format)#"03/09/2019" Use the table in the appendix as reference. More control of the string format. .__str__() Does the same as .isoformat() .isoweekday() 1234day = datetime.date(2019,9,3)weekday = day.isoweekday()print(weekday)#2 1 stands for Monday and 2 stands for Tuesday etc. .fromtimestamp() 123456import timeimport datetimestamp = time.time()day = datetime.date.fromtimestamp(stamp)print(day.isoformat())#"2019-09-16" Change a time stamp to datetime.date 2. datetime.time Create a datetime.time() object manually: b = datetime.time(Hour,Minute,Second,microsecond) Accessing hour, minute, second, microsecond attributes 123456a = datetime.time(19,31,30,113232)print(a)print(a.hour)print(a.minute)print(a.second)print(a.microsecond) Compare size between datetime.time objects: works the same as datetime.date String formatting: .__format__(): works the same as datetime.date .__str__(): return a string in Hour:Minute:Second:Mircosecond format. 3. datetime.datetime datetime.datetime() is like a combination of datetime.date and datetime.time Create a datetime.datetime() object manually: 1b = datetime.datetime(Year,Month,Day,Hour,Minute,Second,microsecond) Accessing date and time attributes: 123b = datetime.datetime(2019,9,17,9,13,42,352445)print(b.date())print(b.time()) In other words, splitting datetime.datetime into datetime.date and datetime.time datetime.datetime.now() return the current datetime datetime.datetime.combine(): 1234a = datetime.date(2019,9,17)b = datetime.time(9,13,42,352445)c = datetime.datetime.combine(a,b)print(c) Combine a datetime.date and a datetime.time into a datetime.datetime Difference between two datetime.datetime objects: 12345import datetimea = datetime.datetime.now()b = datetime.datetime(2019,9,17,9,13,42,352445)diff = b-aprint(diff) diff is a datetime.timedelta object, we can also add a datetime.timedelta to another datetime.datetime to obtain a datetime.datetime. 4. Appendix 符号 说明 %y 两位数的年份表示（00-99） %Y 四位数的年份表示（000-9999） %m 月份（01-12） %d 月内中的一天（0-31） %H 24小时制小时数（0-23） %I 12小时制小时数（01-12） %M 分钟数（00=59） %S 秒（00-59） %a 本地简化星期名称 %A 本地完整星期名称 %b 本地简化的月份名称 %B 本地完整的月份名称 %c 本地相应的日期表示和时间表示 %j 年内的一天（001-366） %p 本地A.M.或P.M.的等价符 %U 一年中的星期数（00-53）星期天为星期的开始 %w 星期（0-6），星期天为星期的开始 %W 一年中的星期数（00-53）星期一为星期的开始 %x 本地相应的日期表示 %X 本地相应的时间表示 %Z 当前时区的名称 %% %号本身]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Matplotlib basics]]></title>
    <url>%2FMatplotlib_basics%2F</url>
    <content type="text"><![CDATA[There are two ways of working with Matplotlib: function method and OOP method. import matplotlib.pyplot as plt %matplotlib inline to visualize plots inside the Jupyter notebook. plt.show() to visualize plots in other IDE. Quick examples: Functional method: 123456789import matplotlib.pyplot as pltimport numpy as npx = np.arange(1,10,0.01)y = x**2plt.plot(x,y)plt.xlabel("X Label")plt.ylabel("Y Label")plt.title("Fill in the title")plt.show() Just putting data into plt.plot() Subplot method: 1234567891011import matplotlib.pyplot as pltimport numpy as npx = np.arange(1,10,0.01)y = x**2#First part of the subplot with 1 row and 2 column and the serial number: 1plt.subplot(1,2,1)plt.plot(x,y)#Second part of the subplot with 1 row and 2 column and has the serial number: 2plt.subplot(1,2,2)plt.plot(y,x)plt.show() A bit messy as we are using the function method, everything will be clear after we do the OOP method. OOP method: Full codes: 123456789101112131415161718 import numpy as np import matplotlib.pyplot as plt x = np.arange(1,5,0.1) y = x**2 fig = plt.figure() axes1 = fig.add_axes([0.1,0.1,0.3,0.3]) axes1.set_xlabel("Fill in the name for x axis") axes1.set_ylabel("Fill in the name for y axis") axes1.set_title("Fill in the title") axes1.plot(x,y) axes2 = fig.add_axes([0.5,0.5,0.3,0.3]) axes2.set_xlabel("Fill in the name for x axis") axes2.set_ylabel("Fill in the name for y axis") axes2.set_title("Fill in the title") axes2.plot(y,x)plt.show() fig = plt.figure() creating a figure object, you can consider this as a large canvas we may put multiple axes and plots on the canvas. axes = fig.add_axe([origin_x,origin_y,length_x,length_y]) Creating an axes object on the canvas, we can put graph inside this axes object. It takes four arguments, first two set the origin of the axes, the remainder two determines the length of the axes, where 1.0 is the maximum length of the canvas. A quick example: axes = fig.add_axe[0.1,0.1,0.8,0.8] axes.plot(x,y) plot the graph inside the axis. We have two axis on one canvas. It is very clear and flexible. I highly recommend using the OOP method rather than the function method. .subplots(): Full codes: 12345678910111213141516import numpy as npimport matplotlib.pyplot as pltx = np.arange(1,5,0.1)y = x**2# 1*2 layoutfig,axes = plt.subplots(1,2)axes[0].plot(x,y)axes[1].plot(y,x) plt.tight_layout()plt.show()# 2*1 layoutfig1,axes1 = plt.subplots(2,1)axes1[0].plot(x,y)axes1[1].plot(y,x) plt.tight_layout()plt.show() .subplot() will do the formatting for us when creating multiple axes so we don’t have to fill in .add_axis() manually which is quite laborious. fig,axes = plt.subplots(nrows = 1,ncols = 2) This will automatically set locations of axes on the canvas. We have one row and two columns of axes here(1$\times$2 axes). axes here is an array. We can access individual axes by indexing axes[0] etc. plt.tight_layout() will fix the problem that axes overlapping with each other. I would say just add this line every time you do plt.show()in case. Figure size and DPI(分辨率) fig = plt.figure(figsize = (3,2),dpi = 100) figsize sets the size of the ‘canvas’ and unit is inch. dpi stands for dots per inch, normally we can just use the default dpi. fig,axes = plt.subplots(2,1,figsize = (4,4),dpi = 100) works for .subplots() as well Save the plot: fig.savefig(&quot;filename.png&quot;) to save the plot, also supports .jpg, .pdf etc. Must save the plot before plt.show() Legends(图例): We can put multiple plots in one axe. By adding legends, the graph will become more clear. Full codes: 123456789import matplotlib.pyplot as pltimport numpy as npa = np.arange(0,5,0.1)figure = plt.figure()axe = figure.add_axes([0.1,0.1,0.8,0.8])axe.plot(a,a**2,label = "X^2")axe.plot(a,a**3,label = "X^3")axe.legend(loc = 0)plt.show() add another argument label in axe.plot() axe.legend(loc = 0) before plt.show(). loc argument will pick the best location for the legend to prevent overlapping with plots. Styling: Full codes: 1234567891011121314import matplotlib.pyplot as pltimport numpy as npa = np.arange(0,5,0.1)figure = plt.figure()axe = figure.add_axes([0.1,0.1,0.8,0.8])axe.plot(a,a**2,color = "orange", linewidth = 3, alpha = 0.6, linestyle = "--", marker = "o", markersize = 2, markerfacecolor = "blue", )plt.show() color = &quot;orange&quot; to customize the color of the line, we can also use RGB hex code here for rare colors(Cambridge Blue:-) ). linewidth = 3 to set the width of the line, by default it is 1. alpha = 0.6 to set the transparency of our line, by default it is 1 which means not transparent at all. linestype = &quot;--&quot; to set the style of the line, refer to the doc for other options. marker = &quot;o&quot; to set some markers on the line, refer to the doc for other options. markersize = 2 to set the size of markers. markerfacecolor = &quot;blue&quot; to set the color of markers. Plot range: Full code: 123456789import matplotlib.pyplot as pltimport numpy as npa = np.arange(0,5,0.1)figure = plt.figure()axe = figure.add_axes([0.1,0.1,0.8,0.8])axe.plot(a,a**2)axe.set_xlim([0,5])axe.set_ylim([0,30])plt.show() axe.set_xlim([lower_boundary,higher_boundary]) to set boundaries for the x axis. axe.set_ylim([lower_boundary,higher_boundary]) to set boundaries for the y axis. Further reading: http://www.matplotlib.org - The project web page for matplotlib. https://github.com/matplotlib/matplotlib - The source code for matplotlib. http://matplotlib.org/gallery.html - A large gallery with various types of plots matplotlib can create. Highly recommended! http://www.loria.fr/~rougier/teaching/matplotlib - A good matplotlib tutorial. http://scipy-lectures.github.io/matplotlib/matplotlib.html - Another good matplotlib reference.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pandas advanced]]></title>
    <url>%2Fpandas_advanced%2F</url>
    <content type="text"><![CDATA[1. Handling missing data Creating a dataframe with NaN: 12345import numpy as npimport pandas as pddict1 = &#123;"A":[1,2,3],"B":[1,2,np.nan],"C":[1,np.nan,np.nan]&#125;df = pd.DataFrame(dict1)print(df) Drop missing values: df = df.dropna() drop rows with at least one NaN inside df = df.dropna(axis = 1) drop columns with at least one NaN inside df = df.dropna(axis = 1,thresh = 2) The column won’t be dropped if there are at least two non-NaN values in the column. Replace missing values: df = df.fillna(value=&quot;Filled in value&quot;) replace every NaN in the dataframe with a string. df[&quot;B&quot;] = df[&quot;B&quot;].fillna(value=df[&quot;B&quot;].mean()) a very common operation in Pandas, replace NaN with the mean of other values within that column. There are many other Math or Statistical methods you may use to determine values for missing data. 2. Group by method It allows you to group together rows based on values in a column and perform an aggregate function(sum, average, std……) on them. See the example below. ID Value 1 100 1 110 1 120 2 130 2 140 2 150 3 160 3 170 3 180 We can change it into: ID Value 1 330 2 420 3 510 Creating the dataframe: 12345import pandas as pddata = &#123;'Company':['GOOG','GOOG','MSFT','MSFT','FB','FB'], 'Person':['Sam','Charlie','Amy','Vanessa','Carl','Sarah'], 'Sales':[200,120,340,124,243,350]&#125;df = pd.DataFrame(data) Perform aggregate functions: 1234567891011by_Comp = df.groupby("Company")#by_company is not a dataframe but an objectprint(by_Comp.mean())print(by_Comp.std())print(by_Comp.sum())print(by_Comp.count())print(by_Comp.max())print(by_Comp.min())print(by_Comp.count())print(by_Comp.describe())print(df.groupby('Company').sum().loc['GOOG']) A dataframe is returned after performing the aggregate function, so we can perform all dataframe operations on it such as the last line of the code print(by_Comp.describe()) a super powerful aggregate function. It is the sum of all other aggregated functions listed above. 3. Merging, joining and concatenating Creating dataframes 1234567891011121314151617181920212223242526272829303132333435import pandas as pd# Concatenatingdf1 = pd.DataFrame(&#123;'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3'], 'C': ['C0', 'C1', 'C2', 'C3'], 'D': ['D0', 'D1', 'D2', 'D3']&#125;, index=[0, 1, 2, 3])df2 = pd.DataFrame(&#123;'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7'], 'C': ['C4', 'C5', 'C6', 'C7'], 'D': ['D4', 'D5', 'D6', 'D7']&#125;, index=[4, 5, 6, 7]) df3 = pd.DataFrame(&#123;'A': ['A8', 'A9', 'A10', 'A11'], 'B': ['B8', 'B9', 'B10', 'B11'], 'C': ['C8', 'C9', 'C10', 'C11'], 'D': ['D8', 'D9', 'D10', 'D11']&#125;, index=[8, 9, 10, 11])#Mergingleft = pd.DataFrame(&#123;'key': ['K0', 'K1', 'K2', 'K3'], 'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']&#125;) right = pd.DataFrame(&#123;'key': ['K0', 'K1', 'K2', 'K3'], 'C': ['C0', 'C1', 'C2', 'C3'], 'D': ['D0', 'D1', 'D2', 'D3']&#125;) #Joiningleft1 = pd.DataFrame(&#123;'A': ['A0', 'A1', 'A2'], 'B': ['B0', 'B1', 'B2']&#125;, index=['K0', 'K1', 'K2']) right1 = pd.DataFrame(&#123;'C': ['C0', 'C2', 'C3'], 'D': ['D0', 'D2', 'D3']&#125;, index=['K0', 'K2', 'K3']) Concatenating: simply glues multiple dataframes together. Leaving the missing data NaN, no need to set a column as the key. 12print(pd.concat([df1,df2,df3],axis = 0))print(pd.concat([df1,df2,df3],axis = 1)) When axis = 0, sticking rows together when axis = 1, sticking columns together Merging: combine dataframes together by using a column(s) other than the index column as the key. 1234print(pd.merge(left,right,on = "key",how = 'inner'))print(pd.merge(left,right,on = "key",how = 'outer'))print(pd.merge(left,right,on = "key",how = 'left'))print(pd.merge(left,right,on = "key",how = 'right')) inner: only keep rows which contain keys that appear in both dataframes(intersection; 交集) outer: keep all rows even though keys may only appear in one dataframes(union set; 并集) left: keep every row in the left dataframe and remove rows in the right dataframe whose keys can not be found in the left dataframe(left join in SQL) right: keep every row in the right dataframe and remove rows in the left dataframe whose keys can not be found in the right dataframe(right join in SQL) Joining: very similar to the merging method but the index column is used as the key. 1234print(left1.join(right1, how = "inner"))print(left1.join(right1, how = "outer"))print(left1.join(right1, how = "left"))print(left1.join(right1, how = "right")) 4. Further pandas operations df[&quot;column_name&quot;].unique() return unique values in a column df[&quot;column_name&quot;].nunique() return the number of unique values in a column len(df[&quot;column_name&quot;]) does the same df[&quot;column_name&quot;].value_counts() return how many times each unique value appears .apply(): There are already many built in functions in pandas such as .sum() We can use .apply() to call customized functions or Python built-in functions to the dataframe(series). Example: 1234567891011import pandas as pdimport numpy as npdef by_two(value): return (value*2)df = pd.DataFrame(&#123;'col1':[1,2,3,4],'col2':[444,555,666,444]&#125;)print(df.apply(by_two))df = df['col2'].apply(lambda x: x*2)df = df.apply(str)print(df.apply(len)) Make sure to understand the codes above. df.isnull() returns a dataframe with Boolean value. True if the value is NaN, False otherwise. Pivot table(数据透视表): an advanced Excel technique, not often used. See the example below. Creating the dataframe: 12345data = &#123;'A':['foo','foo','foo','bar','bar','bar'], 'B':['one','one','two','two','one','one'], 'C':['x','y','x','y','x','y'], 'D':[1,3,2,5,4,1]&#125;df = pd.DataFrame(data) A B C D 0 foo one x 1 1 foo one y 3 2 foo two x 2 3 bar two y 5 4 bar one x 4 5 bar one y 1 df.pivot_table(values=&#39;D&#39;,index=[&#39;A&#39;, &#39;B&#39;],columns=[&#39;C&#39;]) It mainly takes three arguments, we can specify which column we want it to become values, index or columns names Pivot table: C X Y A B one 4.0 1.0 bar two NaN 5.0 one 1.0 3.0 foo two 2.0 NaN We have a compound index which are A and B We have column names which are in C Values are allocated according to index and columns 5. Data input &amp; output Main data input: csv pandas data reader Excel HTML SQL CSV stands for Comma Separated Values. CSV: df=pd.read_csv(&quot;filename.csv&quot;) read data from a .csv file df.to_csv(&quot;filename.csv&quot;,index = False) convert a dataframe to csv We normally put index = False, otherwise there will be two columns of index when we .read_csv() again Excel: df=pd.read_excel(&quot;filename.xlsx&quot;,sheetname = &quot;Name_of_the_sheet&quot;) Don’t forget to specify the sheet name. If there are formulae or images in the Excel file, pandas is very likely to crash. df.to_excel(&quot;new_filename.xlsx&quot;,sheet_name = &quot;New_sheet&quot;) A bit wired as the attribute name is sheet_name HTML: A number of packages need to be installed for reading data from HTML 123pip install lxmlpip install html5libpip install BeautifulSoup4 data = pd.read_html(&quot;link_of_the_data&quot;) read data between &lt;table&gt; &lt;/table&gt; This returns a Python list with tables as elements inside. Use data[0] to access them. Data obtained from HTML may get messy. Some operations are needed to tidy up. df.to_html(&quot;filename.html&quot;) convert a dataframe to HTML. SQL database: use external packages such as Pymysql to read data from SQL database.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pandas basics]]></title>
    <url>%2Fpandas_basics%2F</url>
    <content type="text"><![CDATA[Pandas(Python data analysis library) basics 12import numpy as npimport pandas as pd pd.Series() is similar to np.array() but we can assign series with a string or datetime index rather than just numerical index. Convert list, array and dictionary to a series: 1234567891011import numpy as npimport pandas as pdlist1 = [10,20,30,40]array1 = np.array([10,20,30,40])dict1 = &#123;1:10,2:20,3:30,4:40&#125;series1 = pd.Series(list1)series2 = pd.Series(array1)series3 = pd.Series(dict1)print(series1)print(series2)print(series3) By default, we have ascending numerical index Assign index to a series 123456789101112import numpy as npimport pandas as pdindex1 = ["a","b","c","d"]list1 = [10,20,30,40]array1 = np.array([10,20,30,40])dict1 = &#123;"a":10,"b":20,"c":30,"d":40&#125;series1 = pd.Series(list1,index1)series2 = pd.Series(array1,index1)series3 = pd.Series(dict1)print(series1)print(series2)print(series3) We now have a string index &quot;a&quot;, &quot;b&quot;, &quot;c&quot; and &quot;d&quot; Indexing series 123456789import numpy as npimport pandas as pdseries1 = pd.Series([1,2,3,4],["USA","CHINA","UK","IRELAND"])series2 = pd.Series([1,2,3,4],["USA","CHINA","FRANCE","GERMANY"])value = series1["USA"]#value = series1.USAprint(value)series3 = series1 + series2print(series3) There are two ways of indexing, see above. Also, we can do mathematical operations between two series. Pandas will only carry out operations between values with the same index. For those index without a matching index in the other series, their value will be set to NaN. See below CHINA 4.0 FRANCE NaN GERMANY NaN IRELAND NaN UK NaN USA 2.0 The main data structure in pandas is dataframe and it is built on top of series. We could say a dataframe is a number of series that share the same index with each other. Each column or row in a dataframe is a series if we consider it independently. Hard code method for creating a dataframe: Method 1(filling each column in a dictionary): 123456import pandas as pddic1 = &#123;"date":[1,2,3,4,5,6,7,8,9,10], "value":[2,35,64,53,67,64,32,66,87,12], "ratio":[0.2,0.3,0.43,0.52,0.41,0.87,0.12,0.32,0.15,0.76]&#125;df = pd.DataFrame(dic1)print(df) Method 2(filling each row in a list): 123456789101112import pandas as pddf=pd.DataFrame([[1,2,0.2], [2,35,0.3], [3,64,0.43], [4,53,0.52], [5,67,0.41], [6,64,0.87], [7,32,0.12], [8,66,0.32], [9,87,0.15], [10,12,0.76]],columns=['date','value','ratio'])print(df) Another example: 1234import numpy as npimport pandas as pddf = pd.DataFrame(np.random.rand(5,4),columns = ["A","B","C","D"],index = ["CHINA","USA","UK","FRANCE","GERMANY"])print(df) Adding new columns to an existing dataframe df[&#39;new_column&#39;]=(df.old_1+df.old_2) add a new column from existing columns. df[&#39;name_of_new_column&#39;] = list_of_data add a new column into the dataframe directly. df.drop(&quot;column name&quot;,axis = 1) remove a column from the dataframe df.drop([&quot;row_index_1&quot;,&quot;row_index_2&quot;],axis = 0) remove a row from the dataframe df.index return values in the index column of the dataframe. df.columns return all column names of the dataframe. If in the dataframe, we have missing data, we may assign np.nan to it which stands for not an number Slicing columns: df.Name_of_column return all values under a column which is a series. df[&#39;Name_of_column&#39;] does exactly the same. You are encouraged to use this method. df = df[[&#39;Name_of_column_1&#39;,&#39;Name_of_column_2&#39;]] slicing multiple columns from the dataframe The attribute method doesn’t need &quot;&quot; while the index method do. Slicing rows: df.head(n) return first n rows in the dataframe df.tail(n) return last n rows in the dataframe df = df[2:5] slicing the data frame i.e. row 2,3,4 df = df.loc[&quot;index_name&quot;,[&#39;Name_of_column_1&#39;,&#39;Name_of_column_2&#39;]] Extremely useful when values inside the index columns are not numerical. df = df.iloc[from_row:to_row,[Index_of_column_1,Index_of_column_2]] Very similar to .loc[] but we can treat index values as numerical based ascending index even though index values themselves may not be numerical. We must use the index numbers of columns instead of name of columns for .iloc. .loc and .iloc methods are based on indexing a matrix in numpy a[row_index,column_index] Example for .loc and .iloc: 12345import numpy as npimport pandas as pddf = pd.DataFrame(np.random.rand(5,4),columns = ["A","B","C","D"],index = ["CHINA","USA","UK","FRANCE","GERMANY"])print(df.loc[["UK","FRANCE"],["B","C"]])print(df.iloc[2:4,1:3]) These two methods both give data at column “B” and “C” from row “UK” and “FRANCE”. df.loc[row_num,[“Name of the column”]] = new_value modify values in the dataframe df.describle() will return a number of useful statistical data of the dataframe includes: count, mean, std, min, 25% percentile, 50% percentile, 75% percentile and max. df = df.sort_values(Name_of_column,ascending=True) sort the dataframe according to numerical values in the column specified. Filter: Filter by values in a column: df[df[&quot;column_name&quot;]&gt;1.0] applying the conditional selection method. This means return rows in the dataframe where we have a True. Example: 12345import numpy as npimport pandas as pddf = pd.DataFrame(np.random.rand(5,4),columns = ["A","B","C","D"],index = ["CHINA","USA","UK","FRANCE","GERMANY"])print(df[df&gt;0.5])print(df[df["A"]&gt;0.5]) df[df&gt;0.5] will return a dataframe with NaN for values less than 0.5. This is because df&gt;0.5 will return a dataframe. df[df[&quot;A&quot;]&gt;0.5] will only return rows whose values under column A are greater than 0.5. This is because df[&quot;A&quot;]&gt;0.5 will return a pandas series rather than a dataframe. What if we want to put in multiple conditions, we CANNOT simply do df[(df[&quot;A&quot;]&gt;0.5) and (df[&quot;B&quot;]&gt;0.3)] This is because normal python and doesn’t support pandas series. We need to use &amp; for and operator, | for or operator. See the example below: 12345import numpy as npimport pandas as pddf = pd.DataFrame(np.random.rand(5,4),columns = ["A","B","C","D"],index = ["CHINA","USA","UK","FRANCE","GERMANY"])print(df[(df["A"]&gt;0.5) &amp; (df["B"]&gt;0.3)])print(df[(df["A"]&gt;0.5) | (df["B"]&gt;0.3)]) df.rename(columns = &quot;old name&quot;: &quot;new name&quot;, inplace = True) to change a column name df = df.rename(columns = &quot;old name&quot;: &quot;new name&quot;) does exactly the same Change multiple column names: 12new_name = ["new_date","new_value","new_ratio"]df.columns = new_name Treating the dataframe as an iterable object, see the example below: 123for index,row in df.iterrows(): print(index) print(row["A"],row["B"],row["C"],row["D"]) In other words, .iterrows() function will slice each row into pandas series. df = df.reset_index() reset customized index back to numerical ascending index, the old index column will become a new column called &quot;index&quot; of the dataframe. It won’t cause confusion as we need to use df.index for new numerical index column and df[&quot;index&quot;] for old index column. df = df.set_index(“name_of_the_column”) will automatically remove the column we select and make it become the index column. We may use df.index = df[“name_of_the_column”] but we still need to remove the “name_of_the_column” column using df.drop(&quot;name_of_the_column&quot;,axis = 1) Working with compound index: indexing from the outside to inside Producing a dataframe with compound index 123456outside = ['G1','G1','G1','G2','G2','G2']inside = [1,2,3,1,2,3]hier_index = list(zip(outside,inside))hier_index = pd.MultiIndex.from_tuples(hier_index)df = pd.DataFrame(np.random.randn(6,2),index=hier_index,columns=['A','B'])print(df) This will produce the following dataframe with two columns of index. Group Num A B 1 0.153661 0.167638 G1 2 -0.765930 0.962299 3 0.902826 -0.537909 1 -1.549671 0.435253 G2 2 1.259904 -0.447898 3 0.266207 0.412580 If we want to index 0.412580 at the bottom right corner, use: print(df.loc[&quot;G2&quot;].loc[3,&quot;B&quot;]) df.loc[&quot;G2&quot;] returns a dataframe with 3 rows under G2. Do .loc again inside this dataframe. df.index.names = [&#39;Group&#39;,&#39;Num&#39;] assign column names to compound index What if rows with inside index Num=1 are needed? It is a bit tedious to use .loc multiple times. There is another method: print(df.xs(1,level=&#39;Num&#39;)) The level attribute specifies the column inside the compound index.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Numpy notes]]></title>
    <url>%2Fnumpy_notes%2F</url>
    <content type="text"><![CDATA[Numpy(Numerical Python) notes1. Basics import numpy as np The data type in Numpy is called array a = np.array([1,2,3]) to create a new array Alternatively: 1234import numpy as nplist1 = [1,2,3]array1 = np.array(list1)print(array1) a=np.arange(1,12,3) from 1 to 11 with a step of 3 i.e. [1,4,7,10] Super useful in matplotlib. The starting value will be included for sure but the ending value may not be included(depend on step). arange stands for array range a=np.linspace(1,13,5) create an evenly spaced array with 5 values i.e.[1,4,7,10,13] Both, beginning and ending values will be included. a = a.reshape(3,2) change the dimension of an existing array. It means 3 rows and 2 columns here(2d array or matrix). We may also create a 2d array(matrix) manually using a = np.array([[1,2,3],[4,5,6],[7,8,9]]) Alternatively: 123list1 = [(1,2,3),(4,5,6),(7,8,9)]array1 = np.array(list1)print(array1) print(a.shape) will give us the shape of the array. print(a.size) will give us the length of the array kinda similar to len(list1) print(a.dtype) will give us the datatype of elements inside the array. a = np.zeros((3,4)) This creates a 3*4 matrix with zeros. Similarly, we have a = np.ones((3,4)) Be careful, a = np.ones((1,4)) will return a 2d matrix [[1,1,1,1]] . However, a = np.ones(4) will return an 1d array [1,1,1,1]. a = np.random.rand(3,4) create a 3*4 matrix with random decimal values under 1. Each value has the equal possibility being picked. a= np.random.randn(3,4) The difference between np.random.rand() is that the possibility for each value being picked follows the standard normal distribution with mean at 0 and variance equals 1. a = np.random.randint(0,10,5) create an array with 5 elements random integers ranging 0-10. value = np.random.choice(a) will help you choose a random value from the array a. print(a.sum()) will sum up all elements inside the array. print(a.sum(axis=1)) sum up elements in each row (This axis trick also works for min, max, mean and std below) print(a.sum(axis=0)) sum up elements in each column print(a.min()) will give the minimum element. print(a.max()) will give the maximum element. print(a.argmin()) will give the index of the minimum element. print(a.argmax()) will give the index of the maximum element. print(a.mean()) will give the mean of the array. print(a.std()) will give the standard deviation of the array. print(a.ndim) to find the dimension of the array. print a sin function using both numpy and matplotlib: 123456import numpy as npimport matplotlib.pyplot as pltx = np.arange(0,3*np.pi,0.1)y = np.sin(x)plt.plot(x,y)plt.show() 2. Advanced a = a*3 will multiply every element in array by 3. Other Math operations(+,-,/,**) can also be applied this way. There is a lot of math functions in numpy. You can do np.sin(a), np.log(a), np.exp(a), np.sqrt(a) etc. Check the doc for more information Product of metrics is super easy to do in numpy. See the example below 12345678import numpy as npa = np.array([[1,2,3], [4,5,6], [7,8,9]])b = np.array([[1], [2], [3]])print(a.dot(b)) Either a.dot(b) or np.dot(a,b) may be used. It is a good practice to make sure both arrays are 2d before doing dot product Dot product and cross product between two vectors 12345import numpy as npa = np.array([1,2,3])b = np.array([1,2,3])print(np.dot(a,b))print(np.cross(a,b)) Indexing of an array: a=np.array([1,2,3,4,5,6,7,8]) Very similar to Python list print(a[3]) This will return 4. print(a[3:5]) This will return 4, 5. Indexing of the matrix a = np.array([(1,2,3),(4,5,6)]) A bit different from Python, in the format matrix[row,column] print(a[0,2]) This will return 3. print(a[0:,2]) or print(a[0:2,2]) These will return [3, 6]. Broadcasting: super cool, not working for standard Python list. See below: 1234import numpy as npa=np.array([1,2,3,4,5,6,7,8])a[0:3]=20print(a) a becomes [20,20,20,4,5,6,7,8] See the example below. 123456import numpy as npa = np.array([1,2,3,4])b = aa[0:2]=10print(a)print(b) You will find out both a and b are changed even though we didn’t write any code to change b. It is because b=a is in fact setting the pointer of b to the pointer of a(in order to save RAM). If we want to fix this issue. We need to use .copy(). See below. 123456import numpy as npa = np.array([1,2,3,4])b = a.copy()a[0:2]=10print(a)print(b) Conditional selection print(a&gt;1) to test size of elements inside the array. This will automatically compare all elements inside the array with 1 and return True or False for each element. This is the basis for conditional selection. 12345import numpy as npa = np.array([1,2,3,4,5,6,7,8,9])a_compare = a&gt;4b = a[a_compare]print(b) This will give us all elements which are greater than 4. We can shorten the operation above, see below. 1234import numpy as npa = np.array([1,2,3,4,5,6,7,8,9])b = a[a&gt;4]print(b) This trick is used in Pandas a lot. Another example: 123import numpy as npa = np.arange(10,51)print(a[a%2==0]) The identical matrix $I$ is often used, we can produce one using np.eye(3). 3 is the dimension of the identical matrix. In other words, it is a $3\times 3$ matrix. Putting two array together. We can do it in two directions vertically &amp; horizontally Vertically: 12345import numpy as npa = np.array([(1,2,3),(3,4,5)])b = np.array([(1,2,3),(3,4,5)])c = np.vstack((a,b))print(c) Horizontally: 12345import numpy as np a = np.array([(1,2,3),(3,4,5)]) b = np.array([(1,2,3),(3,4,5)]) c = np.hstack((a,b)) print(c) Change 2d array to one dimension 1234import numpy as npa = np.array([(1,2,3),(4,5,6)])a = a.ravel()print(a) We get [1,2,3,4,5,6]]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Finance basics notes]]></title>
    <url>%2Ffinance_basics%2F</url>
    <content type="text"><![CDATA[Week 1The interest rate in general Get money earlier is good because there is opportunity cost, inflation and uncertainty of the financial condition(risk). Interest: we are in fact losing for getting money back later, there need to be something to compensate for our loss. We call it interest. People pay interests for time. Interest rate kinda describes the risk of being patient. What affects interest rates, same as the three things we talked about: opportunity cost(How strong is the economic growth?), inflation rate and level of risk(interest rate is higher during the war while lower during the peaceful time). Interest is the foundation of economics as it describes the cost of time. Everything else is built based on this. Compounding and earning returns over time Compound interest growth exponentially Future value(FV) = $PV\times (1+r)^{n}$ Annual percentage rate(APR), stated rate or nominal rate are the same thing: It means the periodic rate. We can multiply APR and the number of periods. It doesn’t take into account compounding interest. Effective rate: The rate you actually earn if APR is compounded. This is the rate you are actually paying(getting) over a period of time. $R_{effective}=(1+\frac{APR}{n})^{n}$ Discounting future cash present value(PV) = $\frac{FV}{(1+r)^{n}}$ Two things will affect the PV of future cash: interest rates and time. Valuation by discounted cash flow(DCF) DCF is the base for all financial valuation. We can put a price on anything as long as we know when does cash come in? How much cash is coming in? We can use the DCF method to valuate a bond, share etc. As long as we know how much cash will come in in the future, we can discount it back to today and find the total value of a bond. mergers and acquisitions 兼并和收购 Valuation by Comparable Often referred as Comps: Comparable transactions or prices or value-relevant ratio. Quick, easy but dangerous, not as accurate as DCF. $\frac {price}{attribute}$ gives you a ratio of your asset. You can compare this ratio of other asset to estimate the value of your asset. Attributes we may use are: P/E ratio(price earning ratio) earnings yield dividend yield return on assets EBITDA multiples return on asset(ROA) return on equity(ROE) return on invested capital PEG ratio(P/E ratio over the growth in earning) Bond Simple debt instruments that promise interest and face value. We have national bonds(国家债券), corporate bonds, municipal bonds(地方债券) and sovereign bonds(主权债券). Valuate a bond: Map up cash flow Discount them accordingly sum up all discounted cash Mortgage Simple debt instruments, each repayment includes the principal(本金) and the interest. Amortization schedule(贷款分期偿付时间表): Question: Assume a bank charges 7% interest per year. You borrow $10,000 to be repaid in equal yearly instalments of $3810.52 over 3 years. Let’s amortize the loan schedule and compute interest and principal repayments. Solution: Year Payment Interest Principal repayment Balance 0 $0 $0 $0 $10,000 1 $3,810.52 $700 $3,110.52 $6,889.48 2 $3,810.52 $482.26 $3,328.26 $3,561.22 3 $3810.52 $249.29 $3561.22 $0 Create this table and calculate the amount of interest paid, the remainder will be principal repayment. Annuity(年金) Annuities are a series of equal payments at regular intervals. For example, pension payment and monthly mortgage payment. It is calculation is pretty standard, simply change annual rate back to monthly rate and discounting cash. 12345total = 0for i in range(1,121): tem = (500)/((1+0.011715)**i) total+=temprint(total) Python may be used to calculate annuity. To sum up, all these valuation methods are used in the industry. Practitioner put them on different weight according to their confidence of these methods. Week 2Overview of the capital budgeting process The firm uses its assets to generate cash flow(profit). CFO decides how to deal with the cash flow. We may: Pay out to the capital markets to debt holders, bondholders or equity holders through dividends or repurchases. Re-invest within the firm to increase the firm’s profitability. If existing assets are not producing enough cash flow, CFO may decide to issue extra bonds, equity or mortgage in order to pull cash from the capital market into the firm. The science of the capital budgeting process is actually HOW, WHEN, WHERE should the firm spend its money in order to maximize the return to equity holders. Practice for capital budgeting: Arm’s-length(公平交易准则) Objective Transparent Common things to do during the capital budgeting process: Accept or reject a proposal Find the best proposal within a set Rank different proposals Net present value(NPV) Present value(PV) = total present value of all future cash flow of this project Net present value(NPV) = PV - initial investment of this project Decision rule: whether $NPV&gt;0$ In other words, whether money coming in out weight the money going out. Here is an example, discount rate = 10%: Period Cash Flow Present Value 0 $-1500 $-1500 1 $900 $818.18 2 $750 $619.83 Total $150 $-61.99 We have a net cash inflow so the project is profitable but $NPV&lt;0$ so it is not worth doing. In other words, the project is not profitable enough. NPV is the best capital budgeting tool This is because: It includes the effect cash flow, timing, opportunity cost and risk(discount rate). It is an objective, arms-length and transparent metrics(衡量指标) for capital budgeting Sometimes, projects will still be accepted even though $NPV&lt;0$. For example, government policies or environmental cleanup. Payback period Payback period means how long it takes to earn back initial investment(no discount rate included) Decision rule: If the payback period$&lt;X$, we will invest Example: Project Pay back period 0 1 2 3 X $-500 $500 $250 $0 1 Y $-500 $100 $200 $600 3 Z $-500 $300 $400 $400 1.5 It seems that X project has the shortest pay back period but it may not always be reliable. See cons below. Pros: reflect time directly reflects opportunity costs Cons: Neglect cash flow after pay back period neglect timing Neglect risk(no discount rate included) Project Payback period NPV(10%) 0 1 2 3 X $-500 $500 $250 $0 1 $161 Y $-500 $100 $200 $600 3 $207 Z $-500 $300 $400 $400 1.5 $404 ​ If we calculate NPV for these projects, we get a different answer i.e. project Z Pay back period is a weak capital budgeting tool, it often acts as a back up of NPV. Accounting ratios Basically, putting one piece of accounting data over the other piece of accounting data. Example: Return on invested capital(ROIC)= $\frac{NOPAT}{invested ; capital}$ NOPAT stands for net operating profit after tax Return on assets(ROA)= $\frac{net ; income}{total ; asset}$ Return on equity(ROE)=$\frac {ASE}{net ; income}$ ASE stands for average shareholder’s equity Gross margin = $\frac{gross ; profit}{sales}$ Profit margin = $\frac {net ; profit}{net ; sales}$ Profitability index = $\frac {PV; of ; future ; flow}{initial ; investment}$ Pros: Makes numerical sense Reflects the use of capital Cons: Neglect timing(no discount ratio included) Include too much accounting distortions(like depreciation) Neglects risk Accounting ratio is a useful tool but it should act as a back up of NPV as well. Internal rate of return(IRR) IRR is basically the discounting rate which will make NPV = 0. In other words, we discount cash flow harder and harder until NPV reaches naught. IRR is kind of a measure of the resiliency of the project. There is no direct connection between IRR and NPV. A large NPV doesn’t always mean we will have a high IRR. It is always a good practice to put NPV and IRR together IRR holds all the pros of NPV. In addition, it scales NPV into percentage interpretation to make it more intuitive(直观的). However, percentage interpretation may cause problems as well because we don’t know the actual size. For example, 2% of 1billion dollar is greater than 30% of 1000 dollar. WARNING: be careful about using IRR solely when directions of cash flow are often reversed. Project Year 0 Year 1 IRR NPV(10%) X $-400 $500 25% $54.54 Y $400 $-500 25% $-54.54 Project X is a standard case. Project Y is like issuing a mortgage of $400 at year 0 and pay back $500 at year 1. They both have the IRR but their NPV are opposite. That is another reason why we often present IRR together with NPV. There is a chance that we can have multiple IRR or no IRR because we are solving a polynomial equation. Math :) We can calculate NPV, IRR using built-in functions in Microsoft Excel. Sensitivity analysis Most CFOs rely on multiple metrics. Everything depends on forecasts while all forecasts are technically wrong as there is always uncertainty in the financial market. Forecasts depend on assumptions. Sensitivity analysis focus on how forecast results will change if assumptions changed slightly. See the example below Time Pessimistic Expected Optimistic 0 -$6,000 -$5,000 -$5,000 1 $2,500 $3,200 $4,000 2 $2,000 $2,500 $3,000 3 $1,000 $1,200 $2,000 4 $1,000 $1,200 $1,500 5 $1,000 $1,200 $1,500 NPV(15%) $-587 $1,745 $3,665 We’ve got three different NPV depending on the assumptions we made and our forecasts make more sense. Week 3Overview of financial statements Balance sheet What does the firm own? Assets = Liabilities + owner’s Equity There are three types of asset: current asset, fixed asset and other asset. There are three types of liabilities: current liability, long-term liability and shareholder’s equity. Profit and loss statement Whether the firm is making money? EBITDA(Earning before interest, tax, depreciation and amortization) = Net sale(Revenue) - Cost of goods sold - SG&amp;A expense(Selling, General &amp; Administrative expense) EBIT(Earning before interest and tax) = EBITBDA - Depreciation - Amortization Taxable income = EBIT - Interest expense Net income(profit) = Taxable income - Tax - Dividends Cash flow statement Accrual method(权责发生制) of accounting. Reports on cash movements Reconciles cash movement between balance sheet and P/L statement Hunting for cash creation Having earnings doesn’t equal to having cash. It is due to the accrual method used in accounting. Sales are booked before cash actually comes in and there are non-cash items. We really need to find free cash flow because all our tools of discounting cash and capital budgeting depend on cash flow. Without cash, those formulae are useless. Free cash flow(FCF) will tell us how much cash is there actually in the business. FCF = Operating Profit(after tax) - Increase in working capital + Depreciation - Capital expenditure + After-tax salvage value(税后残值) Working capital = Non-cash current asset - Current liability Salvage value is the book value of an asset less depreciation. It is only included in FCF formula if assets are sold at the end of the project. Working with capital adjustment Increase in current liability is good for cash. Increase in current asset is bad for cash. Working capital is an opportunity cost, you have some net current asset in your hand but you can’t change it into cash to generate profit. Depreciation and capital expenditure(income) Depreciation represents losing value due to wear and tear and it is a non-cash expenditure. Amortization is kinda similar, it represents ‘depreciation’ for intangible assets. Capital expenditure is a cash expenditure and it is not treated as expenditure in accounting often due to its large numerical size. Salvage value of an asset is also an opportunity cost, we want to change it back to cash at the end of the project. It is the opposite of capital expenditure. Taxes Taxes are real cash flow. All expenses shield revenue from tax, a firm should make use of all its shields. Interest paid for debts can deduct tax and it’s part of the reason why debt is so attractive to firms. Example of free cash flow Year 0 1 2 3 Revenue $500 $500 $500 Total costs $300 $300 $300 Depreciation $100 $100 $100 EBIT $100 $100 $100 Taxes(30%) $30 $30 $30 NOPAT $70 $70 $70 Capital spending $500 $0 $0 $0 Net PP&amp;E $500 $400 $300 $200 Cash from operations $0 $170 $170 $170 Working capital $150 $100 $50 $0 Asset sales $0 $0 $0 $200 Free cash flow -$650 $220 $220 $420 NOPAT: net operating profit after tax Cash from operations = Depreciation + NOPAT Discount rate = 10% NPV = $47.37 IRR = 14%(using Excel function) Payback period = 2.5 years ROIC = $\frac{ave(NOPAT)}{ave(Net; PP&amp;E)}=\frac{(0+70+70+70)\div 3}{(500+400+300+200)\div 4}=20%$ (Got it wrong at the beginning, review again later) Week 4Debt vs Equity(股本) For a firm, it usually has two sources of capital: debt($r_{d}$) and equity($r_{e}$). They have different discounting rate due to different level of risk. Debt: Non-contingent claim: not contingent on the financial condition of the firm. In other words, you have to pay me back no matter what happened. Collateral(需要抵押的) Debt has priority in bankruptcy. A lot of monitoring or restrictions on how a firm uses the money. Types of debt: From banks: straight loan; line of credit; mortgage; business loan; industrial loan From the public: bonds Equity: Ownership of the company Contingent claim: contingent on the financial condition of the firm. Equity holders will get all the residual cash. Equity holders experience higher risk than debt holders. Equity will be wiped out in bankruptcy. Capital structure: how firm mix the use of debt and equity IT DOES NOT CHANGE THE UNDERLYING BUSINESS RISK OF THE FIRM. For example, if a firm takes lots of debt, it doesn’t get riskier but the equity holders become riskier. Another example, if KFC takes lots of debt, it won’t affect consumers’ desire to buy chicken so the business risk level stays unchanged. Risk free rate Risk free rate acts as the baseline for the interest rate. Safest possible place to put money in the US will be US Treasury bonds. Rate of return = risk free rate(US treasury bonds) + risk premium If we go through historical data up to ancient Rome, we will find national bonds fluctuated between 5% and 7% in most years. Bonds with longer maturity have a higher risk because the rate may rise in the future(opportunity cost) and there is more liquidity risk for long term bonds. Historical risk and return The riskier asset I buy, greater the return I will get. Stork return rates are around 10% - 12% per year on average in the U.S. Storks generally do better in the long run. Stork’s volatility(易变性) is much higher than bonds or equity. Equity risk premium Equity premium = $R_{m} - r.f.$ $R_{m}$: Stork market return rate $r.f.$: risk free rate From historical data, $R_{m}=11%$, $r.f. = 5.5%$ . We have equity premium $=5.5%$ on average on condition that we are investing in a wide range of portfolio. It is kind of the fair rate to compensate for the stork market risk. In the real world, equity premium around $4.5% - 6.5%$ is considered to be good. Factors affecting equity premium: systemic risk, investors’ attitude toward risk. Beta and cost of equity Diversification of a portfolio may decrease risk while the market risk can’t be diversified. Ideally, we want a portfolio which wiggles less and provides a stable return. 如果我们想要一个震荡幅度小的组合投资，并不是说我们把它内部的股票全换成比较稳定的就能达到，因为可能多个稳定的股票同时跌。我们还要考虑股票的相互影响，最好是找到规律比如说：一个股票跌，另一个很容易涨，这样在组合投资外部看来，它的震荡幅度还是小的。 We want to measure how does a stork change the risk of my portfolio. Beta(贝塔系数）: a measure of the risk arising from exposure to general market movements as opposed to idiosyncratic(特殊) factors. In other words, it is a measure of the sensitivity of a stork to the market risk. It depends on the variance and covariance of the stork. Variance: how a stork wiggle by itself? Covariance: how two or storks wiggle with each other? $\beta = \frac{Cov(R_{i},R{m})}{Var(R{m})}$ $Cov$: covariance $R_{i}$: a specific stork $R_{m}$: the whole stork market In other words, beta equals to the covariance of a specific stork and the whole stork market over the variance of the whole stork market. If beta = 2, this means the stork return is about twice the market return Capital asset pricing model(CAPM): giving us the return of putting on risk to any stork. $return(cost ;of; equity) =risk; free; rate + \beta \times market ; risk; premium(equity ; premium)$ If a stork has $\beta = 1.8$, equity premium $=5.5%$ and risk free rate $=3%$. We have: cost of equity = $3%+1.8\times 5.5% = 12.9%$ We can use this value as the discounting rate for future cash inflow. It also shows how much return I should get by taking that amount of risk. Credit rating A debt may default(无法偿还). Investor concerns the possibility of default and the principal recovery rate in default. These two things put a risk premium on debt and determine the credit rating of a company. Possibility of default depends on: Maturity Cash flow Debt level Profitability Current economic conditions Ability to raise capital Principal recover rate depends on: Tangibility Marketability(易转让程度) Transportability Cost of debtWe have three methods to estimate the cost of debt. Historical cost: what is the rate of interest last time the company borrow money? It is a fine method but won’t reflect the current market conditions. Need to be cautious. Current yield to maturity: If we have outstanding debt and that debt is still traded on the market, we can use the current yield to maturity directly. It is the best method but only works if the company has an existing debt. Works well for big companies. Ratings adjusted yield: put a risk premium on risk free rate according to the company’s credit rating. We can also use other companies with a similar credit rating for reference. Interest rates are tax deductible. The effective rate = $r_{d}\times (1-r_{t})$ Weighted average cost of capital(WACC) WACC is obtained by allocating different weight for $r_{e}$, $r_{d}$ then find the average. WACC = $\frac{Equity}{Equity+Debt}\times r_{e}+\frac {Debt}{Equity+Debt}\times r_{d}(1-r_{t})$]]></content>
      <categories>
        <category>Finance</category>
      </categories>
      <tags>
        <tag>Finance</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ basics]]></title>
    <url>%2Fc%2B%2B_basics%2F</url>
    <content type="text"><![CDATA[1. Basics information C++ file ends up with .cpp We always need to build the project first before running it. Build will translate your code to the language that the computer can understand MAKE SURE TO PUT ; EVERY TIME YOU FINISH A LINE IN C++. 2. Drawing a shape 123456789#include &lt;iostream&gt;using namespace std;int main() &#123; cout &lt;&lt; "Hello, World!" &lt;&lt; endl; return 0;&#125; You need #include &lt;iostream&gt; and using namespace std at the beginning of your code. Don’t worry their meanings for now, will explain later. int main() is a function in c++, like a container so we can put our codes inside. Codes within the {} will be executed when we run the program. return 0; don’t worry too much for now, remember we need it inside the bracket. cout stands for console out. This will print out the string in the console. endl means ending a line in console. c++ will read code from top to bottom Here I am drawing out a triangle: 123456789#include &lt;iostream&gt;using namespace std;int main() &#123; cout &lt;&lt; " /|" &lt;&lt; endl; cout &lt;&lt; " / | " &lt;&lt; endl; cout &lt;&lt; " / |" &lt;&lt; endl; cout &lt;&lt; "/___|" &lt;&lt; endl; return 0;&#125; 3. Variable Variable is basically a container where we can store information To create a variable, we need to tell c++ the data type. Let me create a string variable as example: 1string student_name = "John"; We can also create a integer type variable in another format as followed: 12int student_age;student_age = 35; These two formats are equivalent. 1int age,gpa; We may also create multiple variables of the same data type in one line as above. 12345678910#include &lt;iostream&gt;using namespace std;int main() &#123; string student_name = "John"; cout &lt;&lt; "Hello, my name is "&lt;&lt; student_name &lt;&lt; endl; return 0;&#125; We can insert a string variable at the end of another string by putting the variable after &lt;&lt;. This operation is like print(f&quot;Hello, my name is{student_name}&quot;) is Python. If we want to insert the variable in the middle of another string, we can use the trick below: 12345678910#include &lt;iostream&gt; using namespace std; int main() &#123; int student_age = 19; cout &lt;&lt; "Hello, I am "&lt;&lt;student_age&lt;&lt;" years old"&lt;&lt; endl; return 0; &#125; Make sure to put the variable in between &lt;&lt;. These &lt;&lt; are linking strings and variables together. We can also print two variables in a raw, see the example below: 12345678910111213#include &lt;iostream&gt;using namespace std;int main()&#123; int student_age; student_age = 19; bool isMale; isMale = 0; cout &lt;&lt;student_age&lt;&lt;isMale&lt;&lt; endl; return 0;&#125; It works kinda the same, we use &lt;&lt; link up variables. 4. Data types char grade = &#39;A&#39;; stands for character, it can only store one character. Be careful, we must put the character in between &#39;&#39; rather than &quot;&quot;. string phase = &quot;Hello there&quot;; stands for a string of characters. int age = 50; stands for a whole number. It can be either positive or negative float value = 13.5; can store decimal values. double value = 3.1415; can store decimal values. The difference between double and float is: float can take more decimal points. As a beginner, stick with double bool isMale = false This stands for Boolean values, can either be true or false. 5. Working with strings endl: 12345678910#include &lt;iostream&gt;using namespace std;int main()&#123; cout &lt;&lt; "Hello World! " ; cout &lt;&lt; "Whats up." &lt;&lt; endl; return 0;&#125; endl basically tells c++ to start a new line in the console after each cout operation. If we don’t want to move to a new line, we can remove &lt;&lt; endl. Similar to Python, \n means starting a new line so cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl; is equivalent to cout &lt;&lt; &quot;Hello world \n&quot;; string functions: .length() 123456789#include &lt;iostream&gt;using namespace std;int main()&#123; string trial; trial = "Hello world"; cout &lt;&lt; trial.length() &lt;&lt; endl; return 0;&#125; This will print out the length of a string variable. Be aware, we need to define the variable first. If we do cout &lt;&lt; &quot;Hello world&quot;.length() &lt;&lt; endl, an error will show up. Indexing: 12345678910#include &lt;iostream&gt;using namespace std;int main()&#123; string trial; trial = "Hello world"; cout &lt;&lt; trial[0] &lt;&lt; endl; cout &lt;&lt; "Hello world"[0] &lt;&lt; endl; return 0;&#125; Similar to Python, we can access a certain character in the string by indexing and we don’t have to define a string variable first like what we do for .length(). Assigning a new character: We can modify a character in the string by assigning a new character to it. trial[1] = &#39;E&#39; Now, we have &quot;HEllo world&quot; instead of &quot;Hello world&quot;. .find(): 123456789#include &lt;iostream&gt;using namespace std;int main()&#123; string trial; trial = "Hello world"; cout &lt;&lt; trial.find("world",0) &lt;&lt; endl; return 0;&#125; We can pass in two parameters, the first will be the substring we wish to find and the second will be where do we want c++ to start searching. By default, the second parameter will be 0. If that substring can’t be find. C++ will return 4294967295. It is a bit odd but this value is actually the largest 32 bits unsigned value, which kind of make sense. .substr(): 1234567891011#include &lt;iostream&gt;using namespace std;int main()&#123; string trial; trial = "Hello world"; string trial_1; trial_1 = trial.substr(2,3); cout &lt;&lt; trial_1 &lt;&lt; endl; return 0;&#125; This function will help us cut a substring out of the main string. It requires two parameters, the first parameter will tell c++ where to start cutting. The second parameter will tell c++ how many characters do we need. trial_1 = trial.substr(2,3); Here, we start from the 2 position which is &quot;l&quot; and we need 3 characters. We get llo as expected. 6. Working with numbers A quick demo of the math operations 123456789101112#include &lt;iostream&gt;using namespace std;int main()&#123; cout &lt;&lt; 5 + 7; cout &lt;&lt; 5 - 7; cout &lt;&lt; 15.0 / 7; cout &lt;&lt; 5 * 7; cout &lt;&lt; 10 % 3; return 0;&#125; Here is one thing interesting, if we do cout &lt;&lt; 15/7; C++ will return 2 as we are dividing an int by an int so the result is also an int. How can we fix this, use 15.0 or 7.0 instead. 12345678910111213141516#include &lt;iostream&gt;using namespace std;int main()&#123; double value; value = 1; cout &lt;&lt; value &lt;&lt; endl; value++; cout &lt;&lt; value &lt;&lt; endl; value--; cout &lt;&lt; value &lt;&lt; endl; value +=3; cout &lt;&lt; value &lt;&lt; endl; return 0;&#125; Here value++ means an increment of 1 to a numerical variable. A short hand in c++. Here value-- means decreasing a numerical variable by 1. A short hand in c++. += -= etc works the same as Python If we do int+int, we get int. That is kinda the reason why int/int will give int as well. Math function: #include &lt;cmath&gt; We need to import these functions before using them. 123456789#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; cout &lt;&lt; pow(2,3); return 0;&#125; This pow(A,B) function has two parameters, will return A to the power of B. 123456789#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; cout &lt;&lt; sqrt(4); return 0;&#125; This sqrt(A) takes one parameter, will return the square root of A. 123456789#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; cout &lt;&lt; round(4.3); return 0;&#125; This round(A) function will follow the normal rounding rule(四舍五入). We also have ceil(A) function, which will round up(向上取整). Oppositely, we have floor(A) function, which will round down(向下取整) 123456789#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; cout &lt;&lt; fmax(3,10); return 0;&#125; fmax(A,B) function will take two parameters, return the greater value between A and B. fmin(A,B) function will do the opposite. 7. Getting input from the user Most data types: 12345678910#include &lt;iostream&gt;using namespace std;int main()&#123; int age; cout &lt;&lt;"Please enter your age"; cin &gt;&gt; age; cout &lt;&lt; "You are "&lt;&lt; age &lt;&lt; " years old"&lt;&lt; endl; return 0;&#125; Create a variable first as we want input from the user and we need to store it somewhere. Getting an input is kinda the opposite of cout &lt;&lt;. We use cin &gt;&gt; and put the variable name after the &gt;&gt; sign. This method works for most data types except for string. string type: 12345678910#include &lt;iostream&gt;using namespace std;int main()&#123; string name; cout &lt;&lt;"Please enter your name"; getline(cin,name); cout &lt;&lt; "You are "&lt;&lt; name &lt;&lt; "."&lt;&lt; endl; return 0;&#125; We need to use the getline() function when input is the string type. It takes two parameters which are cin and variable_name. 8. Building a calculatorOur target is to get two input figures from the user and add them together and print out the result. 123456789101112#include &lt;iostream&gt;using namespace std;int main()&#123; int num1, num2; cout &lt;&lt;"Please fill in the first number: "; cin &gt;&gt; num1; cout &lt;&lt;"Please fill in the second number: "; cin &gt;&gt; num2; cout &lt;&lt; "The result is: " &lt;&lt; num1+num2 &lt;&lt; endl; return 0;&#125; 9. Building a Mad Libs Game(疯狂填词 wth???)Basically, let the user to input three words and put these words into three sentences. Funny? Maybe. 12345678910111213141516#include &lt;iostream&gt;using namespace std;int main()&#123; string color,plural_none,celebrity; cout &lt;&lt; "Please fill in a colour." &lt;&lt; endl; getline(cin,color); cout &lt;&lt; "Please fill in a plural none." &lt;&lt; endl; getline(cin,plural_none); cout &lt;&lt; "Please fill in a celebrity." &lt;&lt; endl; getline(cin,celebrity); cout &lt;&lt; "Roses are " &lt;&lt; color &lt;&lt; endl; cout &lt;&lt; plural_none &lt;&lt; " are blue" &lt;&lt; endl; cout &lt;&lt; "I love " &lt;&lt; celebrity &lt;&lt; endl; return 0;&#125; 10. Arrays A variable can only store one value while an array can hold multiple data values. Array operations: 123456789#include &lt;iostream&gt;using namespace std;int main()&#123; int lucky_nums[20] = &#123;4,8,12,15,23,42&#125;; cout&lt;&lt;lucky_nums[3]&lt;&lt;endl; lucky_nums[1] = 50; cout&lt;&lt;lucky_nums[1]&lt;&lt;endl;&#125; It is similar to creating a variable but we need to put a [] after the array name and put its elements inside {}. We can limit the length(size) of the array by putting a value inside [](optional). We can obtain an element inside the array by indexing, standard stuff. We can modify an element’s value by assigning a new value to it. If we want to cout the whole array, we need to use for loop 11. Function A container to put codes so we can re-use them in the future main() is actually a function. Create a basic function: 1234567891011#include &lt;iostream&gt;using namespace std;void say_hi()&#123; cout&lt;&lt;"Hello user"&lt;&lt;endl;&#125;int main()&#123; say_hi();&#125; We need to define a function’s return type at the start of defining a function. Everything inside {} are codes of the function. void basically means return nothing. Don’t forget to call the function inside the main(). Create a function with parameters 1234567891011#include &lt;iostream&gt;using namespace std;void say_hi(string name)&#123; cout&lt;&lt;"Hello "&lt;&lt;name&lt;&lt;endl;&#125;int main()&#123; string student = "Oscar"; say_hi(student);&#125; It is kinda similar to Python I guess but we must specify the data type of the formal parameter(形参) we want to input. In terms of the example above, say_hi(string name). 123456789101112#include &lt;iostream&gt;using namespace std;void say_hi(string name, int age)&#123; cout&lt;&lt;"Hello "&lt;&lt;name&lt;&lt;". You are "&lt;&lt; age &lt;&lt; " years old" &lt;&lt; endl;&#125;int main()&#123; string student = "Oscar"; int student_age = 19; say_hi(student,student_age);&#125; We may pass in multiple parameters if we wish. MAKE SURE TO SPECIFY THE DATA TYPE. Order is important in c++, make sure to define the function before calling it in main. If we really want to reverse the order, see the example below, there is a trick we can do. 123456789101112131415#include &lt;iostream&gt;using namespace std;void say_hi(string name, int age);int main()&#123; string student = "Oscar"; int student_age = 19; say_hi(student,student_age);&#125;void say_hi(string name, int age)&#123; cout&lt;&lt;"Hello "&lt;&lt;name&lt;&lt;". You are "&lt;&lt; age &lt;&lt; " years old" &lt;&lt; endl;&#125; We can declare a function first by void say_hi(string name, int age); and fill in codes later. We may pass parameters into a function, but we are actually passing in their values instead of variables themselves. If we want to modify values of variables, WE MUST PASS IN POINTERS AND DEFERENCE THEM. 12. Return statement We must specify the return data type when defining a function. We can set any one of the data types we know as return. If we don’t want anything to return, use void Define a function with return: 123456789101112131415#include &lt;iostream&gt;using namespace std;double cube(double figure)&#123; double result; result = figure*figure*figure; return result;&#125;int main()&#123; double value = 3.14; cout&lt;&lt;cube(value)&lt;&lt;endl;&#125; return is very similar to Python. The function will be terminated when return is executed. Don’t forget to put a ; after the return statement. 13. If statement Allow our program to respond to different conditions。 if(condition){operation} In other words, if the condition in () is true, codes within {} will run. See the example, below 12345678910#include &lt;iostream&gt;using namespace std;int main()&#123; bool is_male = false; if(is_male)&#123; cout&lt;&lt;"Hey, this is a boy"&lt;&lt;endl; &#125;&#125; We can also do logic operators inside (). We have &amp;&amp; for and operator. || for or operator. Example:if(is_male &amp;&amp; is_tall){cout&lt;&lt;&quot;You are both tall and male&quot;&lt;&lt;endl;} The basic logic structure in C++ is similar to Python. 12345678910111213141516#include &lt;iostream&gt;using namespace std;int main()&#123; if()&#123; &#125; else if()&#123; &#125; else&#123; &#125;&#125; We can also do if, else and else if The negation operator in C++ is !. Basically, if we have is_tall = true, !is_tall will be false. This basically reverses the answer. 14. More if statement(comparison operators) A quick example, see below 1234567891011121314151617181920#include &lt;iostream&gt;using namespace std;int main()&#123; double num1,num2; cout&lt;&lt;"Please fill in the first number"&lt;&lt; endl; cin&gt;&gt; num1; cout&lt;&lt;"Please fill in the second number"&lt;&lt; endl; cin&gt;&gt; num2; if(num1&gt;num2)&#123; cout&lt;&lt;"The first number is greater which is "&lt;&lt;num1&lt;&lt;endl; &#125; else if(num1&lt;num2)&#123; cout&lt;&lt;"The second number is greater which is "&lt;&lt;num2&lt;&lt;endl; &#125; else if(num1==num2)&#123; cout&lt;&lt;"Two numbers are equal, they are both "&lt;&lt;num2&lt;&lt;endl; &#125;&#125; We have a number of comparison operators: &gt;, &lt;, ==, !=. We can mix these comparison operators with logic operators(&amp;&amp;, ||). 15. Build a more powerful calculatorThe user can fill in two numbers as well as the operator. 123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;using namespace std;int main()&#123; char operat; double num1,num2,result; cout&lt;&lt;"Please fill in the first number"&lt;&lt;endl; cin&gt;&gt;num1; cout&lt;&lt;"Please fill in the operator"&lt;&lt;endl; cin&gt;&gt;operat; cout&lt;&lt;"Please fill in the second number"&lt;&lt;endl; cin&gt;&gt;num2; if (operat == '+')&#123; result = num1+num2; cout&lt;&lt;num1&lt;&lt;operat&lt;&lt;num2&lt;&lt;"="&lt;&lt;result&lt;&lt;endl; &#125; else if(operat == '-')&#123; result = num1-num2; cout&lt;&lt;num1&lt;&lt;operat&lt;&lt;num2&lt;&lt;"="&lt;&lt;result&lt;&lt;endl; &#125; else if(operat == '*')&#123; result = num1*num2; cout&lt;&lt;num1&lt;&lt;operat&lt;&lt;num2&lt;&lt;"="&lt;&lt;result&lt;&lt;endl; &#125; else if(operat == '/')&#123; result = num1/num2; cout&lt;&lt;num1&lt;&lt;operat&lt;&lt;num2&lt;&lt;"="&lt;&lt;result&lt;&lt;endl; &#125; else&#123; cout&lt;&lt;"Invalid operator input"&lt;&lt;endl; &#125;&#125; 16. Switch statements switch statement is a special type of if statement. See the example below. In this example, we want to convert 0 to Sunday, 1 to Monday and 2 to Tuesday etc. 12345678910111213141516171819202122232425262728293031323334353637#include &lt;iostream&gt;using namespace std;string convert(int choice)&#123; string day_result; switch (choice) &#123; case 0: day_result = "Sunday"; break; case 1: day_result = "Monday"; break; case 2: day_result = "Tuesday"; break; case 3: day_result = "Wednesday"; break; case 4: day_result = "Thursday"; break; case 5: day_result = "Friday"; break; case 6: day_result = "Saturday"; break; default: day_result = "Invalid input"; break;&#125; return day_result;&#125;int main()&#123; int figure; cout&lt;&lt;"Please fill in the number you wish to convert."&lt;&lt;endl; cin&gt;&gt;figure; cout&lt;&lt;convert(figure)&lt;&lt;endl;&#125; switch statement is very useful when we want to compare several values with a variable. In the case above, we could compare 1, 2, 3…. to choice variable but it is inefficient. We may write a switch (choice) and case 0: which will be equivalent to choice == 0. We need to put a break in each case. Otherwise, if choice == 3, it will enter case 3 and keep going into case4, case5, case6 and default unless there is a break in any case. We put a break in case 3 so it won’t go into the following cases. 17. While loops Basic structure: while(condition){codes} Quick demo: 12345678910#include &lt;iostream&gt;using namespace std;int main() int index; index = 0; while(index&lt;5)&#123; cout&lt;&lt;index&lt;&lt;endl; index ++; &#125;&#125; We get 0, 1, 2, 3, 4 as expected. There is also a loop called do while loop, see the example below 12345678910#include &lt;iostream&gt;using namespace std;int main() int index; index = 6; do&#123; cout&lt;&lt;index&lt;&lt;endl; index ++; &#125;while(index&lt;5)&#125; We get 6 as the answer. Let me explain, it is like the reverse of a while loop. We will run the codes insidedo{} first before checking where while() is met. If while is met, it will keep going. If not, it will terminate. That is kinda why we still get 6 even though index is already greater than 5. 18. Guessing game12345678910111213141516171819202122232425262728#include &lt;iostream&gt;using namespace std;int main()&#123; int result_figure,choice; result_figure = 5; int chance,max_chance; max_chance = 5; chance = 0; while(true)&#123; cout&lt;&lt;"Please guess a number"&lt;&lt;endl; cin&gt;&gt;choice; if(choice == result_figure)&#123; cout&lt;&lt;"Congrats, you win"&lt;&lt;endl; break; &#125; else&#123; cout&lt;&lt;"You are wrong"&lt;&lt;endl; chance ++; &#125; if(chance == max_chance)&#123; cout&lt;&lt;"You ran out of chance, lost"&lt;&lt;endl; break; &#125; &#125;&#125; Nothin too exciting :-( 19. For loops 12345678#include &lt;iostream&gt; using namespace std; int main()&#123; for(int i=1;i&lt;=5;i++)&#123; cout&lt;&lt;i&lt;&lt;endl; &#125; return 0; &#125; The for loop in c++ is a bit different from python. We must pass in three parameters, the first parameter is to define a i or index. The second is to set the condition which will terminate the loop and finally what should be done to i every time we go through one circulation of the loop. We separate these parameters using; . There is another way to write the above codes, see below. 123456789#include &lt;iostream&gt;using namespace std;int main()&#123; for(int i=1;i&lt;=5;)&#123; cout&lt;&lt;i&lt;&lt;endl; i++; &#125; return 0;&#125; One useful thing is to print out elements in an array. See below 123456789#include &lt;iostream&gt;using namespace std;int main()&#123; int list_of_nums[] = &#123;0,1,2,3,4,5,6,7,8,9,10&#125;; for (int i=0;i&lt;=11;i++)&#123; cout&lt;&lt;list_of_nums[i]&lt;&lt;endl; &#125; return 0;&#125; This basically print out every element in the list_of_nums array. 20. Exponent function123456789101112131415#include &lt;iostream&gt;using namespace std;int main()&#123; int result,base,power; base =3; power =3; result =1; for(int i=0;i&lt;power;i++)&#123; result*=base; &#125; cout&lt;&lt;result&lt;&lt;endl; return 0;&#125; Only consider positive power factor to simplify. 21. 2d arrays &amp; nested loops 2d arrays: every element in an array is an array like [[1,2,3],[4,5,6],[7,8,9]] in Python. Create a 2d array: 123456#include &lt;iostream&gt;using namespace std;int main()&#123; int number_grid[3][2]=&#123;&#123;1,2&#125;,&#123;4,5&#125;,&#123;7,8&#125;&#125;; return 0;&#125; When creating a 2d array, we need two []. The first [] is to define how many arrays do we have in the outside array. The second is two define how many elements do we have in each inside array. We can access any element in a 2d array using cout&lt;&lt;number_grid[row][column] Nested loop is superposing for loops. In other words, a for loop in a for loop. We can use this technique to return every element in thenumber_grid array. See below. 1234567891011#include &lt;iostream&gt;using namespace std;int main()&#123; int number_grid[3][2]=&#123;&#123;1,2&#125;,&#123;4,5&#125;,&#123;7,8&#125;&#125;; for(int i = 0; i&lt;3; i++)&#123; for(int j = 0;j&lt;2;j++)&#123; cout&lt;&lt;number_grid[i][j]&lt;&lt;endl; &#125; &#125; return 0;&#125; Basically, putting the other for loop inside the {} of the first for loop. 22. Comments We can use // to create one line of comments. We can use /* to start multiple lines of comments and */ to terminate. 23. Pointers(指针) A variable is physically stored at a specific address inside the RAM so the computer can keep track. If we want to print out the memory address of a variable, put &amp; before the variable name. 1234567#include &lt;iostream&gt;using namespace std;int main()&#123; int num1 = 12; cout&lt;&lt; &amp;num1&lt;&lt;endl; return 0;&#125; We get 0x6dfefc in this case, it is an address in hexadecimal. In c++, we won’t use the phrase memory address, instead, we call it pointer. We can create a variable to store pointer. See the example below. 1234567#include &lt;iostream&gt;using namespace std;int main()&#123; int num1 = 12; int* pNum1 = &amp;num1; return 0;&#125; When creating a pointer variable, we put *p on top of the original variable name. Also, the data type of the pointer variable is the same as the original variable data type. Let me explain, &amp;num1 is an address so do pNum1 while * means dereferencing, *pNum1 is actually the value at that pointer address, which is int. We can also dereference a pointer to find the actual value which is stored at that address. cout&lt;&lt;pNum1&lt;&lt;endl; will print out the pointer address, we get 0x6dfef8. cout&lt;&lt;*pNum1&lt;&lt;endl; will dereference and print out the actual value, we get 12. If we do cout&lt;&lt;*&amp;num1&lt;&lt;endl;, we get 12 as expected. If we do cout&lt;&lt;&amp;*&amp;num1&lt;&lt;endl;, we get 0x6dfef8 as expected. 24. Classes &amp; Objects(OOP) Existing data types in c++ are not enough for us to model everything. We can kinda create a new data type by creating a class. See the example below. 12345678910111213141516171819#include &lt;iostream&gt;using namespace std;class Phone&#123;public: string name; int price; string cpu; string RAM;&#125;;int main()&#123; Phone my_phone; my_phone.name = "iphone x"; my_phone.price = 6888; my_phone.cpu = "A10"; my_phone.RAM = "3G"; cout&lt;&lt;my_phone.name&lt;&lt;endl; return 0;&#125; The codes above are similar to using __init__ function in Python. class is more like a template, we can specify values of its attributes by creating an object. In the code above, we create an object using Phone my_phone;. 25. Constructor functions A special function which will always be called whenever we create an object. See codes below. 1234567891011121314#include &lt;iostream&gt;using namespace std;class Phone&#123;public: string name; Phone()&#123; cout&lt;&lt;"Hey, I am creating a new object"&lt;&lt;endl; &#125;&#125;;int main()&#123; Phone my_phone; return 0;&#125; We are creating a function inside public. The function name MUST be the same as the class name. We may pass parameters into the constructor function. See below. 12345678910111213#include &lt;iostream&gt;using namespace std;class Phone&#123;public: string name; Phone(string phone_name)&#123; cout&lt;&lt;"Hey, I am creating a new object called "&lt;&lt;phone_name&lt;&lt;endl; &#125;&#125;;int main()&#123; Phone my_phone("Iphone X"); return 0; We are passing in a phone_name parameter, we must specify its value when creating an object. Also similar to __init__ function Python. However, we still need to manually specify values of attributes. Constructor functions can save us some efforts. See below 12345678910111213141516171819202122#include &lt;iostream&gt;using namespace std;class Phone&#123;public: string name; int price; string cpu; string RAM; Phone(string Aname,int Aprice,string Acpu,string ARAM)&#123; name = Aname; price = Aprice; cpu = Acpu; RAM = ARAM; &#125;&#125;;int main()&#123; Phone my_phone("Iphone x",6888,"A10","3G"); cout&lt;&lt;my_phone.name&lt;&lt;endl; return 0; One thing I need to point out, when naming parameter names inside the constructor function. It is a good practice to put an A before the actual name. In Python, we do Phone.name = name. In c++, name = name can be very confusing so instead we do name = Aname. Make it crystal clear. We may also create multiple constructor functions. See below. 12345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;using namespace std;class Phone&#123;public: string name; int price; string cpu; string RAM; Phone()&#123; name = "No info"; price = 0; cpu = "No info"; RAM = "No info" &#125; Phone(string Aname,int Aprice,string Acpu,string ARAM)&#123; name = Aname; price = Aprice; cpu = Acpu; RAM = ARAM; &#125;&#125;;int main()&#123; Phone no_info_phone; Phone my_phone("Iphone x",6888,"A10","3G"); cout&lt;&lt;my_phone.name&lt;&lt;endl; cout&lt;&lt;no_info_phone.name&lt;&lt;endl; return 0;&#125; This is an excellent way of setting attributes some default values. 26. Object functions Functions we can put inside a class. See below. 1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;using namespace std;class Phone&#123;public: string name; int price; string cpu; string RAM; Phone(string Aname,int Aprice,string Acpu,string ARAM)&#123; name = Aname; price = Aprice; cpu = Acpu; RAM = ARAM; &#125; bool if_expensive()&#123; if(price&gt;2000)&#123; return true; &#125; else&#123; return false; &#125; &#125;&#125;;int main()&#123; Phone my_phone("Iphone x",6888,"A10","3G"); cout&lt;&lt;my_phone.if_expensive()&lt;&lt;endl; return 0;&#125; We defined an if_expensive function inside the class. We don’t need to pass in self in c++. We can use parameters directly. To be specific, we use price rather than self.price that is kinda why we don’t need to pass in self as a parameter. 27. Getters &amp; Setters We can use these to control access to attributes. See below. 12345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;using namespace std;class Phone&#123;private: string name; int price; string cpu; string RAM;public: Phone(string Aname,int Aprice,string Acpu,string ARAM)&#123; name = Aname; price = Aprice; cpu = Acpu; RAM = ARAM; &#125; string name_getter()&#123; return name; &#125; void name_setter(string Aname)&#123; name = Aname; &#125;&#125;;int main()&#123; Phone my_phone("Iphone x",6888,"A10","3G"); cout&lt;&lt;my_phone.name_getter()&lt;&lt;endl; my_phone.name_setter("Iphone 8"); cout&lt;&lt;my_phone.name_getter()&lt;&lt;endl; return 0;&#125; We can put attributes that we don’t want users to access inside private:. These attributes can only be accessed by functions inside class{} but not elsewhere. We may want users to modify certain data so we define a name_setter(). We may want users to access certain data so we define a name_getter(). 28. Inheritance(继承) We can define a new class by extending an existing class. See the example below for a very basic introduction. 123456789101112131415161718192021222324#include &lt;iostream&gt;using namespace std;class Student&#123;public: void gaming()&#123; cout&lt;&lt;"I want to do some gaming"&lt;&lt;endl; &#125; void study()&#123; cout&lt;&lt;"I want to spend some time studying"&lt;&lt;endl; &#125;&#125;;class Yuxuan :public Student&#123;&#125;;int main()&#123; Yuxuan me; me.study(); return 0;&#125; We can inherit public functions, attributes from a superclass into a subclass. These functions can also be overwritten simply by defining it again. EndThanks for reading. These notes are abstract from the c++ tutorial created by Mike Dane(Giraffe academy). I want to express my thanks to Mike. Awesome videos as always. Make sure to check out his website, contents are absolutely amazing.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Quick demo for Pymysql]]></title>
    <url>%2Fpymysql_demo%2F</url>
    <content type="text"><![CDATA[import Pymysql Search 1234567891011conn = pymysql.connect(host="localhost",user="root",passwd="root",db="python_summer")if conn: print("success")cur = conn.cursor()cur.execute("SELECT * FROM student")all_info = cur.fetchall()print(all_info)for i in all_info: print(i[1])cur.close()conn.close() Alter 1234567891011121314151617conn = pymysql.connect(host="localhost",user="root",passwd="root",db="python_summer")if conn: print("success")cur = conn.cursor()num = cur.execute("UPDATE student SET student.student_name = 'Yuxuan Liu' WHERE student.student_name = 'Oscar'")print(num)conn.commit()cur.close()conn.close() append 12345678910111213conn = pymysql.connect(host="localhost",user="root",passwd="root",db="python_summer")cur = conn.cursor()num = cur.execute("INSERT INTO student(student_name,student_subject,student_gpa) VALUES('Jim','Engineering','3.93')")print(num)conn.commit()cur.close()conn.close() delete 12345678910111213conn = pymysql.connect(host="localhost",user="root",passwd="root",db="python_summer")cur = conn.cursor()num = cur.execute("DELETE FROM student WHERE student.student_name = 'Jim'")if num == 1: conn.commit()conn.close()cur.close()]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Mysql</tag>
        <tag>Pymysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML basics]]></title>
    <url>%2Fhtml_basics%2F</url>
    <content type="text"><![CDATA[1. TagsDOCTYPE1&lt;!DOCTYPE html&gt; The tag as shown above will tell the internet explorer that we are writing an html file. For this tag, we don’t need an ending tag and for other tags(container tags) we need an ending tag for each starting tag. html123&lt;html&gt; &lt;/html&gt; Here are html tags with a starting tag and an ending tag. / is used to denote that it is an ending tag. This is the highest level tag in our website, other contents are under these tags. head123&lt;head&gt; &lt;/head&gt; Another type of tags are head tags. We can define the title, description of the document and also other information related to the document. It is like the settings of the html file. body123&lt;body&gt; Hello world&lt;/body&gt; The body tags are like the meat and bone of the web page. This is the main part of the website. Normally way longer than the head tags. We can simply put a Hello World inside the body tag and Chrome will print it out for us. Indent12345678&lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; Pay extra attention to the indents. head tags and body tags are both inside the html tags. &lt;html&gt; is like the parents while &lt;head&gt;&amp;&lt;body&gt; are like children ish. &lt;head&gt; and&lt;body&gt; are sort of siblings as they both have one tab indent. Title123&lt;head&gt; &lt;title&gt;The title of the website&lt;/title&gt;&lt;/head&gt; Inside head tags, we can put an extra tag called title tags. We fill the title of the web page in the tags. 2. More basic tags in detailMeta12345&lt;head&gt; &lt;title&gt;The title of the website&lt;/title&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name = "description" content = "This is the description"&gt; &lt;/head&gt; This tag will give us some meta data, we can put the type of character encoding inside as above. Also, we can put a description inside the meta tag. So when people search our website on Google, this description will be used for reference. meta tags will be introduced in detail in later sections. Heading12345678&lt;body&gt; &lt;h1&gt; The fist header &lt;/h1&gt; &lt;h2&gt; THe second header &lt;/h2&gt;&lt;/body&gt; We can create a header using the code above, &lt;h1&gt; will give us the largest font size of the header while &lt;h6&gt; will give us the smallest font size available for a header. Paragraph12345&lt;body&gt; &lt;p&gt; Put the contents of the paragraph inside &lt;/p&gt;&lt;/body&gt; We can create a paragraph using &lt;p&gt;. All paragraphs will format itself automatically. The order of paragraphs in the html file is simply the order shown on the webpage. Bold(加粗)1&lt;b&gt;The contents you want to bold&lt;/b&gt; Whenever you want to bold certain contents, simply put it inside &lt;b&gt;. Italic(斜体)1&lt;i&gt;The contents you want to make it italic&lt;/i&gt; Whenever you want to make certain contents italic, simply put it inside &lt;i&gt;. Moreover, we can superpose&lt;p&gt;,&lt;i&gt;&amp;&lt;b&gt;. To make a paragraph both bold and italic. Whitespace1234567891011&lt;body&gt; &lt;p&gt; The first paragraph &lt;/p&gt; &lt;p&gt; The second paragraph &lt;/p&gt;&lt;/body&gt; 12345678&lt;body&gt; &lt;p&gt; The first paragraph &lt;/p&gt; &lt;p&gt; The second paragraph &lt;/p&gt;&lt;/body&gt; html doesn’t read the whitespace between the codes. It only cares about what is in the tags. In other words, the codes above are technically the same. Break123&lt;body&gt; &lt;br/&gt;&lt;/body&gt; If we want a blank line on our web page. We could use the tag &lt;br/&gt; and html will read it. You can make multiple tags to create multiple blank lines. Horizontal line123&lt;body&gt; &lt;hr/&gt;&lt;/body&gt; We can create a horizontal line like this. We may want to use it on our web page to break up contents. Big tag12345&lt;body&gt; &lt;p&gt; The &lt;big&gt;first&lt;/big&gt; paragraph &lt;/p&gt;&lt;/body&gt; If we want to make certain contents greater in font size, using &lt;big&gt; tags is one of the easiest way. Simply put the contents between &lt;big&gt; and &lt;/big&gt;. It is not that significant but will work. Things works exactly the same for &lt;small&gt;and &lt;/small&gt;. Subscript(下标)&amp;superscript(上标)123&lt;p&gt; H&lt;sub&gt;2&lt;/sub&gt;O&lt;/p&gt; If we want to write the chemical formula for water. We need a subscript 2. It can be easily achieved in html by putting 2 between &lt;sub&gt;&amp;&lt;/sub&gt;. 123&lt;p&gt; 10&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt; If we want to write 10 square in html. We need a superscript 2. Simply do the very similar thing with &lt;sup&gt;&amp;&lt;/sup&gt;. SummaryThis tags not only works in &lt;body&gt;. It works in all parts of the html file where there is a text. 3. Comments12&lt;!-- Put your comments inside --&gt; Everything within &lt;!-- --&gt;is comments and it may take up multiple lines. Very similar to other programming languages, it’s like a little note and can be ignored. 4. Style and colorsThis is a very basic introduction of CSS(Cascading style sheets) which is used for styling. There is a separate course just for CSS 123456&lt;body&gt; &lt;p style = "color: blue"&gt; The fist paragraph &lt;/p&gt; &lt;/body&gt; We can pass some attributes to &lt;p&gt; tags. Here, we are passing a style attribute and set the text color to blue. 123456&lt;body&gt; &lt;p style = "color: blue;backgroung-color: red"&gt; The fist paragraph &lt;/p&gt; &lt;/body&gt; We can also set the background color to red using the code above. These attributes also work for other tags like &lt;h1&gt;, even&lt;body&gt; tags work. 5. Formatting the websiteHeader12345678910111213&lt;body&gt; &lt;header&gt; &lt;nav&gt; &lt;/nav&gt; &lt;/header&gt; &lt;main&gt; &lt;article&gt; &lt;/article&gt; &lt;/main&gt; &lt;footer&gt; &lt;/footer&gt;&lt;/body&gt; Most web pages will have three sections which are headers(页眉), main and footer(页脚). Html has various tags for creating these sections as shown in the code above. Some extra things, using &lt;nav&gt; tags we could create a navigation table and it’s normally in the &lt;header&gt; part of the webpage We can also create an article(like the ones in a blog) using &lt;article&gt; tags and they are normally in the &lt;main&gt; part of the webpage. Section12345678&lt;main&gt; &lt;article&gt; &lt;section&gt; &lt;/section&gt; &lt;section&gt; &lt;/section&gt; &lt;/article&gt;&lt;/main&gt; &lt;section&gt; tags often come with &lt;article&gt; tags as they make the web page well-structured. Of course, an &lt;article&gt; can contain multiple &lt;section&gt;. Aside1234&lt;body&gt; &lt;aside&gt; &lt;/aside&gt;&lt;/body&gt; You can put something that is not directly related to the core contents in the &lt;aside&gt; tags. A good example is advertisements on web pages. SummaryTo be honest, all those tags are not necessary, you may create a fabulous website without these structural tags but they can make your website extremely organized and improve the readability of your code. Also, this kind of neat structure allows search engines to figure out what is inside easily. 6. Links(超链接)Links are used in html to link your website to other websites, other parts of your website or jpg, pdf etc. 123&lt;body&gt; &lt;a href = "https://www.google.com"&gt;Text shown for this link&lt;/a&gt;&lt;/body&gt; By using &lt;a&gt; tags we can create a link to a different website. Simply, put the website url inside the hrefattribute and put the text you wish to show between &lt;a&gt;&amp;&lt;/a&gt;. Attention, the code above will navigate users to the url directly so they leave your website. 123&lt;body&gt; &lt;a href = "https://google.com" target = "_blank"&gt;Text shown for url&lt;/a&gt;&lt;/body&gt; If we want user to open a new web page for this link, we could add an extra attribute target = &quot;_blank&quot; inside &lt;a&gt;tags. 123&lt;body&gt; &lt;a href = "relative local address"&gt;another page&lt;/a&gt;&lt;/body&gt; If we want to link to a different pages of our website. We can simply set the href attribute equal to the relative local address(It must be the relative address, the absolute address won’t work) of our html file. This can automatically navigate to this file. 123&lt;body&gt; &lt;a href = "address of picture"&gt;picture&lt;/a&gt;&lt;/body&gt; If we want to link to a picture in your computer, it works the same, simply put the relative address of the picture inside the href attribute. 7.ImagesBasics123&lt;body&gt; &lt;img src="url of the image" alt = "text to show if the in scr image is not available" /&gt;&lt;/body&gt; scr attribute stores the source of the picture. &lt;alt&gt; attribute is more like a backup, it is some text that will be shown when the picture in scr is no longer available. It is always a good practice to write a &lt;alt&gt;. Besides, we don’t need an end tag for &lt;img simply do /&gt; when you finish. Very similar to links, we can do relative address of the picture instead of the url. 1&lt;img width = "100" height = "50" src="url of the image" alt = "text" /&gt; We could alter dimensions of the image by passing in width &amp;heightattributes. The unit we use here are pixels(像素). 1&lt;img width = "100" src="url of the image" alt = "text" /&gt; Instead of setting both height of width, we could set only one attribute of those. HTML will set the other value automatically to keep the aspect ratio(长宽比) unchanged. Example: Set an image as a link12345&lt;body&gt; &lt;a href = "https://www.google.com"&gt; &lt;img width = "100" src="url of the image" alt = "text" /&gt; &lt;/a&gt;&lt;/body&gt; The code above is an example of setting an image also as a link. This trick also works for other tags like&lt;h1&gt; etc. 8. Videos &amp; YouTubeBasics123&lt;body&gt; &lt;video src ="relative address " controls width = "100"&gt;Text shows if video can't play&lt;/video&gt;&lt;/body&gt; We can add a video to the website using &lt;video&gt;. Very similar to adding a picture we use a relative address and reserved word controls afterwards(very important, otherwise there will be no buttons for us to control the video ). The text between &lt;video&gt; and &lt;/video&gt;will only be shown if the browser can’t play this video. In addition, we can control dimensions of the video by passing in width and height attributes. Old tricks as we used it in previous sections already. Poster123&lt;body&gt; &lt;video src ="relative address" controls poster = "relative address"&gt;&lt;/video&gt;&lt;/body&gt; Instead of showing the first scene of the video as the poster, we could DIY our poster. Simply set an extra attribute called poster and pass in the relative address of our poster. Auto play &amp; loop(自动重复播放)123&lt;body&gt; &lt;video src ="relative address" controls loop autoplay&gt;&lt;/video&gt;&lt;/body&gt; Simply pass in extra reserved words autoplay and loop. Easy peasy, lemon squeasy! YouTube videos1234&lt;body&gt; &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/8JnfIa84TnU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt; &lt;/body&gt; Click the share button of the YouTube video and choose Embed. This will give us some&lt;iframe&gt; code. We can use them to add YouTube videos to our website. Don’t worry too much about&lt;iframe&gt; for now. This will also give you the YouTube control panel which is awesome. 9. ListsUnordered list1234567&lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;a href = "apple.com"&gt;Apple&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Banana&lt;/li&gt; &lt;li&gt;Pear&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt; We could create an unordered list by using the &lt;ul&gt;tags. The &lt;ul&gt; tags act as a container and we can put each list item inside tags &lt;li&gt; . Different types of data can be put inside one unordered list. See the Apple example, we actually put a link inside the list along with some texts. As we are creating an unordered list, each item starts with a black dot. Ordered list1234567&lt;body&gt; &lt;ol&gt; &lt;li&gt;&lt;a href = "apple.com"&gt;Apple&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Banana&lt;/li&gt; &lt;li&gt;Pear&lt;/li&gt; &lt;/ol&gt;&lt;/body&gt; An ordered list actually works almost the same, except we got serial numbers at the start of each item instead of black dots. Style123456&lt;body&gt; &lt;ol type = "a"&gt; &lt;li&gt;apple&lt;/li&gt; &lt;li&gt;bacon&lt;/li&gt; &lt;/ol&gt;&lt;/body&gt; We can change the style of the ordered list. Simply input an extra attribute calledtype. Its value can be &quot;a&quot;so we got a,b,c ….. It may also be &quot;A&quot; so we got A,B,C …… Apart from those, we can have Roman numerals(I,II,III,IV….) by inputting &quot;I&quot; Cascade lists123456789101112&lt;body&gt; &lt;ol&gt; &lt;ul&gt; &lt;li&gt;apple&lt;/li&gt; &lt;li&gt;banana&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt;school&lt;/li&gt; &lt;li&gt;uni&lt;/li&gt; &lt;/ul&gt; &lt;/ol&gt;&lt;/body&gt; We can have lists in a list(cascade). See the example above, we have two unordered lists inside an ordered list. 10. Table123456789101112131415&lt;body&gt; &lt;table&gt; &lt;caption&gt;The title of the table&lt;/caption&gt; &lt;tr&gt; &lt;th&gt;Title_1&lt;/th&gt; &lt;th&gt;Title_2&lt;/th&gt; &lt;th&gt;Title_3&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;one&lt;/td&gt; &lt;td&gt;two&lt;/td&gt; &lt;td&gt;three&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt; We initialize tables in html using &lt;table&gt;tags. &lt;tr&gt; tags are placed inside to act as a row container. For elements in a row, we put every of them inside&lt;td&gt;tags. Here we got three elements in a row. If we want more rows or more elements, simply add more &lt;tr&gt;&amp;&lt;td&gt;. For creating table headers, it works similarly, just use &lt;th&gt; instead of &lt;td&gt;. One more thing, we can create a caption(title) for the table using&lt;caption&gt;tags at the very top. 11. Containers in HTML(div,span)BasicsIt is a good habit to put your HTML code inside containers. One reason is that in the future we will use CSS to formatting your web page. It makes CSS code really easy if your HTML codes are well structured in containers. &lt;div&gt; and &lt;span&gt; are two popular containers. Types of elementsThere are basically two types of elements in HTML. The first type is called the block elements. They will occupy the entire width of the page. The other one is called inline elements. They will only occupy the space they actually need. See the example below. 12&lt;a href="google.com"&gt;link1&lt;/a&gt;&lt;a href = "apple.com"&gt;link2&lt;/a&gt; Link1 and link2 are clearly inline elements. As neither of them takes up the entire lines, they are actually sitting beside(in the same line with) each other. 123456&lt;p&gt; Paragraph 1&lt;/p&gt;&lt;p&gt; Paragraph 2&lt;/p&gt; Paragraphs here are clearly block elements. There is enough space after paragraph 1 for paragraph 2. However, these two paragraphs don’t sit beside each other. Instead, paragraph 2 switch to a different line. &lt;span&gt;12&lt;span&gt;The fist span&lt;/span&gt;&lt;span&gt;The second span&lt;/span&gt; &lt;span&gt; tags are inline elements. The contents inside are able to sit beside each other. &lt;div&gt;123456&lt;div&gt; The fist div&lt;/div&gt;&lt;div&gt; The second div&lt;/div&gt; &lt;div&gt; tags are block elements. Either of them occupies their own line. They can’t sit beside each other. Summary&lt;div&gt; is a block element. &lt;span&gt; is a inline element. More popular than&lt;div&gt;. 12. Input tagsText box123&lt;body&gt; &lt;input type="text" value = "DPOefault text"/&gt; &lt;/body&gt; We are using a single &lt;input&gt; tag in html. We need to pass in a type attribute. The code above will generate a text box for user to type in. We can set default text for the text box by passing in a value attribute and set it equal to the text we want to show. Password box123&lt;body&gt; &lt;input type = "password" /&gt;&lt;/body&gt; Here we are creating a text box for password. This text box will automatically hide the user inputs. Textarea123&lt;body&gt; &lt;textarea rows = "10" cols="3"&gt;Default text&lt;/textarea&gt;&lt;/body&gt; It is simply a bigger block where users can input some text. We can control its dimension by setting rows and cols attributes. Date123&lt;body&gt; &lt;input type = "date" /&gt;&lt;/body&gt; The will create a box where users can select a certain date. Range123&lt;body&gt; &lt;input type = "range" /&gt;&lt;/body&gt; This will produce a slider. File123&lt;body&gt; &lt;input type = "file" /&gt;&lt;/body&gt; This will create a button for user to choose file. The file explorer will shown up if an user click the button. Checkbox123&lt;body&gt; &lt;input type = "checkbox" /&gt;&lt;/body&gt; A tiny box, user a click it to tick the box. We could tick as many checkboxes as we want. Radio button12345&lt;body&gt; &lt;input name ="Oscar" type = "radio" /&gt; &lt;input name = "Oscar" type = "radio" /&gt; &lt;input name = "Oscar" type = "radio" /&gt;&lt;/body&gt; Radio buttons are kinda similar to checkbox. The biggest difference is that we can only tick one of the radio buttons with the same name attribute. There are so many types of inputs. I am only listing a number of them, there is a web page for references. Make sure to check it out https://www.w3schools.com/tags/tag_input.asp&gt;. 13. iFrame12345&lt;body&gt; &lt;iframe scr = "www.mikedane.com" width = "1000" height ="800"&gt; The text will be shown if iframe is not working &lt;/iframe&gt;&lt;/body&gt; By using the &lt;iframe&gt; tags, we could display the website in the scr attribute on your website(kinda like enbedded someone else’s website on yours). The default size for&lt;iframe&gt; is tiny, we can change its dimensions by passing in width &amp;height attributes similar to before. One of the biggest problem for iframe is that many big websites(amazon.com etc) have settings preventing other developers to iframe their websites so don’t be too surprised if iframe is not working! 14. Meta tags1234567&lt;head&gt; &lt;meta charset = "utf-8"&gt; &lt;meta name = "description" content="Your description"&gt; &lt;meta name = "author" content = "Name of the author"&gt; &lt;meta name = "keywords" content = "HTML, Blog, what not"&gt; &lt;meta name = "viewport" content ="width=device-width, initial-scale=1.0"&gt;&lt;/head&gt; &lt;meta&gt;tags are in the &lt;head&gt; . They define some key information of your web page. charset defines how your words are encoded. For the other&lt;meta&gt; tags, there are two attributes, the name will tell html what types of meta tags you are defining and content is actually the content inside your meta tags. description gives a short description of your website to help search engines. Normally less than 160 characters. If too long, your website can be disadvantaged in terms of priority in search engine author tells the author of the web page keywords set several keywords to help search engines, are normally ignored these days but still a good practice to fill in. viewport how your website is displayed on different devices like pc, mobile, ipad etc. It can get really complicated, for now just keep in mind using the following statement: content =&quot;width=device-width, initial-scale=1.0&quot; before you become an experienced developer. EndThanks for reading. These notes are abstract from the HTML tutorial videos created by Mike Dane(Giraffe academy). I want to express my thanks to Mike. Awesome videos as always. Make sure to check out his website, contents are absolutely amazing.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python revision notes]]></title>
    <url>%2Fpython_revision%2F</url>
    <content type="text"><![CDATA[Switch data in two variables: a,b = b,a This is something unique to Python. print(variable, end = &quot;&quot;) If we don’t want to skip a line after printing variable. The default value for end attribute is \n(skip a line). When we use comparison operators in Python(&gt;, &lt; etc.). It will always return a Boolean value(True, False) print(1==True);print(0==False) These two statements will always return True. As in Python 1 also means True and 0 also means False. print(0==0.0) will also return True even though they are different data types. There is a special operation symbol which is in. For example, print(“a” in “abc”). This will return True. 3 types of logic order in Python: plain sequence(顺序), loop(循环) and branches(分支). while True will produce an infinite loop. break will terminate one layer of the loop. continue will only skip one element in a loop and don’t affect the remainder elements. range function can take 3 parameters. For example, range(1,10,2) This means a series from 1 to 9 with a step of 2. i.e.1,3,5,7,9 list1.pop(index) removes the element at the index position of the list. If we use list1.pop() and leave it black in brackets. It will drop the last element in the list. print(&quot;111&quot; in list1) If there is a 111 element in list1. It will return True, otherwise, it will return False. If we want to drop a list, use del list1. If we print(list1) afterwards, it will return an error. If we want to drop all elements in a list, use list1.clear(). If we print(list1) afterwards, it will return [] list1.index(element,start,end) passing in start and end, Python will search element within that range. If element isn’t in the range, an error will show up. We could use list1.find(element,start,end). If element is also not in that range, Python will return -1 rather than an error. There are two types of functions in Python. The first type .sort(), for example, it starts with a . It means that this function links to the data type before . The second type sorted(), for example, all these types of function are Python’s internal function, they do not related to the input data type. Enumerate() function： 123list1 = [“spring”,”summer”,”autumn”,”winter”]for index, content in enumerate(list1):print(index,content) This will return: 0 &quot;spring&quot; 1 &quot;summer&quot; 2 &quot;autumn&quot; 3 &quot;winter&quot; This function are fairly convenient when tackling algorithm questions. Create a list with ten 0 elements : list1 = [0]*10 This is unique to Python as well Create a 3*3 matrix filled with 0: 1234list1 = []for i in range 3: list1.append([0]*3) List comprehension(列表推导)： numerical: 12list1 = [1,2,3]print([i*3 for i in list1]) This will return [3,6,9] Logical: 12list1 = [1,2,3,4,5]print([i for i in list1 if i%2 == 0]) This will only print out even numbers so we get [2,4] as expected Mixing numerical and logical 12list1 = [1,2,3,4,5]print([i*2 for i in list1 if i%2 == 0]) This will return even numbers in the list and multiply their values by 2 so we got [4,8] as expected. Elements within dictionary have no order in Python. All keys need to be unique, if we have two values with the same key, the value which shows up later will overwrite the former. dictionary.keys() will collect all keys and return a list. dictionary.values() will collect all values and return a list. dictionary.items() This will collect both keys and values made up tuples in a list. We normally use it in the following format: 123dictionary = &#123;1:"one",2:"two",3:"three",4:"four"&#125;for i,j in dictionary.items(): print(i,j) This will return: 1, &quot;one&quot;, 2, &quot;two&quot;, 3, &quot;three&quot;, 4, &quot;four&quot; Drop an element from a dictionary: dictionary.pop(key) The value with the key in the bracket will be removed .append() has a low algorithm complexity while .insert() and .index() have high algorithm complexity List slicing: 12list1 = [‘aaa’, ‘bbb’, ‘ccc’, ‘ddd’, ‘eee’]print(list1[1:3]) This will give &quot;bbb&quot; &amp; &quot;ccc&quot; 12list1 = [‘aaa’, ‘bbb’, ‘ccc’, ‘ddd’, ‘eee’]print(list1[1:]) This will give &quot;bbb&quot;, &quot;ccc&quot;, &quot;ddd&quot; &amp; &quot;eee&quot; 12list1 = [‘aaa’, ‘bbb’, ‘ccc’, ‘ddd’, ‘eee’]print(list1[:3]) This will give &quot;aaa&quot;, &quot;bbb&quot; &amp; &quot;ccc&quot; 123list1 = [‘aaa’, ‘bbb’, ‘ccc’, ‘ddd’, ‘eee’]print(list1[:-1])print(list1[:4]) Results returned from the two print operations are the same which will both give &quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot; &amp; &quot;ddd&quot; We may pass in three parameters when slicing. list1[start,end,step] A good and smart example: print(list1[::-1]) This operation will reverse the list and is equivalent to .reverse(). Let me quickly explain: The first : means starting from the end(right), -1 means moving to the left by one element every time. The second : means finishing at the end but won’t include the last element. 12list2 = [0,1,2,3,4,5,6,7,8,9,10]print(list2[0:len(list2):2] This will give all even numbers: &quot;0&quot;, &quot;2&quot;, &quot;4&quot;, &quot;6&quot;, &quot;8&quot; &amp; &quot;10&quot; When we input a negative step parameter, we must make sure the value of start parameter is greater than end parameter otherwise Python will return a []. Let’s say list2[-9:-6:-1], Python will take away 1 from -9 every time and try to achieve -6. Clearly, there is no way to get -6 by taking away 1s from -9 so we get []. In addition, Python don’t think list2[-1] is equivalent to list2[-12] :( set(集合): if we write {} in Python, by default, it will be treated as a dictionary. Elements in a set has no order, the order of the elements changed every time we print. Unless, all elements are int, they will be shown in descending order but we still can’t do index operation. set1.add() Add an extra element. set1.remove(element name) Remove an element by the element name. set1.pop() Remove the FIRST element from the set, we CANNOT pass in a index in the bracket. set operations： 1234set1 = &#123;1,2,3&#125;set2 = &#123;2,3,4&#125;set3 = &#123;1,2,3,4&#125;print(set1-set2) This will give the difference set(差集). In other words, all elements within set1 but are not in set2. We get 1 here as expected. 1234set1 = &#123;1,2,3&#125;set2 = &#123;2,3,4&#125;set3 = &#123;1,2,3,4&#125;print(set1|set2) This will give the union(合集). We get 1, 2, 3 &amp; 4 here as expected. 1234set1 = &#123;1,2,3&#125;set2 = &#123;2,3,4&#125;set3 = &#123;1,2,3,4&#125;print(set1^set2) This will give the complementary set(补集). We get 1 &amp; 4 here as expected. 1234set1 = &#123;1,2,3&#125;set2 = &#123;2,3,4&#125;set3 = &#123;1,2,3,4&#125;print(set1&amp;set2) This will give the intersection set(交集). We get 2 &amp; 3 here as expected. 1234set1 = &#123;1,2,3&#125;set2 = &#123;2,3,4&#125;set3 = &#123;1,2,3,4&#125;print(set1&lt;set2) If set1 is a subset(子集) of set2, we will get True , otherwise we will get False. we get False here as expected. 1234set1 = &#123;1,2,3&#125;set2 = &#123;2,3,4&#125;set3 = &#123;1,2,3,4&#125;print(set1&lt;set3) We get a True here as expected. Use set1.update(set2) to add all elements in set2 into set1. We could give variables in a function default values when defining:def fun(a=3,b): We can either pass in one variable or two variables when calling the function. Criteria: variables with default values must be placed in front of variables without default values. See the example below: 123def trial(a,b,c): print(f"&#123;a&#125;;&#123;b&#125;;&#123;c&#125;")trial(b=2,a=1,c=3) It is a good practice to passing in values of variables using this method as ORDER is not important in the above case. If we want to pass in multiple values for a parameter, we could add a * before the variable name. See the example below: 1234def trial(*args): for i in args: print(i)trial(1,2,"Oscar",[1,2,3]) It is equivalent to passing in a tuple(1,2,&quot;Oscar&quot;,[1,2,3]) to args. If we want the values we passed in for a parameter to be treated as a dictionary, we could add a ** before the variable name. See the example below: 12345def trial(**kwargs): for i,j in kwargs.items(): print(i) print(j)trial(name = "oscar", age = 19, gender = "M") This is equivalently to passing {&quot;name&quot;:&quot;oscar&quot;,&quot;age&quot;:19,&quot;gender&quot;:&quot;M&quot;} to kwargs. 12345def fun(): result = "Hello world" return resultprint(type(fun))print(type(fun())) For type(fun), Python will return &lt;class &#39;function&#39;&gt;. This is because we are printing out the type of the function and of course the answer will be function. In terms of type(fun()), we are calling the function and we are actually printing out the type of the returned value i.e. type of result variable. That’s why we get &lt;class &#39;str&#39;&gt; Decorator(装饰器): add some codes to a function without changing the source code of the function. There multiple ways of achieving this. Define a new function and call the old function inside the new function 12345def greet_user(): print("Hello")def re_greet_user(): greet_user() print("world!") Define a new function and pass in the old function as a parameter 12345def greet_user(): print("Hello")def re_greet_user(func): func() print("world") We need to be crystal clear that we are passing in the old function as a parameter so there is no bracket. The function is called inside the new function. Define an inner function inside the new function so the user has a feeling we are still using greet_user which is the old function. 1234567891011121314def greet_user(): print("Hello") #define the old function def decorate_show(func): def inner(): func() print("world") #define the inner function that will print "Hello world" return inner #The decorate_show function will return the inner funciton. greet_user = decorate_show(greet_user) #call decorate_show#greet_user variable is now equal to the inner with old greet_user as func.greet_user() #Call the new greet_user If we need parameters for func(), make sure to pass it in at def inner(A,B):. This is basically the theory behind the decorator The final version, it is actually using the same theory as the third method but looks nicer. 123456789def decorate_show(func): def inner(): func() print("world") return inner@decorate_showdef great_user(): print("Hello") We simply put @decorate_function_name at the line above the function we wish to decorate. To make it easier to read, we can simply replace func() by great_user(). This is really significant as we haven’t touched the source code of the original function. Besides, we can add extra codes dynamically, no need to write everything at the start. If we want to ignore escape characters(转义字符), we can put r before the &quot; of a string. See the example: print(r”Hello\nworld”) These characters will be print out directly, no new line will be created. str1.lower() convert every character in a string to the lower case. str1.upper() convert every character in a string to the upper case. str1.title() convert the initial character of EVERY WORD in a string to the upper case. str1.capitalize() convert the initial character of the FIRST WORD in a string to the upper case. print(str1.center(20, “*”)) This means put str1 in the middle. If its length is shorter than 20 characters, * will be used to fill the remainder. Similarly, we have str1.ljust(20, “*”) and str1.rjust(20, “*”). The difference is where str1 will be placed(left, right or middle) in the new string. str1.count(sub,start,end) give how many times sub appears in str1 within the start, end range. By leave start and end parameters away, Python will search the whole string. str1.index(sub,start,end) search from the left and return the position where sub first time appears within the start, end range. If sub isn’t found, an error will appear. str1.rindex(object,start,end) Do the very similar but start searching from the right. str1.endswith(“xxx”) return True if str1 ends with “xxx”, otherwise False. str1.startswith(“xxx”) return True if str1 starts with “xxx”, otherwise False. str1.isalpha() return True if every character in str1 in a letter, otherwise False. It is a powerful tool for filtration when using with the for loop. See the example below. 1234str1 = "a1b2c3d4"for i in str1: if i.isalpha() == True: print(i, end = "") Similarly, we have str1.isdigit(). It will return True, if every character in str1 in a number, otherwise False. str1.isspace() return True if every character in str1 is a space, otherwise False. May also be used for filtration. str1.strip() If str1 starts with a space, that space will be removed. str1.lstrip() If str1 ends up with a space, that space will be removed. str1.replace(old,new,times) If the old string appears in str1, it will be replaced by new. By default, this operation will keep going until no old string is in str1 any more. We may limit the times this operation is called, by passing in a times parameter. str1.split(&quot;a&quot;) str1 will be separated into two pieces every time there is &quot;a&quot;. See the example, 12str1 = "bbbacccadddaeee"print(str1.split("a")) This will return [bbb,ccc,ddd,eee] str1.splitlines() str1 will be separated into two pieces every time there is &quot;\n&quot;. list1.join() Every element inside list1 will be attached together and make up a string If we have a list of values and we want to find its mean, we can use the statistics package. 12from statistics import meanprint(mean([1,2,5,7,9,8])) We can also find median(中位数), mode(众数) and variance(方差) exact the same way just by replacing mean in the statements above. If another file2.py file is in the same folder as the file1.py we are currently running. We can use import file2 to import it directly. If not we can use either the absolute address or the relative address. print(dir(variable_name)) We can print out all functions that may be applied to this variable(data type) If we do print(dir(package_name)), we can print out all functions that are inside that package. pip list show all packages that we have installed pip install install a package ​ pip uninstall uninstall a package print(os.getcwd()) give the absolute address of the file we are currently running. os.makedirs(“folder name”) Create a new folder, will return an error if already exists. os.removedirs(“Folder name”) Remove an empty folder, will report an error if there is any content inside. print(os.listdir()) Print all documents in the current folder. os.remove(“filename”) Remove a file os.chdir(“address”) It is just like the cd operation in the cmd os.curdir() return to the folder where current .py file is located. If we .read(), .readlines() or .readline() a file in a+ and w+ mode, nothing will be returned. This is because w+ will clear the file by default before the read operation. a+ will move the cursor to the end of the text to get ready for the appending operation. A way to fix it is by using file.seek(0,0) to move the cursor back to the start of the file. Another method to open a file so we don’t need to close it 12with open(“filename”, “r”, encoding = ) as file: content = file.read() Combining two list1 into a dictionary: dict(zip(list_keys,list_values))]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql basics]]></title>
    <url>%2FMysql_basics%2F</url>
    <content type="text"><![CDATA[Database(DB): Any collection of related information that can be stored in different ways. Database management system(DBMS): software used to manage data in the database. C.R.U.D: Create Read Update Delete Relational databases(SQL): organize data onto one or more tables similar to Excel. Non-relational databases(no SQL): Everything but not SQL like JSON,XML etc. SQL(Structured Query Language): standard language interacts with DBMS to perform C.R.U.D operations. Database queries: requests made to the DBMS for specific information, in other words, asks the database for specific pieces of information There is always a primary key to a table, each row has its own primary key. A row may also have a foreign key which leads to a primary key to a different table. This foreign key will help us link with other tables. A certain row may have multiple foreign keys. A foreign key may also lead to a different row in the same table Composite key: a key made up of multiple columns i.e. multiple attributes. We need composite keys because sometimes one column can’t define a primary key without repeating so we need multiple columns as the key. SQL language is the compound of a series of languages as followed: Data Query Language(DQL), Data Definition Language(DDL), Data Control Language(DCL) and Data Manipulation Language(DML) Queries: a set of instructions given to DBMS to obtain the information you want to retrieve. Data type: INT: integer; DECIMAL(M,N): M means the total number of significant digits; N means the number of digits you want to keep after the decimal place; VARCHAR(L): L means the length of the string; BLOB: binary a large object, a structure can store large amount of binary data; DATE: YYYY-MM-DD; TIMESTAMP: YYYY-MM-DD HH-MM-SS normally used to record time People normally write reserved words in SQL in capital letters such as CREATE TABLE Create columns: 123456CREATE TABLE student(student_id INT,name VARCHAR(20),major VARCHAR(20),PRIMARY KEY(student_id)); CREATE TABLE: reserved words student: table name student_id, name, major: column name INT,VARCHAR(): datatype PRIMARY KEY(): reserved words, put the column name inside brackets. Make sure to end the line with ; DESCRIBE student; This command will give some basic information about the table. We can modify the structure of the table after created. DROP TABLE student; Delete the whole table student ALTER TABLE student ADD gpa DECIMAL(3,2); Add an extra column ALTER TABLE student DROP COLUMN gpa; Remove a column from the list name VARCHAR(20) NOT NULL When creating a table we may put NOT NULL after the column name so data in this column can’t be NULL. Similarly, we could also put UNIQUE, which means that all data must be unique in that table The primary key must be both NOT NULL and UNIQUE. major VARCHAR(20) DEFAULT &#39;undecided&#39; We could set a default value to certain columns We could also set the value to be AUTO_INCREMENT, which may be quite useful for the primary key, simply do student_id INT AUTO_INCREMENT. Inserting data: 1INSERT INTO student VALUES(1,&quot;Jack&quot;,&quot;Biology&quot;); INSERT: reserved word to put data into the table INTO: reserved word student: table name VALUES(): reserved word, there are three parameters in the bracket. One for each column. We may put NULL in the bracket and it is equivalent to not being filled. SELECT * FROM student This command will print out all data from the table. INSERT INTO student(student_id, name) VALUES(2,&quot;Kate&quot;); If we only want to fill in data in two columns rather than all three. We could put a bracket after table name and fill in column names that we wish to fill and leaving the unfilled ones NULL. Unless DEFAULT, AUTO_INCREMENT etc. are used. &lt;&gt; means not equal in MySQL. Update data: 123UPDATE studentSET major = &quot;Bio&quot;WHERE major = &quot;Biology&quot;; UPDATE: reserved word for changing data SET: reserved word for setting new data WHERE: reserved word to filter the part of data we want to change Similarly, lines below will set gpa to be 4.0 at the row with student_id = 1 123UPDATE studentSET gpa = 4.0WHERE student_id = 1; For the WHERE command, we can make it more complex by using OR, AND etc statements. We can also change multiple columns in one line using SET. See below. 123UPDATE studentSET gpa = 4.0, name = &apos;Oscar&apos;WHERE student_id = 1; Delete data: 12DELETE FROM studentWHERE name = &quot;Tom&quot; AND major = &quot;undecided&quot; The operation above will delete a certain row according to the WHERE condition. Without WHERE, all rows will be deleted. Basic query: SELECT * FROM student; We already know the query above will give us all the data in the table. SELECT: reserved word, tell SQL we want to get some information from the database. We can get data from certain column(s) by filling its name after SELECT, see below. 1SELECT student_name, student_subject FROM student; The line below is equivalent to the line above, using student.student_id &amp; student.student_subject but make your language more precise. 1SELECT student.student_name,student.student_subject FROM student; We may also order the data obtained simply using reserved word ORDER BY + column name. By default it is ascending, we can make it descending by adding DESC after the column name. 123SELECT student.name, student.majorFROM studentORDER BY name; We could also fill multiple column names after ORDER BY. In the case below, if major is the same, student_id will be used for ranking. 123SELECT *FROM studentORDER BY major, student_id; If we only want a certain number of results, we can add an extra line LIMIT 2 so we will only get the top 2 results in the list. 1234SELECT *FROM studentORDER BY major, student_idLIMIT 2; Filter operation can be done by using WHERE, similar to the operation used in the update data section. In this case, we only print out student information who is doing Biology 123SELECT *FROM studentWHERE major = &quot;Biology&quot;; If we want to add comments in MySQL use -- at the start of the line IN 123SELECT *FROM studentWHERE name IN (&quot;Claire&quot;, &quot;Kate&quot;, &quot;Mike&quot;); Another thing you can put after WHERE is IN (reserved word). Very similar to Python, which means return all data in the name column which are in the list of [Claire, Kate, Mike]. You can also connect other statements for filtration using AND, OR etc. Creating a foreign key when creating a table: 12FOREIGN KEY(column_name) REFERENCES table_name(column_name)ON DELETE SET NULL; For the column we REFERENCES to, it must be the primary key. We will always put ON DELETE SET NULL or ON DELETE CASCADE when creating a foreign key, this will make our lives a lot easier and I will explain it a bit later. Add foreign key after a table is created: 1234ALTER TABLE employeeADD FOREIGN KEY(branch_id)REFERENCES branch(branch_id)ON DELETE SET NULL; This is faily commonly used as we can’t reference foreign key to another table before the other table is created first. Don’t forget ON DELETE SET NULL Set a composite primary key: Simply use PRIMARY KEY(column1,column2)when creating a table A primary key may also be A foreign key. VERY VERY IMPORTANT!!!!! If we want to set foreign keys reference to a different form. It is very likely that the second form has not been created. If we still set foreign keys, no wonder there will be an error. What we should do is to set elements in the foreign key column to be NULL. Create the second table first, then UPDATE, SET elements in the foreign key column. It is kinda like a circular procedure. 当我们向有foreign key的表格中插入内容时 要考虑一个问题， 就是这个foreign key指向的表格的内容很可能还没有被输入 这时就会报错 我们要做的就是把这些foreign key 的值先写成NULL 待指向的表格的内容输入后 再进行UPDATE We can temporarily change the returned column names by using AS: 12SELECT fitst_name AS forename, last_name AS surnameFROM employee; Column names are forename &amp; surname now instead of first_name &amp; last_name. If we want to get rid of repeated elements in a column we can use DISTINCT. 1SELECT DISTINCT branch_id FROM employee; Internal functions: 12SELECT COUNT(emp_id)FROM employee; This COUNT function will count how many elements appeared in the emp_id column and return an INT value. If one of the element is NULL, it won’t be counted as it stands for no value. 123SELECT COUNT(emp_id)FROM employeeWHERE sex = &quot;F&quot; AND birth_date &gt; &apos;1970-01-01&apos;; Various operations can be achieved using COUNT in together with WHERE. The example above can help us find how many female employees are born after 1970-1-1. Be careful, 1970-01- 01 is another datatype: DATE. 123SELECT AVG(salary)From employeeWHERE sex = &quot;M&quot;; Another function we may use is AVG, which will return the mean of elements in the column selected. Here, we are finding the mean salary of male employees. 12SELECT SUM(salary)FROM employee; SUM function we give us the numerical sum of elements we selected from the database. Aggregation(聚合): GROUP BY is a powerful tool, we could put a column name afterwards and repeated elements in that column will be treated together as a group. 123SELECT COUNT(sex), sexFROM employeeGROUP BY sex; Here we want to find out the number of male and female employee respectively. GROUP BY is suitable here as it put all elements with sex =&quot;M&quot; together in a group and sex = &quot;F&quot; together in a different group. 123SELECT SUM(total_sales), emp_idFROM works_withGROUP BY emp_id; Similarly, we can find the sum of sales of each employee using GROUP BY Wildcard(通配符): % means any number of characters _ means one character. It is similar to regular expressions in other programming languages(正则表达式). In other words, wildcard means using % and _ to describe a general pattern to help us filter result. 123SELECT * FROM clientWHERE clien_name LIKE &quot;%LLC&quot; The example above has a new reserved word LIKE. A statement is followed by, which will describe a general pattern. Here ‘%LLC’ means there can be any number of words before &quot;LLC&quot; and the word needs to end up with &quot;LLC&quot;. If the statement is satisfied. The result will be returned, otherwise filtered.​ Another wildcard example: %Label%. This means the statement is satisfied as long as the VARCHAR contains a subsection &quot;Label&quot; Union: combine several SELECT results together(union columns together). This links two or multiple SELECT statements. 12345SELECT first_nameFROM employeeUNIONSELECT branch_nameFROM branch; Criteria: In order to successfully UNION multiple SELECT statements, each SELECT must have the same number of columns, otherwise there will be an error. We also need the datatype returned from each SELECT to be similar. If they are really different, there are likely to be an error as well. JOIN: combine rows from two or more tables based on related columns(foreign keys) 1234SELECT employee.emp_id, employee.first_name, branch.branch_nameFROM employeeJOIN branchON employee.emp_id = branch.mgr_id; The example above SELECT columns from different tables. FROM: reserved words(first table) JOIN: reserved words(second table) ON: reserved words, it tells MySQL, on what basis, rows should be joined together. In other words, if and only if employee.emp_id = branch.mgr_id, should rows from different tables join together. There is a second type called LEFT JOIN: 1234SELECT employee.emp_id, employee.first_name, branch.branch_nameFROM employeeLEFT JOIN branchON employee.emp_id = branch.mgr_id; Every row in the FROM employee table will be shown. For the branch.branch_name, it will only join to the left table if ON condition is met, otherwise, its value will be NULL. There is also an opposite type of operation, which is RIGHT JOIN. It does exactly the opposite. Each row in the RIGHT JOIN table will be shown and rows in the FROM table will join only if ON condition is met, otherwise, it will be NULL Nested enquiry: We can use result from one query to filter data in another query. See the example below. It is like cascading the result of one enquiry into the other. 123SELECT works_with.emp_idFROM works_withWHERE works_with.total_sales &gt; 30000; Here, we find out employee id of employees whose salary exceeds 30k. What we can do is to put the statements above into another query as followed 1234567SELECT employee.first_name, employee.last_nameFROM employeeWHERE employee.emp_id IN( SELECT works_with.emp_id FROM works_with WHERE works_with.total_sales &gt; 30000;); The part indented return a list ofemployee_id. WHERE filters ID that is not in the list so we only print out names of employees whose salary exceeds 30K. This is a useful method when handling data in different tables. In terms of the indent above, it is not necessary but makes readers easy to read. On Delete: how can we delete an element when it is associated with a foreign key. We already meet it before, remember when we set foreign key, we put an extra line which is ON DELETE SET NULL/ON DELETE CASCADE. That is what we are going to talk about now. ON DELETE SET NULL: means when we delete the primary key where the foreign key may lead to, this foreign key will automatically become NULL so there will be no error. ON DELETE CASCADE: will delete the entire row where the foreign key located instead of setting it to NULL. When the foreign key is also a primary key, we must use ON DELETE CASCADE because primary key can’t be NULL. Otherwise, we are free to choose between the two. EndThanks for reading. These notes are abstract from the MySQL tutorial created by Mike Dane(Giraffe academy). Tables used as the demo in the tutorial can be found here. I want to express my thanks to Mike. Awesome videos as always. Make sure to check out his website, contents are absolutely amazing.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python basics]]></title>
    <url>%2Fpython_basics%2F</url>
    <content type="text"><![CDATA[\n will create a new line in a string. print(&quot;apple\npear&quot;) string.lower() will change every character in a string to lower cases. string.upper() will change every character in a string to upper cases. len(string) will return the length of the string. string[3] will could index a string(start from zero) string.index(A) will return the position where A first time appear in the string. If A is consisted of multiple characters, it will return the position of the first character in A. If A can’t be found in the string, you will get an error string.find(A) very similar to .index(A). The difference is that if we couldn’t find A in the string, it will return -1 instead of an error. string.replace(old,new,times) The old parameter inside the string will be replaced by the new parameter. Without specify times, all old substring will be replaced by new. We may only want to replace old substring certain number of times, simply fill in the times parameter. * means multiply in Python. ** means exponential. We can also use pow(A,B) which stands for A to the power of B. % will return the remainder of the division. 1// means division and round down the answer. Remainder: print(5//2) will return 2 while print(-5//2) will return -3. type(A) will return the data type of A. max(A,B,C) will return the greatest numerical value in A,B,C. min(A,B,C) does exactly the opposite. round(A) will help us rounding A. i.e. 5.4 becomes 5 and 4.7 becomes 5. list1[0] A list can be indexed. [-1] will return the last element in the list, [-2] will return the second last element etc. [1:] will give all elements include and after position 1. [1:3] will return elements at position 1 &amp; 2 but won’t include 3(左闭右开). list1[1] = new_value We can re-define an element value inside a list using this method. name = [&quot;Oscar&quot;, &quot;Jack&quot; , &quot;Michael&quot;] number = [3,5,6,7] . If we want to combine these two lists, we could use name.append(number). This will return [&quot;Oscar&quot;, &quot;Jack&quot; , &quot;Michael&quot;,[3,5,6,7]]. In other words, adding a list into a list. We can also do name.extend(number). This will return [&quot;Oscar&quot;, &quot;Jack&quot; , &quot;Michael&quot;,3,5,6,7] 18 . Adding an element to a certain position in a list, we could use list1.insert(A,B). This means we want to put B(element) at position A. list1.remove(A) remove A(element) from the list. list1.pop() remove the last element from the list. list1.count(A) count how many times A(element) appears in a list. list1.sort() sort the list in default ascending order(numerical,alphabet). If we want to sort in descending order, use list1.sort(reverse = True). list1.reverse() This will reverse the order of the list. tuple1 = (A,B,C) use a small bracket to define. Its value can’t be changed once defined. We can have a list of tuples [(1,2),(3,4),(8,9)] if statement: the condition after if must be either True or False. Further Boolean algebra can be applied: or, and, nor etc. != means not equal in python dictionary1 = {key:value} In other words, key-value pairs are used to define a dictionary There are two ways of getting values in the dictionary. result=dictionary1[key]. This method will return an error if the key doesn’t exist. result=dictionary.get(key,default_value) If the key doesn’t exist, it will return None. We may also fill in a default value(optional) which will only be returned if the key doesn’t exist. While loop will keep running until the condition afterwards becomes False. Get out of one loop: break A string can be sliced. See the example. 12for i in “Love”: print(i) This will return “l”,”o”,”v”,”e” for i in range(3) means from 1 to 3 excluding 3. i.e. 1,2 We can put lists inside a list to make it a 2D(3D) array. 123list1 = [[1,2,3], [4,5,6], [7,8,9]] We can easily slicing the array bylist1[1][2]. This means obtaining the data at row 1 and column 2. We have 6 in this case. Nasty for means: cascading for loops. Here, we can have: 123456list1 = [[1,2,3], [4,5,6], [7,8,9]]for row in list1: for column in rows: pass Know what I mean, makes the logic really clear. A really beautiful example applying for loops, successfully solve the problem without cascading for loops. Problem: replace a(A), e(E), i(I), o(O), u(U) in a word by g(G). 1234567891011def translate(phrase): translation = "" for letter in phrase: if letter.lower() in "aeiou": if letter.isupper(): translation = translation + "G" else: translation = translation + "g" else: translation = translation + letter return translation try&amp; except method 1234try: In=int(input("Fill in the answer"))except: Print("Invalid input, not an integer") Here, if the input isn’t an integer, an error will show up. By using try, except method, operations in except will run if and only if there is an error. We can also specify the type of error after expect, refer to the example below. 123456try: answer = 10 / int(input("Enter Number: "))except ZeroDivisionError as e: print(e)except: print("Caught any exception") If the input is zero, it will print out the error type in except because we only specified ZeroDivisionError. For any other types of errors, it will print out caught any exception. We can also specify other types of error such as ValueError etc. text = open(“filename.txt”, “mode”) Modes we have: “r”: read; “w”: overwrite existing file; “a”: append; “r+”: read &amp; overwrite, “a+”: read &amp; append; “b”: read the text in binary Make sure to close the file using text.close()once opened a file. To read all the content, using text.read() To read a certain line, use text.readline(). This will read the first line when we run it for the first time and read the second line when we run it for the second time etc. Also,we could use text.readlines(). This will put every line in a list, we could fetch any line using the index method. If we want to write(append) a file, make sure to change “r” into &quot;w&quot;(&quot;a&quot;) Using :text.write(“Whatever you want to add”) By creating a new class, we are actually creating a new datatype in some ways. When we use a class, we need to instantiate the class like oscar = Student(). oscar here is no longer a class instead it becomes an object. Inheritance: We can create a new class that contains all the functions and the attributes in the old class. Quick demo: class New(Old). I will write a separate note to introduce it in detail. If we want to change a float(decimal) to a fraction using the method below: 12from fractions import Fractionprint(str(Fraction(0.25))) ​ This will return &quot;1/4&quot; EndThanks for reading. These notes are abstract from the Python introduction course created by Mike Dane(Giraffe academy). I want to express my thanks to Mike. Awesome videos as always. Make sure to check out his website, contents are absolutely amazing.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
