<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Logical thinking</title>
  
  <subtitle>Keep discovering</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuxuanliu.tech/"/>
  <updated>2019-09-12T12:17:06.471Z</updated>
  <id>https://yuxuanliu.tech/</id>
  
  <author>
    <name>Yuxuan Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pandas advanced</title>
    <link href="https://yuxuanliu.tech/pandas_advanced/"/>
    <id>https://yuxuanliu.tech/pandas_advanced/</id>
    <published>2019-09-12T14:21:17.000Z</published>
    <updated>2019-09-12T12:17:06.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Handling-missing-data"><a href="#1-Handling-missing-data" class="headerlink" title="1. Handling missing data"></a>1. Handling missing data</h2><ol><li><p>Creating a dataframe with <code>NaN</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">dict1 = &#123;<span class="string">"A"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">"B"</span>:[<span class="number">1</span>,<span class="number">2</span>,np.nan],<span class="string">"C"</span>:[<span class="number">1</span>,np.nan,np.nan]&#125;</span><br><span class="line">df = pd.DataFrame(dict1)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure></li><li><p>Drop missing values:</p><ul><li><code>df = df.dropna()</code> drop rows with at least one <code>NaN</code> inside</li><li><code>df = df.dropna(axis = 1)</code> drop columns with at least one <code>NaN</code> inside</li><li><code>df = df.dropna(axis = 1,thresh = 2)</code> The column won’t be dropped if there are at least two non-<code>NaN</code> values in the column.</li></ul><a id="more"></a></li><li><p>Replace missing values:</p><ul><li><code>df = df.fillna(value=&quot;Filled in value&quot;)</code> replace every <code>NaN</code> in the dataframe with a string.</li><li><code>df[&quot;B&quot;] = df[&quot;B&quot;].fillna(value=df[&quot;B&quot;].mean())</code> a very common operation in Pandas, replace <code>NaN</code> with the mean of other values within that column. There are many other Math or Statistical methods you may use to determine values for missing data.</li></ul></li></ol><h2 id="2-Group-by-method"><a href="#2-Group-by-method" class="headerlink" title="2. Group by method"></a>2. Group by method</h2><ol><li><p>It allows you to group together rows based on values in a column and perform an aggregate function(sum, average, std……) on them. See the example below.</p><table><thead><tr><th>ID</th><th>Value</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>1</td><td>110</td></tr><tr><td>1</td><td>120</td></tr><tr><td>2</td><td>130</td></tr><tr><td>2</td><td>140</td></tr><tr><td>2</td><td>150</td></tr><tr><td>3</td><td>160</td></tr><tr><td>3</td><td>170</td></tr><tr><td>3</td><td>180</td></tr></tbody></table><p>We can change it into:</p><table><thead><tr><th>ID</th><th>Value</th></tr></thead><tbody><tr><td>1</td><td>330</td></tr><tr><td>2</td><td>420</td></tr><tr><td>3</td><td>510</td></tr></tbody></table></li><li><p>Creating the dataframe:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;<span class="string">'Company'</span>:[<span class="string">'GOOG'</span>,<span class="string">'GOOG'</span>,<span class="string">'MSFT'</span>,<span class="string">'MSFT'</span>,<span class="string">'FB'</span>,<span class="string">'FB'</span>],</span><br><span class="line">       <span class="string">'Person'</span>:[<span class="string">'Sam'</span>,<span class="string">'Charlie'</span>,<span class="string">'Amy'</span>,<span class="string">'Vanessa'</span>,<span class="string">'Carl'</span>,<span class="string">'Sarah'</span>],</span><br><span class="line">       <span class="string">'Sales'</span>:[<span class="number">200</span>,<span class="number">120</span>,<span class="number">340</span>,<span class="number">124</span>,<span class="number">243</span>,<span class="number">350</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br></pre></td></tr></table></figure></li><li><p>Perform aggregate functions:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">by_company = df.groupby(<span class="string">"Company"</span>)</span><br><span class="line"><span class="comment">#by_company is not a dataframe but an object</span></span><br><span class="line">print(by_Comp.mean())</span><br><span class="line">print(by_Comp.std())</span><br><span class="line">print(by_Comp.sum())</span><br><span class="line">print(by_Comp.count())</span><br><span class="line">print(by_Comp.max())</span><br><span class="line">print(by_Comp.min())</span><br><span class="line">print(by_Comp.count())</span><br><span class="line">print(by_Comp.describe())</span><br><span class="line">print(df.groupby(<span class="string">'Company'</span>).sum().loc[<span class="string">'GOOG'</span>])</span><br></pre></td></tr></table></figure></li></ol><ul><li>A dataframe is returned after performing the aggregate function, so we can perform all dataframe operations on it such as the last line of the code</li><li><code>print(by_Comp.describe())</code> a super powerful aggregate function. It is the sum of all other aggregated functions listed above.</li></ul><h2 id="3-Merging-joining-and-concatenating"><a href="#3-Merging-joining-and-concatenating" class="headerlink" title="3. Merging, joining and concatenating"></a>3. Merging, joining and concatenating</h2><ol><li><p>Creating dataframes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># Concatenating</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>],</span><br><span class="line">                        <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>],</span><br><span class="line">                        <span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</span><br><span class="line">                        <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]&#125;,</span><br><span class="line">                        index=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="string">'A4'</span>, <span class="string">'A5'</span>, <span class="string">'A6'</span>, <span class="string">'A7'</span>],</span><br><span class="line">                        <span class="string">'B'</span>: [<span class="string">'B4'</span>, <span class="string">'B5'</span>, <span class="string">'B6'</span>, <span class="string">'B7'</span>],</span><br><span class="line">                        <span class="string">'C'</span>: [<span class="string">'C4'</span>, <span class="string">'C5'</span>, <span class="string">'C6'</span>, <span class="string">'C7'</span>],</span><br><span class="line">                        <span class="string">'D'</span>: [<span class="string">'D4'</span>, <span class="string">'D5'</span>, <span class="string">'D6'</span>, <span class="string">'D7'</span>]&#125;,</span><br><span class="line">                         index=[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]) </span><br><span class="line"></span><br><span class="line">df3 = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="string">'A8'</span>, <span class="string">'A9'</span>, <span class="string">'A10'</span>, <span class="string">'A11'</span>],</span><br><span class="line">                        <span class="string">'B'</span>: [<span class="string">'B8'</span>, <span class="string">'B9'</span>, <span class="string">'B10'</span>, <span class="string">'B11'</span>],</span><br><span class="line">                        <span class="string">'C'</span>: [<span class="string">'C8'</span>, <span class="string">'C9'</span>, <span class="string">'C10'</span>, <span class="string">'C11'</span>],</span><br><span class="line">                        <span class="string">'D'</span>: [<span class="string">'D8'</span>, <span class="string">'D9'</span>, <span class="string">'D10'</span>, <span class="string">'D11'</span>]&#125;,</span><br><span class="line">                        index=[<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>])</span><br><span class="line"><span class="comment">#Merging</span></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>],</span><br><span class="line">                     <span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>],</span><br><span class="line">                     <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>]&#125;)</span><br><span class="line">   </span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>],</span><br><span class="line">                          <span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</span><br><span class="line">                          <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]&#125;)   </span><br><span class="line"><span class="comment">#Joining</span></span><br><span class="line">left1 = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>],</span><br><span class="line">                     <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>]&#125;,</span><br><span class="line">                      index=[<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>]) </span><br><span class="line"></span><br><span class="line">right1 = pd.DataFrame(&#123;<span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</span><br><span class="line">                    <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]&#125;,</span><br><span class="line">                      index=[<span class="string">'K0'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>])</span><br></pre></td></tr></table></figure></li><li><p>Concatenating: simply glues multiple dataframes together. Leaving the missing data <code>NaN</code>, no need to set a column as the key.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(pd.concat([df1,df2,df3],axis = <span class="number">0</span>))</span><br><span class="line">print(pd.concat([df1,df2,df3],axis = <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>When <code>axis = 0</code>, sticking rows together</p><p>when <code>axis = 1</code>, sticking columns together</p></li><li><p>Merging: combine dataframes together by using a column(s) <strong>other than</strong> the index column as the key.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(pd.merge(left,right,on = <span class="string">"key"</span>,how = <span class="string">'inner'</span>))</span><br><span class="line">print(pd.merge(left,right,on = <span class="string">"key"</span>,how = <span class="string">'outer'</span>))</span><br><span class="line">print(pd.merge(left,right,on = <span class="string">"key"</span>,how = <span class="string">'left'</span>))</span><br><span class="line">print(pd.merge(left,right,on = <span class="string">"key"</span>,how = <span class="string">'right'</span>))</span><br></pre></td></tr></table></figure><ul><li>inner: only keep rows which contain keys that appear in both dataframes(intersection; 交集)</li><li>outer: keep all rows even though keys may only appear in one dataframes(union set; 并集)</li><li>left: keep every row in the left dataframe and remove rows in the right dataframe whose keys can not be found in the left dataframe(left join in SQL)</li><li>right: keep every row in the right dataframe and remove rows in the left dataframe whose keys can not be found in the right dataframe(right join in SQL)</li></ul></li><li><p>Joining: very similar to the <strong>merging</strong> method but the <strong>index column</strong> is used as the key.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(left1.join(right1, how = <span class="string">"inner"</span>))</span><br><span class="line">print(left1.join(right1, how = <span class="string">"outer"</span>))</span><br><span class="line">print(left1.join(right1, how = <span class="string">"left"</span>))</span><br><span class="line">print(left1.join(right1, how = <span class="string">"right"</span>))</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-Further-pandas-operations"><a href="#4-Further-pandas-operations" class="headerlink" title="4. Further pandas operations"></a>4. Further pandas operations</h2><ol><li><ul><li><p><code>df[&quot;column_name&quot;].unique()</code> return unique values in a column</p></li><li><p><code>df[&quot;column_name&quot;].nunique()</code> return the number of unique values in a column</p><p><code>len(df[&quot;column_name&quot;])</code> does the same</p></li><li><p><code>df[&quot;column_name&quot;].unique_counts()</code> return how many times each unique value appears </p></li></ul></li><li><p><code>.apply()</code>:</p><ul><li><p>There are already many built in functions in pandas such as <code>.sum()</code> We can use <code>.apply()</code> to call customized functions or Python built-in functions to the dataframe(series). </p></li><li><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">by_two</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (value*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'col1'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="string">'col2'</span>:[<span class="number">444</span>,<span class="number">555</span>,<span class="number">666</span>,<span class="number">444</span>]&#125;)</span><br><span class="line">print(df.apply(by_two))</span><br><span class="line"></span><br><span class="line">df = df[<span class="string">'col2'</span>].apply(<span class="keyword">lambda</span> x: x*<span class="number">2</span>)</span><br><span class="line">df = df.apply(str)</span><br><span class="line">print(df.apply(len))</span><br></pre></td></tr></table></figure><p>Make sure to understand the codes above.</p></li></ul></li><li><p><code>df.isnull()</code> returns a dataframe with Boolean value. <code>True</code> if the value is <code>NaN</code>, <code>False</code> otherwise.</p></li><li><p>Pivot table(数据透视表): an advanced Excel technique, not often used. See the example below.</p><ul><li><p>Creating the dataframe:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'A'</span>:[<span class="string">'foo'</span>,<span class="string">'foo'</span>,<span class="string">'foo'</span>,<span class="string">'bar'</span>,<span class="string">'bar'</span>,<span class="string">'bar'</span>],</span><br><span class="line">     <span class="string">'B'</span>:[<span class="string">'one'</span>,<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'two'</span>,<span class="string">'one'</span>,<span class="string">'one'</span>],</span><br><span class="line">       <span class="string">'C'</span>:[<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>],</span><br><span class="line">       <span class="string">'D'</span>:[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>A</th><th>B</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>0</td><td>foo</td><td>one</td><td>x</td><td>1</td></tr><tr><td>1</td><td>foo</td><td>one</td><td>y</td><td>3</td></tr><tr><td>2</td><td>foo</td><td>two</td><td>x</td><td>2</td></tr><tr><td>3</td><td>bar</td><td>two</td><td>y</td><td>5</td></tr><tr><td>4</td><td>bar</td><td>one</td><td>x</td><td>4</td></tr><tr><td>5</td><td>bar</td><td>one</td><td>y</td><td>1</td></tr></tbody></table></li><li><p><code>df.pivot_table(values=&#39;D&#39;,index=[&#39;A&#39;, &#39;B&#39;],columns=[&#39;C&#39;])</code></p><p>It mainly takes three arguments, we can specify which column we want it to become values, index or columns names</p></li><li><p>Pivot table:</p><table><thead><tr><th></th><th>C</th><th>X</th><th>Y</th></tr></thead><tbody><tr><td>A</td><td>B</td><td></td><td></td></tr><tr><td></td><td>one</td><td>4.0</td><td>1.0</td></tr><tr><td>bar</td><td></td><td></td><td></td></tr><tr><td></td><td>two</td><td>NaN</td><td>5.0</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td>one</td><td>1.0</td><td>3.0</td></tr><tr><td>foo</td><td></td><td></td><td></td></tr><tr><td></td><td>two</td><td>2.0</td><td>NaN</td></tr></tbody></table></li><li><p>We have a compound index which are <code>A</code> and <code>B</code></p></li><li><p>We have column names which are in <code>C</code></p></li><li><p>Values are allocated according to index and columns</p></li></ul></li></ol><h2 id="5-Data-input-amp-output"><a href="#5-Data-input-amp-output" class="headerlink" title="5. Data input &amp; output"></a>5. Data input &amp; output</h2><ol><li><p>Main data input:</p><ul><li>csv</li><li>pandas data reader</li><li>Excel</li><li>HTML</li><li>SQL</li></ul></li><li><p><strong>CSV</strong> stands for Comma Separated Values.</p></li><li><p>CSV:</p><ul><li><p><code>df=pd.read_csv(&quot;filename.csv&quot;)</code> read data from a .csv file       </p></li><li><p><code>df.to_csv(&quot;filename.csv&quot;,index = False)</code> convert a dataframe to csv</p><p>We normally put <code>index = False</code>, otherwise there will be two columns of index when we <code>.read_csv()</code> again</p></li></ul></li><li><p>Excel:</p><ul><li><p><code>df=pd.read_excel(&quot;filename.xlsx&quot;,sheetname = &quot;Name_of_the_sheet&quot;)</code></p><p>Don’t forget to specify the sheet name. If there are formulae or images in the Excel file, pandas is very likely to crash.</p></li><li><p><code>df.to_excel(&quot;new_filename.xlsx&quot;,sheet_name = &quot;New_sheet&quot;)</code></p><p>A bit wired as the attribute name is <code>sheet_name</code></p></li></ul></li><li><p>HTML:</p><ul><li><p>A number of packages need to be installed for reading data from HTML</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br><span class="line">pip install html5lib</span><br><span class="line">pip install BeautifulSoup4</span><br></pre></td></tr></table></figure><ul><li><p>data = <code>pd.read_html(&quot;link_of_the_data&quot;)</code> read data between <code>&lt;table&gt; &lt;/table&gt;</code></p><p>This returns a Python list with tables as elements inside. Use <code>data[0]</code> to access them.</p></li><li><p>Data obtained from HTML may get messy. Some operations are needed to tidy up.</p></li><li><p><code>df.to_html(&quot;filename.html&quot;)</code> convert a dataframe to HTML.</p></li></ul></li></ul></li><li><p>SQL database: use external packages such as <strong>Pymysql</strong> to read data from SQL database.</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Handling-missing-data&quot;&gt;&lt;a href=&quot;#1-Handling-missing-data&quot; class=&quot;headerlink&quot; title=&quot;1. Handling missing data&quot;&gt;&lt;/a&gt;1. Handling missing data&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Creating a dataframe with &lt;code&gt;NaN&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict1 = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;:[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;string&quot;&gt;&quot;B&quot;&lt;/span&gt;:[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,np.nan],&lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;:[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,np.nan,np.nan]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df = pd.DataFrame(dict1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(df)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Drop missing values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df = df.dropna()&lt;/code&gt; drop rows with at least one &lt;code&gt;NaN&lt;/code&gt; inside&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df = df.dropna(axis = 1)&lt;/code&gt; drop columns with at least one &lt;code&gt;NaN&lt;/code&gt; inside&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df = df.dropna(axis = 1,thresh = 2)&lt;/code&gt; The column won’t be dropped if there are at least two non-&lt;code&gt;NaN&lt;/code&gt; values in the column.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
      <category term="Pandas" scheme="https://yuxuanliu.tech/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Pandas basics</title>
    <link href="https://yuxuanliu.tech/pandas_basics/"/>
    <id>https://yuxuanliu.tech/pandas_basics/</id>
    <published>2019-09-11T22:36:17.000Z</published>
    <updated>2019-09-12T10:25:12.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pandas-Python-data-analysis-library-basics"><a href="#Pandas-Python-data-analysis-library-basics" class="headerlink" title="Pandas(Python data analysis library) basics"></a>Pandas(Python data analysis library) basics</h2><ol><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure></li><li><p><code>pd.Series()</code> is similar to <code>np.array()</code> but we can assign series with a <strong>string</strong> or <strong>datetime</strong> index rather than just numerical index.</p><ul><li><p>Convert list, array and dictionary to a series:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">list1 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]</span><br><span class="line">array1 = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])</span><br><span class="line">dict1 = &#123;<span class="number">1</span>:<span class="number">10</span>,<span class="number">2</span>:<span class="number">20</span>,<span class="number">3</span>:<span class="number">30</span>,<span class="number">4</span>:<span class="number">40</span>&#125;</span><br><span class="line">series1 = pd.Series(list1)</span><br><span class="line">series2 = pd.Series(array1)</span><br><span class="line">series3 = pd.Series(dict1)</span><br><span class="line">print(series1)</span><br><span class="line">print(series2)</span><br><span class="line">print(series3)</span><br></pre></td></tr></table></figure><p>By default, we have ascending numerical index</p><a id="more"></a></li><li><p>Assign index to a series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">index1 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>]</span><br><span class="line">list1 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]</span><br><span class="line">array1 = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])</span><br><span class="line">dict1 = &#123;<span class="string">"a"</span>:<span class="number">10</span>,<span class="string">"b"</span>:<span class="number">20</span>,<span class="string">"c"</span>:<span class="number">30</span>,<span class="string">"d"</span>:<span class="number">40</span>&#125;</span><br><span class="line">series1 = pd.Series(list1,index1)</span><br><span class="line">series2 = pd.Series(array1,index1)</span><br><span class="line">series3 = pd.Series(dict1)</span><br><span class="line">print(series1)</span><br><span class="line">print(series2)</span><br><span class="line">print(series3)</span><br></pre></td></tr></table></figure><p>We now have a string index <code>&quot;a&quot;</code>, <code>&quot;b&quot;</code>, <code>&quot;c&quot;</code> and <code>&quot;d&quot;</code></p></li><li><p>Indexing series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">series1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="string">"USA"</span>,<span class="string">"CHINA"</span>,<span class="string">"UK"</span>,<span class="string">"IRELAND"</span>])</span><br><span class="line">series2 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="string">"USA"</span>,<span class="string">"CHINA"</span>,<span class="string">"FRANCE"</span>,<span class="string">"GERMANY"</span>])</span><br><span class="line">value = series1[<span class="string">"USA"</span>]</span><br><span class="line"><span class="comment">#value = series1.USA</span></span><br><span class="line">print(value)</span><br><span class="line">series3 = series1 + series2</span><br><span class="line">print(series3)</span><br></pre></td></tr></table></figure><p>There are two ways of indexing, see above. </p><p>Also, we can do mathematical operations between two series. Pandas will only carry out operations between values with the same index. For those index without a matching index in the other series, their value will be set to <code>NaN</code>. See below</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CHINA      <span class="number">4.0</span></span><br><span class="line">FRANCE     NaN</span><br><span class="line">GERMANY    NaN</span><br><span class="line">IRELAND    NaN</span><br><span class="line">UK         NaN</span><br><span class="line">USA        <span class="number">2.0</span></span><br></pre></td></tr></table></figure></li></ul></li><li><ul><li>The main data structure in pandas is dataframe and it is built on top of series.</li><li>We could say a dataframe is a number of series that share the same index with each other. </li><li>Each column or row in a dataframe is a series if we consider it independently.</li></ul></li><li><p>Hard code method for creating a dataframe:</p><ul><li><p>Method 1(filling each column in a dictionary):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">dic1 = &#123;<span class="string">"date"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>],</span><br><span class="line">        <span class="string">"value"</span>:[<span class="number">2</span>,<span class="number">35</span>,<span class="number">64</span>,<span class="number">53</span>,<span class="number">67</span>,<span class="number">64</span>,<span class="number">32</span>,<span class="number">66</span>,<span class="number">87</span>,<span class="number">12</span>],</span><br><span class="line">        <span class="string">"ratio"</span>:[<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.43</span>,<span class="number">0.52</span>,<span class="number">0.41</span>,<span class="number">0.87</span>,<span class="number">0.12</span>,<span class="number">0.32</span>,<span class="number">0.15</span>,<span class="number">0.76</span>]&#125;</span><br><span class="line">df = pd.DataFrame(dic1)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure></li><li><p>Method 2(filling each row in a list): </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df=pd.DataFrame([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">0.2</span>],</span><br><span class="line">                 [<span class="number">2</span>,<span class="number">35</span>,<span class="number">0.3</span>],</span><br><span class="line">                 [<span class="number">3</span>,<span class="number">64</span>,<span class="number">0.43</span>],</span><br><span class="line">                 [<span class="number">4</span>,<span class="number">53</span>,<span class="number">0.52</span>],</span><br><span class="line">                 [<span class="number">5</span>,<span class="number">67</span>,<span class="number">0.41</span>],</span><br><span class="line">                 [<span class="number">6</span>,<span class="number">64</span>,<span class="number">0.87</span>],</span><br><span class="line">                 [<span class="number">7</span>,<span class="number">32</span>,<span class="number">0.12</span>],</span><br><span class="line">                 [<span class="number">8</span>,<span class="number">66</span>,<span class="number">0.32</span>],</span><br><span class="line">                 [<span class="number">9</span>,<span class="number">87</span>,<span class="number">0.15</span>],</span><br><span class="line">                 [<span class="number">10</span>,<span class="number">12</span>,<span class="number">0.76</span>]],columns=[<span class="string">'date'</span>,<span class="string">'value'</span>,<span class="string">'ratio'</span>])</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure></li><li><p>Another example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">5</span>,<span class="number">4</span>),columns = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>],index = [<span class="string">"CHINA"</span>,<span class="string">"USA"</span>,<span class="string">"UK"</span>,<span class="string">"FRANCE"</span>,<span class="string">"GERMANY"</span>])</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Adding new columns to an existing dataframe</p><ul><li><code>df[&#39;new_column&#39;]=(df.old_1+df.old_2)</code> add a new column from existing columns.</li><li><code>df[&#39;name_of_new_column&#39;] = list_of_data</code> add a new column into the dataframe directly.</li></ul></li><li><ul><li><code>df.drop(&quot;column name&quot;,axis = 1)</code> remove a column from the dataframe</li><li><code>df.drop([&quot;row_index_1&quot;,&quot;row_index_2&quot;],axis = 0)</code> remove a row from the dataframe </li></ul></li><li><p><code>df.index</code> return values in the <strong>index</strong> column of the dataframe. </p></li><li><p><code>df.columns</code>  return <strong>all column names</strong> of the dataframe.</p></li><li><p>If in the dataframe, we have missing data, we may assign <code>np.nan</code> to it which stands for <strong>not an number</strong></p></li><li><p>Slicing columns:</p><ul><li><code>df.Name_of_column</code> return all values under a column which is a <strong>series</strong>.</li><li><code>df[&#39;Name_of_column&#39;]</code> does exactly the same. You are encouraged to use this method.</li><li><code>df = df[[&#39;Name_of_column_1&#39;,&#39;Name_of_column_2&#39;]]</code> slicing multiple columns from the dataframe </li><li>The attribute method doesn’t need <code>&quot;&quot;</code> while the index method do.</li></ul></li><li><p>Slicing rows:</p><ul><li><p><code>df.head(n)</code> return first n rows in the dataframe </p></li><li><p><code>df.tail(n)</code> return last n rows in the dataframe</p></li><li><p><code>df = df[2:5]</code> slicing the data frame i.e. row 2,3,4</p></li><li><p><code>df = df.loc[&quot;index_name&quot;,[&#39;Name_of_column_1&#39;,&#39;Name_of_column_2&#39;]]</code></p><p>Extremely useful when values inside the index columns are not numerical.</p></li><li><p><code>df = df.iloc[from_row:to_row,[Index_of_column_1,Index_of_column_2]]</code></p><p>Very similar to <code>.loc[]</code> but we can treat index values as numerical based ascending index even though index values themselves may not be numerical. We must use the index numbers of columns instead of name of columns for <code>.iloc</code>.</p></li><li><p><code>.loc</code> and <code>.iloc</code> methods are based on indexing a matrix in numpy <code>a[row_index,column_index]</code></p></li></ul></li><li><p>Example for <code>.loc</code> and <code>.iloc</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">5</span>,<span class="number">4</span>),columns = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>],index = [<span class="string">"CHINA"</span>,<span class="string">"USA"</span>,<span class="string">"UK"</span>,<span class="string">"FRANCE"</span>,<span class="string">"GERMANY"</span>])</span><br><span class="line">print(df.loc[[<span class="string">"UK"</span>,<span class="string">"FRANCE"</span>],[<span class="string">"B"</span>,<span class="string">"C"</span>]])</span><br><span class="line">print(df.iloc[<span class="number">2</span>:<span class="number">4</span>,<span class="number">1</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>These two methods both give data at column “B” and “C” from row “UK” and “FRANCE”.</p></li><li><p><code>df.loc[row_num,[“Name of the column”]] = new_value</code> modify values in the dataframe</p></li><li><p><code>df.describle()</code> will return a number of useful statistical data of the dataframe includes: count, mean, std, min, 25% percentile, 50% percentile, 75% percentile and max.</p></li><li><p><code>df = df.sort_values(Name_of_column,ascending=True)</code> sort the dataframe according to numerical values in the column specified.</p></li><li><p>Filter:</p><ul><li><p>Filter by values in a column: <code>df[df[&quot;column_name&quot;]&gt;1.0]</code> applying the <strong>conditional selection</strong> method. This means return rows in the dataframe where we have a <code>True</code>.</p></li><li><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">5</span>,<span class="number">4</span>),columns = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>],index = [<span class="string">"CHINA"</span>,<span class="string">"USA"</span>,<span class="string">"UK"</span>,<span class="string">"FRANCE"</span>,<span class="string">"GERMANY"</span>])</span><br><span class="line">print(df[df&gt;<span class="number">0.5</span>])</span><br><span class="line">print(df[df[<span class="string">"A"</span>]&gt;<span class="number">0.5</span>])</span><br></pre></td></tr></table></figure><ul><li><code>df[df&gt;0.5]</code> will return a dataframe with <code>NaN</code> for values less than 0.5. This is because <code>df&gt;0.5</code> will return a dataframe.</li><li><code>df[df[&quot;A&quot;]&gt;0.5]</code> will only return rows whose values under column A are greater than 0.5. This is because <code>df[&quot;A&quot;]&gt;0.5</code> will return a pandas series rather than a dataframe.</li></ul></li><li><p>What if we want to put in multiple conditions, we CANNOT simply do <code>df[(df[&quot;A&quot;]&gt;0.5) and  (df[&quot;B&quot;]&gt;0.3)]</code> This is because normal python <code>and</code> doesn’t support pandas series. We need to use <code>&amp;</code> for <code>and</code> operator, <code>|</code> for <code>or</code> operator. See the example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">5</span>,<span class="number">4</span>),columns = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>],index = [<span class="string">"CHINA"</span>,<span class="string">"USA"</span>,<span class="string">"UK"</span>,<span class="string">"FRANCE"</span>,<span class="string">"GERMANY"</span>])</span><br><span class="line">print(df[(df[<span class="string">"A"</span>]&gt;<span class="number">0.5</span>) &amp; (df[<span class="string">"B"</span>]&gt;<span class="number">0.3</span>)])</span><br><span class="line">print(df[(df[<span class="string">"A"</span>]&gt;<span class="number">0.5</span>) | (df[<span class="string">"B"</span>]&gt;<span class="number">0.3</span>)])</span><br></pre></td></tr></table></figure></li></ul></li><li><ul><li><p><code>df.rename(columns = &quot;old name&quot;: &quot;new name&quot;, inplace = True)</code> to change a column name</p></li><li><p><code>df = df.rename(columns = &quot;old name&quot;: &quot;new name&quot;)</code> do exactly the same</p></li><li><p>Change multiple column names:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_name = [<span class="string">"new_date"</span>,<span class="string">"new_value"</span>,<span class="string">"new_ratio"</span>]</span><br><span class="line">df.columns = new_name</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Treating the dataframe as an iterable object, see the example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index,row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    print(index)</span><br><span class="line">    print(row[<span class="string">"A"</span>],row[<span class="string">"B"</span>],row[<span class="string">"C"</span>],row[<span class="string">"D"</span>])</span><br></pre></td></tr></table></figure><p>In other words, <code>.iterrows()</code> function will slice each row into pandas series.</p></li><li><ul><li><code>df = df.reset_index()</code> reset customized index back to numerical ascending index, the old index column will become a new column called <code>&quot;index&quot;</code> of the dataframe. It won’t cause confusion as we need to use <code>df.index</code> for new numerical index column and <code>df[&quot;index&quot;]</code> for old index column.</li><li><code>df = df.set_index(“name_of_the_column”)</code> will automatically remove the column we select and make it become the index column. </li><li>We may use <code>df.index = df[“name_of_the_column”]</code> but we still need to remove the <code>“name_of_the_column”</code> column using <code>df.drop(&quot;name_of_the_column&quot;,axis = 1)</code> </li></ul></li><li><p>Working with compound index: indexing from the outside to inside</p><ul><li><p>Producing a dataframe with compound index</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">outside = [<span class="string">'G1'</span>,<span class="string">'G1'</span>,<span class="string">'G1'</span>,<span class="string">'G2'</span>,<span class="string">'G2'</span>,<span class="string">'G2'</span>]</span><br><span class="line">inside = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">hier_index = list(zip(outside,inside))</span><br><span class="line">hier_index = pd.MultiIndex.from_tuples(hier_index)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">2</span>),index=hier_index,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>This will produce the following dataframe with two columns of index.</p><table><thead><tr><th></th><th></th><th>A</th><th>B</th></tr></thead><tbody><tr><td></td><td>1</td><td>0.153661</td><td>0.167638</td></tr><tr><td>G1</td><td>2</td><td>-0.765930</td><td>0.962299</td></tr><tr><td></td><td>3</td><td>0.902826</td><td>-0.537909</td></tr><tr><td></td><td>1</td><td>-1.549671</td><td>0.435253</td></tr><tr><td>G2</td><td>2</td><td>1.259904</td><td>-0.447898</td></tr><tr><td></td><td>3</td><td>0.266207</td><td>0.412580</td></tr></tbody></table></li></ul></li></ol><pre><code>- If we want to index 0.412580 at the bottom right corner, use the code below.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df.loc[<span class="string">"G2"</span>].loc[<span class="number">3</span>,<span class="string">"B"</span>])</span><br></pre></td></tr></table></figure>- `df.loc[&quot;G2&quot;]` returns a dataframe with 3 rows under G2. Do `.loc` again inside this dataframe.- `df.index.names = [&apos;Group&apos;,&apos;Num&apos;]` assign column names to compound index- What if rows with inside index `Num=1` are needed? It is a bit tedious to use `.loc` multiple times. There is another method:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df.xs(<span class="number">1</span>,level=<span class="string">'Num'</span>))</span><br></pre></td></tr></table></figure>The `level` attribute specifies the column inside the compound index.</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Pandas-Python-data-analysis-library-basics&quot;&gt;&lt;a href=&quot;#Pandas-Python-data-analysis-library-basics&quot; class=&quot;headerlink&quot; title=&quot;Pandas(Python data analysis library) basics&quot;&gt;&lt;/a&gt;Pandas(Python data analysis library) basics&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pd.Series()&lt;/code&gt; is similar to &lt;code&gt;np.array()&lt;/code&gt; but we can assign series with a &lt;strong&gt;string&lt;/strong&gt; or &lt;strong&gt;datetime&lt;/strong&gt; index rather than just numerical index.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Convert list, array and dictionary to a series:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list1 = [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array1 = np.array([&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict1 = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;series1 = pd.Series(list1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;series2 = pd.Series(array1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;series3 = pd.Series(dict1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(series1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(series2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(series3)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;By default, we have ascending numerical index&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
      <category term="Pandas" scheme="https://yuxuanliu.tech/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Numpy notes</title>
    <link href="https://yuxuanliu.tech/numpy_notes/"/>
    <id>https://yuxuanliu.tech/numpy_notes/</id>
    <published>2019-09-09T23:05:15.000Z</published>
    <updated>2019-09-12T10:22:21.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy-Numerical-Python-notes"><a href="#Numpy-Numerical-Python-notes" class="headerlink" title="Numpy(Numerical Python) notes"></a>Numpy(Numerical Python) notes</h1><h2 id="1-Basics"><a href="#1-Basics" class="headerlink" title="1. Basics"></a>1. Basics</h2><ol><li><p><code>import numpy as np</code></p></li><li><p>The data type in Numpy is called <strong>array</strong></p></li><li><p><code>a = np.array([1,2,3])</code> to create a new array</p><p>Alternatively:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">array1 = np.array(list1)</span><br><span class="line">print(array1)</span><br></pre></td></tr></table></figure></li><li><p><code>a=np.arange(1,12,3)</code> from 1 to 11 with a step of 3   i.e. <code>[1,4,7,10]</code>  Super useful in <strong>matplotlib</strong>. </p><p>The starting value will be included for sure but the ending value may not be included(depend on step).</p><p><strong>arange</strong> stands for array range </p></li><li><p><code>a=np.linspace(1,13,5)</code> create an evenly spaced array with 5 values i.e.<code>[1,4,7,10,13]</code> Both, beginning and ending values will be included.</p><a id="more"></a></li><li><p><code>a = a.reshape(3,2)</code> change the dimension of an existing array. It means 3 rows and 2 columns here(2d array or <strong>matrix</strong>). </p><p>We may also create a 2d array(<strong>matrix</strong>) manually using <code>a = np.array([[1,2,3],[4,5,6],[7,8,9]])</code></p><p>Alternatively:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>),(<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)]</span><br><span class="line">array1 = np.array(list1)</span><br><span class="line">print(array1)</span><br></pre></td></tr></table></figure></li><li><p><code>print(a.shape)</code> will give us the shape of the array.</p></li><li><p><code>print(a.size)</code> will give us the length of the array kinda similar to <code>len(list1)</code></p></li><li><p><code>print(a.dtype)</code> will give us the datatype of elements inside the array.</p></li><li><p><code>a = np.zeros((3,4))</code> This creates a 3*4 matrix with zeros. Similarly, we have <code>a = np.ones((3,4))</code></p><p>Be careful, <code>a = np.ones((1,4))</code> will return a 2d matrix <code>[[1,1,1,1]]</code> .</p><p>However, <code>a = np.ones(4)</code> will return an 1d array <code>[1,1,1,1]</code>.</p></li><li><p><code>a = np.random.rand(3,4)</code> create a 3*4 matrix with random decimal values under 1. Each value has the equal possibility being picked.</p></li><li><p><code>a= np.random.randn(3,4)</code> The difference between <code>np.random.rand()</code> is that the possibility for each value being picked follows the standard normal distribution with mean at <strong>0</strong> and variance equals <strong>1</strong>.</p></li><li><p><code>a = np.random.randint(0,10,5)</code> create an array with 5 elements random integers ranging 0-10.</p></li><li><p><code>value = np.random.choice(a)</code> will help you choose a random value from the array <strong>a</strong>.</p></li><li><ul><li><code>print(a.sum())</code> will sum up all elements inside the array.</li><li><code>print(a.sum(axis=1))</code> sum up elements in each <strong>row</strong> (This axis trick also works for <code>min</code>, <code>max</code>, <code>mean</code> and <code>std</code> below)</li><li><code>print(a.sum(axis=0))</code> sum up elements in each <strong>column</strong></li></ul></li><li><p><code>print(a.min())</code> will give the minimum element.</p><p><code>print(a.max())</code> will give the maximum element.</p><p><code>print(a.argmin())</code> will give the index position of the minimum element.</p><p><code>print(a.argmax())</code> will give the index position of the maximum element.</p></li><li><p><code>print(a.mean())</code> will give the mean of the array.</p></li><li><p><code>print(a.std())</code> will give the standard deviation of the array.</p></li><li><p><code>print(a.ndim)</code> to find the dimension of the array.</p></li><li><p>print a sin function using both <strong>numpy</strong> and <strong>matplotlib</strong>:</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = np.arange(<span class="number">0</span>,<span class="number">3</span>*np.pi,<span class="number">0.1</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="2-Advanced"><a href="#2-Advanced" class="headerlink" title="2. Advanced"></a>2. Advanced</h2><ol><li><p><code>a = a*3</code> will multiply every element in array by 3. </p><p>Other Math operations(<code>+</code>,<code>-</code>,<code>/</code>,<code>**</code>) can also be applied this way.</p></li><li><p>There is a lot of math functions in numpy. You can do <code>np.sin(a)</code>, <code>np.log(a)</code>, <code>np.exp(a)</code>, <code>np.sqrt(a)</code> etc. Check the doc for more information</p></li><li><p>Product of metrics is super easy to do in numpy. See the example below</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">              [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">              [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">b = np.array([[<span class="number">1</span>],</span><br><span class="line">              [<span class="number">2</span>],</span><br><span class="line">              [<span class="number">3</span>]])</span><br><span class="line">print(a.dot(b))</span><br></pre></td></tr></table></figure><ul><li>Either <code>a.dot(b)</code> or <code>np.dot(a,b)</code> may be used.</li><li>It is a good practice to make sure both arrays are 2d before doing dot product</li></ul></li><li><p>Dot product and cross product between two vectors</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(np.dot(a,b))</span><br><span class="line">print(np.cross(a,b))</span><br></pre></td></tr></table></figure></li><li><p>Indexing of an array: <code>a=np.array([1,2,3,4,5,6,7,8])</code></p><ul><li>Very similar to Python list</li><li><code>print(a[3])</code> This will return 4.</li><li><code>print(a[3:5])</code> This will return 4, 5.</li></ul></li><li><p>Indexing of the matrix <code>a = np.array([(1,2,3),(4,5,6)])</code></p><ul><li>A bit different from Python, in the format <code>matrix[row,column]</code></li><li><code>print(a[0,2])</code> This will return <code>3</code>.</li><li><code>print(a[0:,2])</code> or <code>print(a[0:2,2])</code> These will return <code>[3, 6]</code>.</li></ul></li><li><p>Broadcasting: super cool, not working for standard Python list. See below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line">a[<span class="number">0</span>:<span class="number">3</span>]=<span class="number">20</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p><code>a</code> becomes <code>[20,20,20,4,5,6,7,8]</code></p></li><li><p>See the example below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">b = a</span><br><span class="line">a[<span class="number">0</span>:<span class="number">2</span>]=<span class="number">10</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>You will find out both <code>a</code> and <code>b</code> are changed even though we didn’t write any code to change b. It is because <code>b=a</code> is in fact setting the pointer of <code>b</code> to the pointer of <code>a</code>(in order to save RAM). If we want to fix this issue. We need to use <code>.copy()</code>. See below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">b = a.copy()</span><br><span class="line">a[<span class="number">0</span>:<span class="number">2</span>]=<span class="number">10</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure></li><li><p>Conditional selection</p><ul><li><p><code>print(a&gt;1)</code> to test size of elements inside the array. This will automatically compare all elements inside the array with 1 and return <code>True</code> or <code>False</code> for each element. This is the basis for conditional selection.</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line">a_compare = a&gt;<span class="number">4</span></span><br><span class="line">b = a[a_compare]</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>This will give us all elements which are greater than 4.</p></li><li><p>We can shorten the operation above, see below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line">b = a[a&gt;<span class="number">4</span>]</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>This trick is used in Pandas a lot.</p></li><li><p>Another example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>,<span class="number">51</span>)</span><br><span class="line">print(a[a%<span class="number">2</span>==<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li></ul></li><li><p>The identical matrix $I$ is often used, we can produce one using <code>np.eye(3)</code>. 3 is the dimension of the identical matrix. In other words, it is a $3\times 3$ matrix.   </p></li><li><p>Putting two array together. We can do it in two directions vertically &amp; horizontally</p><ul><li><p>Vertically:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)])</span><br><span class="line">b = np.array([(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)])</span><br><span class="line">c = np.vstack((a,b))</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></li><li><p>Horizontally:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">  a = np.array([(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)])</span><br><span class="line">  b = np.array([(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)])</span><br><span class="line">  c = np.hstack((a,b))</span><br><span class="line">  print(c)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="11"><li><p>Change 2d array to one dimension</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)])</span><br><span class="line">a = a.ravel()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>We get <code>[1,2,3,4,5,6]</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Numpy-Numerical-Python-notes&quot;&gt;&lt;a href=&quot;#Numpy-Numerical-Python-notes&quot; class=&quot;headerlink&quot; title=&quot;Numpy(Numerical Python) notes&quot;&gt;&lt;/a&gt;Numpy(Numerical Python) notes&lt;/h1&gt;&lt;h2 id=&quot;1-Basics&quot;&gt;&lt;a href=&quot;#1-Basics&quot; class=&quot;headerlink&quot; title=&quot;1. Basics&quot;&gt;&lt;/a&gt;1. Basics&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import numpy as np&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The data type in Numpy is called &lt;strong&gt;array&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;a = np.array([1,2,3])&lt;/code&gt; to create a new array&lt;/p&gt;
&lt;p&gt;Alternatively:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array1 = np.array(list1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(array1)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;a=np.arange(1,12,3)&lt;/code&gt; from 1 to 11 with a step of 3   i.e. &lt;code&gt;[1,4,7,10]&lt;/code&gt;  Super useful in &lt;strong&gt;matplotlib&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;The starting value will be included for sure but the ending value may not be included(depend on step).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;arange&lt;/strong&gt; stands for array range &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;a=np.linspace(1,13,5)&lt;/code&gt; create an evenly spaced array with 5 values i.e.&lt;code&gt;[1,4,7,10,13]&lt;/code&gt; Both, beginning and ending values will be included.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="Numpy" scheme="https://yuxuanliu.tech/tags/Numpy/"/>
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Finance basics notes</title>
    <link href="https://yuxuanliu.tech/finance_basics/"/>
    <id>https://yuxuanliu.tech/finance_basics/</id>
    <published>2019-09-09T14:31:27.000Z</published>
    <updated>2019-09-11T15:32:23.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h1><h2 id="The-interest-rate-in-general"><a href="#The-interest-rate-in-general" class="headerlink" title="The interest rate in general"></a>The interest rate in general</h2><ol><li><p>Get money earlier is good because there is opportunity cost, inflation and uncertainty of the financial condition(risk).</p></li><li><p>Interest: </p><ul><li>we are in fact losing for getting money back later, there need to be something to compensate for our loss. We call it <strong>interest</strong>.</li><li>People pay interests for time. </li><li>Interest rate kinda describes the risk of being patient.</li><li>What affects interest rates, same as the three things we talked about: opportunity cost(How strong is the economic growth?), inflation rate and level of risk(interest rate is higher during the war while lower during the peaceful time).</li><li>Interest is the foundation of economics as it describes the cost of time. Everything else is built based on this. </li></ul><a id="more"></a></li></ol><h2 id="Compounding-and-earning-returns-over-time"><a href="#Compounding-and-earning-returns-over-time" class="headerlink" title="Compounding and earning returns over time"></a>Compounding and earning returns over time</h2><ol><li>Compound interest growth exponentially</li><li>Future value(FV) = $PV\times (1+r)^{n}$</li><li>Annual percentage rate(APR), stated rate or nominal rate are the same thing: It means the periodic rate. We can multiply APR and the number of periods. It doesn’t take into account compounding interest.</li><li>Effective rate: The rate you actually earn if APR is compounded. This is the rate you are actually paying(getting) over a period of time.</li><li>$R_{effective}=(1+\frac{APR}{n})^{n}$ </li></ol><h2 id="Discounting-future-cash"><a href="#Discounting-future-cash" class="headerlink" title="Discounting future cash"></a>Discounting future cash</h2><ol><li>present value(PV) = $\frac{FV}{(1+r)^{n}}$</li><li>Two things will affect the PV of future cash: interest rates and time.</li></ol><h2 id="Valuation-by-discounted-cash-flow-DCF"><a href="#Valuation-by-discounted-cash-flow-DCF" class="headerlink" title="Valuation by discounted cash flow(DCF)"></a>Valuation by discounted cash flow(DCF)</h2><ol><li>DCF is the base for all financial valuation.</li><li>We can put a price on anything as long as we know when does cash come in? How much cash is coming in?</li><li>We can use the DCF method to valuate a bond, share etc. As long as we know how much cash will come in in the future, we can discount it back to today and find the total value of a bond.</li><li>mergers and acquisitions 兼并和收购</li></ol><h2 id="Valuation-by-Comparable"><a href="#Valuation-by-Comparable" class="headerlink" title="Valuation by Comparable"></a>Valuation by Comparable</h2><ol><li>Often referred as  <strong>Comps</strong>: Comparable transactions or prices or value-relevant ratio.</li><li>Quick, easy but <strong>dangerous</strong>, not as accurate as DCF.</li><li>$\frac {price}{attribute}$ gives you a ratio of your asset. You can compare this ratio of other asset to estimate the value of your asset. Attributes we may use are: <ul><li>P/E ratio(price earning ratio)</li><li>earnings yield</li><li>dividend yield</li><li>return on assets</li><li>EBITDA multiples</li><li>return on asset(ROA)</li><li>return on equity(ROE)</li><li>return on invested capital</li><li>PEG ratio(P/E ratio over the growth in earning)</li></ul></li></ol><h2 id="Bond"><a href="#Bond" class="headerlink" title="Bond"></a>Bond</h2><ol><li>Simple debt instruments that promise interest and face value.</li><li>We have national bonds(国家债券), corporate bonds, municipal bonds(地方债券) and sovereign bonds(主权债券).</li><li>Valuate a bond:<ul><li>Map up cash flow</li><li>Discount them accordingly</li><li>sum up all discounted cash</li></ul></li></ol><h2 id="Mortgage"><a href="#Mortgage" class="headerlink" title="Mortgage"></a>Mortgage</h2><ol><li><p>Simple debt instruments, each repayment includes the principal(本金) and the interest.</p></li><li><p>Amortization schedule(贷款分期偿付时间表):</p><ul><li><p>Question: Assume a bank charges 7% interest per year. You borrow $10,000 to be repaid in equal yearly instalments of $3810.52 over 3 years. Let’s amortize the loan schedule and compute interest and principal repayments.</p></li><li><p>Solution:</p><table><thead><tr><th align="left">Year</th><th>Payment</th><th>Interest</th><th>Principal repayment</th><th>Balance</th></tr></thead><tbody><tr><td align="left">0</td><td>$0</td><td>$0</td><td>$0</td><td>$10,000</td></tr><tr><td align="left">1</td><td>$3,810.52</td><td>$700</td><td>$3,110.52</td><td>$6,889.48</td></tr><tr><td align="left">2</td><td>$3,810.52</td><td>$482.26</td><td>$3,328.26</td><td>$3,561.22</td></tr><tr><td align="left">3</td><td>$3810.52</td><td>$249.29</td><td>$3561.22</td><td>$0</td></tr></tbody></table><p>Create this table and calculate the amount of interest paid, the remainder will be principal repayment.</p></li></ul><h2 id="Annuity-年金"><a href="#Annuity-年金" class="headerlink" title="Annuity(年金)"></a>Annuity(年金)</h2><ol><li>Annuities are a series of equal payments at regular intervals. For example, pension payment and monthly mortgage payment.</li><li>It is calculation is pretty standard, simply change annual rate back to monthly rate and discounting cash.</li><li></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">121</span>):</span><br><span class="line">    tem = (<span class="number">500</span>)/((<span class="number">1</span>+<span class="number">0.011715</span>)**i)</span><br><span class="line">    total+=tem</span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure><p>Python may be used to calculate annuity.</p><p>To sum up, all these valuation methods are used in the industry. Practitioner put them on different weight according to their confidence of these methods.</p></li></ol><h1 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h1><h2 id="Overview-of-the-capital-budgeting-process"><a href="#Overview-of-the-capital-budgeting-process" class="headerlink" title="Overview of the capital budgeting process"></a>Overview of the capital budgeting process</h2><ol><li>The firm uses its assets to generate cash flow(profit). CFO decides how to deal with the cash flow. We may:<ul><li>Pay out to the capital markets to debt holders, bondholders or equity holders through dividends or repurchases.</li><li>Re-invest within the firm to increase the firm’s profitability.</li></ul></li><li>If existing assets are not producing enough cash flow, CFO may decide to issue extra bonds, equity or mortgage in order to pull cash from the capital market into the firm.</li><li>The science of the capital budgeting process is actually <strong>HOW, WHEN, WHERE</strong> should the firm spend its money in order to <strong>maximize</strong> the return to equity holders.</li><li>Practice for capital budgeting:<ul><li>Arm’s-length(公平交易准则)</li><li>Objective</li><li>Transparent</li></ul></li><li>Common things to do during the capital budgeting process:<ul><li>Accept or reject a proposal</li><li>Find the best proposal within a set</li><li>Rank different proposals</li></ul></li></ol><h2 id="Net-present-value-NPV"><a href="#Net-present-value-NPV" class="headerlink" title="Net present value(NPV)"></a>Net present value(NPV)</h2><ol><li><p>Present value(PV) = total present value of all future cash flow of this project</p></li><li><p>Net present value(NPV) = PV - initial investment of this project</p></li><li><p>Decision rule: whether $NPV&gt;0$</p><p>In other words, whether money coming in out weight the money going out.</p></li><li><p>Here is an example, discount rate = 10%:</p><table><thead><tr><th>Period</th><th>Cash Flow</th><th></th><th>Present Value</th></tr></thead><tbody><tr><td>0</td><td>$-1500</td><td></td><td>$-1500</td></tr><tr><td>1</td><td>$900</td><td></td><td>$818.18</td></tr><tr><td>2</td><td>$750</td><td></td><td>$619.83</td></tr><tr><td>Total</td><td>$150</td><td></td><td>$-61.99</td></tr></tbody></table><p>We have a net cash inflow so the project is profitable but $NPV&lt;0$ so it is not worth doing. In other words, the project is not profitable enough.</p></li><li><p>NPV is the best capital budgeting tool This is because:</p><ul><li>It includes the effect cash flow, timing, opportunity cost and risk(discount rate). </li><li>It is an objective, arms-length and transparent metrics(衡量指标) for capital budgeting</li><li>Sometimes, projects will still be accepted even though $NPV&lt;0$. For example, government policies or environmental cleanup.</li></ul></li></ol><h2 id="Payback-period"><a href="#Payback-period" class="headerlink" title="Payback period"></a>Payback period</h2><ol><li><p>Payback period means how long it takes to earn back initial investment(no discount rate included)</p></li><li><p>Decision rule: If the payback period$&lt;X$, we will invest</p></li><li><p>Example:</p><table><thead><tr><th>Project</th><th></th><th></th><th></th><th></th><th>Pay back period</th></tr></thead><tbody><tr><td></td><td>0</td><td>1</td><td>2</td><td>3</td><td></td></tr><tr><td>X</td><td>$-500</td><td>$500</td><td>$250</td><td>$0</td><td>1</td></tr><tr><td>Y</td><td>$-500</td><td>$100</td><td>$200</td><td>$600</td><td>3</td></tr><tr><td>Z</td><td>$-500</td><td>$300</td><td>$400</td><td>$400</td><td>1.5</td></tr></tbody></table><p>It seems that <strong>X</strong> project has the shortest pay back period but it may not always be reliable. See cons below.</p></li><li><p>Pros: </p><ul><li>reflect time directly</li><li>reflects opportunity costs</li></ul><p>Cons: </p><ul><li><strong>Neglect cash flow after pay back period</strong></li><li><strong>neglect timing</strong></li><li><strong>Neglect risk(no discount rate included)</strong></li></ul></li></ol><table><thead><tr><th>Project</th><th></th><th></th><th></th><th></th><th>Payback period</th><th>NPV(10%)</th></tr></thead><tbody><tr><td></td><td>0</td><td>1</td><td>2</td><td>3</td><td></td><td></td></tr><tr><td>X</td><td>$-500</td><td>$500</td><td>$250</td><td>$0</td><td>1</td><td>$161</td></tr><tr><td>Y</td><td>$-500</td><td>$100</td><td>$200</td><td>$600</td><td>3</td><td>$207</td></tr><tr><td>Z</td><td>$-500</td><td>$300</td><td>$400</td><td>$400</td><td>1.5</td><td>$404</td></tr></tbody></table><p>​    If we calculate NPV for these projects, we get a different answer i.e. project <strong>Z</strong></p><ol start="5"><li>Pay back period is a weak capital budgeting tool, it often acts as a back up of NPV.</li></ol><h2 id="Accounting-ratios"><a href="#Accounting-ratios" class="headerlink" title="Accounting ratios"></a>Accounting ratios</h2><ol><li><p>Basically, putting one piece of accounting data over the other piece of accounting data.</p></li><li><p>Example: </p><ul><li><p>Return on invested capital(ROIC)= $\frac{NOPAT}{invested ; capital}$</p><p>NOPAT stands for net operating profit after tax</p></li><li><p>Return on assets(ROA)= $\frac{net ; income}{total ; asset}$</p></li><li><p>Return on equity(ROE)=$\frac {ASE}{net ; income}$</p><p>ASE stands for average shareholder’s equity</p></li><li><p>Gross margin = $\frac{gross ; profit}{sales}$</p></li><li><p>Profit margin = $\frac {net ; profit}{net ; sales}$</p></li><li><p>Profitability index = $\frac  {PV; of ; future ; flow}{initial ; investment}$</p></li></ul></li><li><p>Pros:</p><ul><li>Makes numerical sense</li><li>Reflects the use of capital</li></ul></li><li><p>Cons:</p><ul><li>Neglect timing(no discount ratio included)</li><li>Include too much accounting distortions(like depreciation)</li><li>Neglects risk</li></ul></li><li><p>Accounting ratio is a useful tool but it should act as a back up of NPV as well.</p></li></ol><h2 id="Internal-rate-of-return-IRR"><a href="#Internal-rate-of-return-IRR" class="headerlink" title="Internal rate of return(IRR)"></a>Internal rate of return(IRR)</h2><ol><li><p>IRR is basically the discounting rate which will make <strong>NPV = 0</strong>. In other words, we discount cash flow harder and harder until NPV reaches naught. IRR is kind of a measure of the resiliency of the project.</p></li><li><p>There is no direct connection between IRR and NPV. A large NPV doesn’t always mean we will have a high IRR. It is always a good practice to put NPV and IRR together </p></li><li><p>IRR holds all the pros of NPV. In addition, it scales NPV into percentage interpretation  to make it more intuitive(直观的). However, percentage interpretation may cause problems as well because we don’t know the actual size. For example, 2% of 1billion dollar is greater than 30% of 1000 dollar.</p></li><li><p><strong>WARNING</strong>: be careful about using IRR solely when directions of cash flow are often reversed.</p><table><thead><tr><th>Project</th><th>Year 0</th><th>Year 1</th><th>IRR</th><th>NPV(10%)</th></tr></thead><tbody><tr><td>X</td><td>$-400</td><td>$500</td><td>25%</td><td>$54.54</td></tr><tr><td>Y</td><td>$400</td><td>$-500</td><td>25%</td><td>$-54.54</td></tr></tbody></table><p>Project X is a standard case. Project Y is like issuing a mortgage of $400 at year 0 and pay back $500 at year 1. They both have the IRR but their NPV are opposite. </p><p>That is another reason why we often present IRR together with NPV.</p></li><li><p>There is a chance that we can have multiple IRR or no IRR because we are solving a polynomial equation. Math :)</p></li><li><p>We can calculate NPV, IRR using built-in functions in Microsoft Excel.</p></li></ol><h2 id="Sensitivity-analysis"><a href="#Sensitivity-analysis" class="headerlink" title="Sensitivity analysis"></a>Sensitivity analysis</h2><ol><li><p>Most CFOs rely on multiple metrics.</p></li><li><p>Everything depends on forecasts while all forecasts are technically wrong as there is always uncertainty in the financial market.</p></li><li><p>Forecasts depend on assumptions. Sensitivity analysis focus on how forecast results will change if assumptions changed slightly. See the example below</p><table><thead><tr><th>Time</th><th>Pessimistic</th><th>Expected</th><th>Optimistic</th></tr></thead><tbody><tr><td>0</td><td>-$6,000</td><td>-$5,000</td><td>-$5,000</td></tr><tr><td>1</td><td>$2,500</td><td>$3,200</td><td>$4,000</td></tr><tr><td>2</td><td>$2,000</td><td>$2,500</td><td>$3,000</td></tr><tr><td>3</td><td>$1,000</td><td>$1,200</td><td>$2,000</td></tr><tr><td>4</td><td>$1,000</td><td>$1,200</td><td>$1,500</td></tr><tr><td>5</td><td>$1,000</td><td>$1,200</td><td>$1,500</td></tr><tr><td>NPV(15%)</td><td>$-587</td><td>$1,745</td><td>$3,665</td></tr></tbody></table><p>We’ve got three different NPV depending on the assumptions we made and our forecasts make more sense.</p></li></ol><h1 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h1><h2 id="Overview-of-financial-statements"><a href="#Overview-of-financial-statements" class="headerlink" title="Overview of financial statements"></a>Overview of financial statements</h2><ol><li>Balance sheet<ul><li>What does the firm own?</li><li>Assets = Liabilities + owner’s Equity</li><li>There are three types of asset: current asset, fixed asset and other asset.</li><li>There are three types of liabilities: current liability, long-term liability and shareholder’s equity.</li></ul></li><li>Profit and loss statement<ul><li>Whether the firm is making money?</li><li>EBITDA(Earning before interest, tax, depreciation and amortization) = Net sale(Revenue) - Cost of goods sold - SG&amp;A expense(Selling, General &amp; Administrative expense)</li><li>EBIT(Earning before interest and tax) = EBITBDA - Depreciation - Amortization</li><li>Taxable income = EBIT - Interest expense</li><li>Net income(profit) = Taxable income - Tax - Dividends</li></ul></li><li>Cash flow statement<ul><li>Accrual method(权责发生制) of accounting.</li><li>Reports on cash movements</li><li>Reconciles cash movement between balance sheet and P/L statement </li></ul></li></ol><h2 id="Hunting-for-cash-creation"><a href="#Hunting-for-cash-creation" class="headerlink" title="Hunting for cash creation"></a>Hunting for cash creation</h2><ol><li>Having earnings doesn’t equal to having cash. It is due to the <strong>accrual method</strong> used in accounting. Sales are booked before cash actually comes in and there are non-cash items.</li><li><strong>We really need to find free cash flow because all our tools of discounting cash and capital budgeting depend on cash flow. Without cash, those formulae are useless.</strong> </li><li>Free cash flow(FCF) will tell us how much cash is there actually in the business.<ul><li>FCF = Operating Profit(after tax) - Increase in working capital + Depreciation - Capital expenditure + After-tax salvage value(税后残值)</li><li><strong>Working capital = Non-cash current asset - Current liability</strong></li><li><strong>Salvage value</strong> is the book value of an asset less depreciation. It is only included in FCF formula <strong>if assets are sold at the end of the project</strong>.</li></ul></li></ol><h2 id="Working-with-capital-adjustment"><a href="#Working-with-capital-adjustment" class="headerlink" title="Working with capital adjustment"></a>Working with capital adjustment</h2><ol><li>Increase in current liability is good for cash.</li><li>Increase in current asset is bad for cash.</li><li>Working capital is an opportunity cost, you have some net current asset in your hand but you can’t change it into cash to generate profit.</li></ol><h2 id="Depreciation-and-capital-expenditure-income"><a href="#Depreciation-and-capital-expenditure-income" class="headerlink" title="Depreciation and capital expenditure(income)"></a>Depreciation and capital expenditure(income)</h2><ol><li>Depreciation represents losing value due to wear and tear and it is a non-cash expenditure.</li><li>Amortization is kinda similar, it represents ‘depreciation’ for intangible assets.</li><li>Capital expenditure is a cash expenditure and it is not treated as expenditure in accounting often due to its large numerical size.</li><li>Salvage value of an asset is also an opportunity cost, we want to change it back to cash at the end of the project. It is the opposite of capital expenditure.</li></ol><h2 id="Taxes"><a href="#Taxes" class="headerlink" title="Taxes"></a>Taxes</h2><ol><li>Taxes are real cash flow.</li><li>All expenses shield revenue from tax, a firm should make use of all its shields.</li><li>Interest paid for debts can deduct tax and it’s part of the reason why debt is so attractive to firms.</li></ol><h1 id="Example-of-free-cash-flow"><a href="#Example-of-free-cash-flow" class="headerlink" title="Example of free cash flow"></a>Example of free cash flow</h1><table><thead><tr><th>Year</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>Revenue</td><td></td><td>$500</td><td>$500</td><td>$500</td></tr><tr><td>Total costs</td><td></td><td>$300</td><td>$300</td><td>$300</td></tr><tr><td>Depreciation</td><td></td><td>$100</td><td>$100</td><td>$100</td></tr><tr><td>EBIT</td><td></td><td>$100</td><td>$100</td><td>$100</td></tr><tr><td>Taxes(30%)</td><td></td><td>$30</td><td>$30</td><td>$30</td></tr><tr><td>NOPAT</td><td></td><td>$70</td><td>$70</td><td>$70</td></tr><tr><td>Capital spending</td><td>$500</td><td>$0</td><td>$0</td><td>$0</td></tr><tr><td>Net PP&amp;E</td><td>$500</td><td>$400</td><td>$300</td><td>$200</td></tr><tr><td>Cash from operations</td><td>$0</td><td>$170</td><td>$170</td><td>$170</td></tr><tr><td>Working capital</td><td>$150</td><td>$100</td><td>$50</td><td>$0</td></tr><tr><td>Asset sales</td><td>$0</td><td>$0</td><td>$0</td><td>$200</td></tr><tr><td>Free cash flow</td><td>-$650</td><td>$220</td><td>$220</td><td>$420</td></tr></tbody></table><ul><li>NOPAT: net operating profit after tax</li><li>Cash from operations = Depreciation + NOPAT</li><li>Discount rate = 10%</li><li>NPV = $47.37</li><li>IRR = 14%(using Excel function)</li><li>Payback period = 2.5 years</li><li>ROIC = $\frac{ave(NOPAT)}{ave(Net; PP&amp;E)}=\frac{(0+70+70+70)\div 3}{(500+400+300+200)\div 4}=20%$ (Got it wrong at the beginning, review again later)</li></ul><h1 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h1><h2 id="Debt-vs-Equity-股本"><a href="#Debt-vs-Equity-股本" class="headerlink" title="Debt vs Equity(股本)"></a>Debt vs Equity(股本)</h2><ol><li>For a firm, it usually has two sources of capital: debt($r_{d}$) and equity($r_{e}$). They have different discounting rate due to different level of risk.</li><li>Debt:<ul><li>Non-contingent claim: not contingent on the financial condition of the firm. In other words, you have to pay me back no matter what happened.</li><li>Collateral(需要抵押的)</li><li>Debt has priority in bankruptcy.</li><li>A lot of monitoring or restrictions on how a firm uses the money.</li><li>Types of debt:<ul><li>From banks: straight loan; line of credit; mortgage; business loan; industrial loan</li><li>From the public: bonds</li></ul></li></ul></li><li>Equity:<ul><li>Ownership of the company</li><li>Contingent claim: contingent on the financial condition of the firm.</li><li>Equity holders will get all the residual cash.</li><li>Equity holders experience higher risk than debt holders.</li><li>Equity will be wiped out in bankruptcy.</li></ul></li><li>Capital structure: how firm mix the use of debt and equity<ul><li><strong>IT DOES NOT CHANGE THE UNDERLYING BUSINESS RISK OF THE FIRM.</strong> <ul><li>For example, if a firm takes lots of debt, it doesn’t get riskier but the equity holders become riskier.</li><li>Another example, if KFC takes lots of debt, it won’t affect consumers’ desire to buy chicken so the business risk level stays unchanged.</li></ul></li></ul></li></ol><h2 id="Risk-free-rate"><a href="#Risk-free-rate" class="headerlink" title="Risk free rate"></a>Risk free rate</h2><ol><li>Risk free rate acts as the baseline for the interest rate.</li><li>Safest possible place to put money in the US will be US Treasury bonds.</li><li>Rate of return = risk free rate(US treasury bonds) + risk premium</li><li>If we go through historical data up to ancient Rome, we will find national bonds fluctuated between 5% and 7% in most years.</li><li>Bonds with longer maturity have a higher risk because the rate may rise in the future(opportunity cost) and there is more liquidity risk for long term bonds.</li></ol><h2 id="Historical-risk-and-return"><a href="#Historical-risk-and-return" class="headerlink" title="Historical risk and return"></a>Historical risk and return</h2><ol><li>The riskier asset I buy, greater the return I will get.</li><li>Stork return rates are around 10% - 12% per year on average in the U.S.</li><li>Storks generally do better in the long run.</li><li>Stork’s volatility(易变性) is much higher than bonds or equity.</li></ol><h2 id="Equity-risk-premium"><a href="#Equity-risk-premium" class="headerlink" title="Equity risk premium"></a>Equity risk premium</h2><ol><li><p>Equity premium = $R_{m} - r.f.$</p><p>$R_{m}$: Stork market return rate</p><p>$r.f.$: risk free rate</p></li><li><p>From historical data, $R_{m}=11%$, $r.f. = 5.5%$ . We have equity premium $=5.5%$ on average on condition that we are investing in a wide range of portfolio. It is kind of the fair rate to compensate for the stork market risk. </p></li><li><p>In the real world, equity premium around $4.5% - 6.5%$ is considered to be good.</p></li><li><p>Factors affecting equity premium: systemic risk, investors’ attitude toward risk.</p></li></ol><h2 id="Beta-and-cost-of-equity"><a href="#Beta-and-cost-of-equity" class="headerlink" title="Beta and cost of equity"></a>Beta and cost of equity</h2><ol><li><p>Diversification of a portfolio may decrease risk while the market risk can’t be diversified.</p></li><li><p>Ideally, we want a portfolio which wiggles less and provides a stable return.</p></li><li><p>如果我们想要一个震荡幅度小的组合投资，并不是说我们把它内部的股票全换成比较稳定的就能达到，因为可能多个稳定的股票同时跌。我们还要考虑股票的相互影响，最好是找到规律比如说：一个股票跌，另一个很容易涨，这样在组合投资外部看来，它的震荡幅度还是小的。</p></li><li><p>We want to measure how does a stork change the risk of my portfolio.</p><ul><li><p><strong>Beta</strong>(贝塔系数）: a measure of the risk arising from exposure to general market movements as opposed to idiosyncratic(特殊) factors. In other words, it is a measure of the sensitivity of a stork to the market risk.</p></li><li><p>It depends on the variance and covariance of the stork.</p><p><strong>Variance</strong>: how a stork wiggle by itself?</p><p><strong>Covariance</strong>: how two or storks wiggle with each other?</p></li><li><p>$\beta = \frac{Cov(R_{i},R{m})}{Var(R{m})}$</p><p>$Cov$: covariance</p><p>$R_{i}$: a specific stork</p><p>$R_{m}$: the whole stork market</p><p>In other words, beta equals to the covariance of a specific stork and the whole stork market over the variance of the whole stork market.</p></li><li><p>If beta = 2, this means the stork return is about twice the market return</p></li></ul></li><li><p>Capital asset pricing model(CAPM): giving us the return of putting on risk to any stork.</p><ul><li><p>$return(cost ;of; equity) =risk; free; rate + \beta \times market ; risk; premium(equity ; premium)$</p></li><li><p>If a stork has $\beta = 1.8$, equity premium $=5.5%$ and risk free rate $=3%$. We have:</p><p>cost of equity = $3%+1.8\times 5.5% = 12.9%$</p></li><li><p>We can use this value as the discounting rate for future cash inflow.</p></li><li><p>It also shows how much return I should get by taking that amount of risk.</p></li></ul></li></ol><h2 id="Credit-rating"><a href="#Credit-rating" class="headerlink" title="Credit rating"></a>Credit rating</h2><ol><li>A debt may default(无法偿还). Investor concerns the possibility of default and the principal recovery rate in default. These two things put a risk premium on debt and determine the credit rating of a company.</li><li>Possibility of default depends on:<ul><li>Maturity</li><li>Cash flow</li><li>Debt level</li><li>Profitability</li><li>Current economic conditions</li><li>Ability to raise capital</li></ul></li><li>Principal recover rate depends on:<ul><li>Tangibility</li><li>Marketability(易转让程度)</li><li>Transportability</li></ul></li></ol><h2 id="Cost-of-debt"><a href="#Cost-of-debt" class="headerlink" title="Cost of debt"></a>Cost of debt</h2><p>We have three methods to estimate the cost of debt.</p><ol><li><p><strong>Historical cost</strong>: what is the rate of interest last time the company borrow money?</p><p>It is a fine method but won’t reflect the current market conditions. Need to be cautious.</p></li><li><p><strong>Current yield to maturity</strong>: If we have outstanding debt and that debt is still traded on the market, we can use the current yield to maturity directly.</p><p>It is the best method but only works if the company has an existing debt. Works well for big companies.</p></li><li><p><strong>Ratings adjusted yield</strong>: put a risk premium on risk free rate according to the company’s credit rating. We can also use other companies with a similar credit rating for reference.</p></li><li><p>Interest rates are tax deductible. The effective rate = $r_{d}\times (1-r_{t})$ </p></li></ol><h2 id="Weighted-average-cost-of-capital-WACC"><a href="#Weighted-average-cost-of-capital-WACC" class="headerlink" title="Weighted average cost of capital(WACC)"></a>Weighted average cost of capital(WACC)</h2><ol><li>WACC is obtained by allocating different weight for $r_{e}$, $r_{d}$ then find the average.</li><li>WACC = $\frac{Equity}{Equity+Debt}\times r_{e}+\frac {Debt}{Equity+Debt}\times r_{d}(1-r_{t})$</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Week-1&quot;&gt;&lt;a href=&quot;#Week-1&quot; class=&quot;headerlink&quot; title=&quot;Week 1&quot;&gt;&lt;/a&gt;Week 1&lt;/h1&gt;&lt;h2 id=&quot;The-interest-rate-in-general&quot;&gt;&lt;a href=&quot;#The-interest-rate-in-general&quot; class=&quot;headerlink&quot; title=&quot;The interest rate in general&quot;&gt;&lt;/a&gt;The interest rate in general&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Get money earlier is good because there is opportunity cost, inflation and uncertainty of the financial condition(risk).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interest: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we are in fact losing for getting money back later, there need to be something to compensate for our loss. We call it &lt;strong&gt;interest&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;People pay interests for time. &lt;/li&gt;
&lt;li&gt;Interest rate kinda describes the risk of being patient.&lt;/li&gt;
&lt;li&gt;What affects interest rates, same as the three things we talked about: opportunity cost(How strong is the economic growth?), inflation rate and level of risk(interest rate is higher during the war while lower during the peaceful time).&lt;/li&gt;
&lt;li&gt;Interest is the foundation of economics as it describes the cost of time. Everything else is built based on this. &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Finance" scheme="https://yuxuanliu.tech/categories/Finance/"/>
    
    
      <category term="Finance" scheme="https://yuxuanliu.tech/tags/Finance/"/>
    
  </entry>
  
  <entry>
    <title>C++ basics</title>
    <link href="https://yuxuanliu.tech/c++_basics/"/>
    <id>https://yuxuanliu.tech/c++_basics/</id>
    <published>2019-09-08T22:59:17.000Z</published>
    <updated>2019-09-11T15:32:46.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Basics-information"><a href="#1-Basics-information" class="headerlink" title="1. Basics information"></a>1. Basics information</h2><ol><li>C++ file ends up with <code>.cpp</code></li><li>We always need to <code>build</code> the project first before running it. Build will translate your code to the language that the computer can understand</li><li>MAKE SURE TO PUT <code>;</code> EVERY TIME YOU FINISH A LINE IN C++.</li></ol><h2 id="2-Drawing-a-shape"><a href="#2-Drawing-a-shape" class="headerlink" title="2. Drawing a shape"></a>2. Drawing a shape</h2><ol><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>You need <code>#include &lt;iostream&gt;</code> and <code>using namespace std</code> at the beginning of your code. Don’t worry their meanings for now, will explain later.</p></li><li><p><code>int main()</code> is a function in c++, like a container so we can put our codes inside. Codes within the <code>{}</code> will be executed when we run the program.</p><a id="more"></a></li><li><p><code>return 0;</code> don’t worry too much for now, remember we need it inside the bracket.</p></li><li><p><code>cout</code> stands for console out. This will print out the string in the console. </p></li><li><p><code>endl</code> means ending a line in console.</p></li><li><p>c++ will read code from top to bottom</p></li><li><p>Here I am drawing out a triangle:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"   /|"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"  / | "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" /  |"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"/___|"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-Variable"><a href="#3-Variable" class="headerlink" title="3. Variable"></a>3. Variable</h2><ol><li><p>Variable is basically a container where we can store information</p></li><li><p>To create a variable, we need to tell c++ the <code>data type</code>. Let me create a <code>string</code> variable as example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> student_name = <span class="string">"John"</span>;</span><br></pre></td></tr></table></figure><p>We can also create a <code>integer</code> type variable in another format as followed:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> student_age;</span><br><span class="line">student_age = <span class="number">35</span>;</span><br></pre></td></tr></table></figure><p>These two formats are equivalent.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age,gpa;</span><br></pre></td></tr></table></figure><p>We may also create multiple variables of the same data type in one line as above.</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> student_name = <span class="string">"John"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, my name is "</span>&lt;&lt; student_name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can insert a <code>string</code> variable at the end of another string by putting the variable after <code>&lt;&lt;</code>. This operation is like <code>print(f&quot;Hello, my name is{student_name}&quot;)</code> is Python. </p></li></ol><ol start="4"><li><p>If we want to insert the variable in the middle of another string, we can use the trick below:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">   <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> student_age = <span class="number">19</span>;</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, I am "</span>&lt;&lt;student_age&lt;&lt;<span class="string">" years old"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Make sure to put the variable in between <code>&lt;&lt;</code>. These <code>&lt;&lt;</code> are linking <code>strings</code> and <code>variables</code> together.</p></li><li><p>We can also print two <code>variables</code> in a raw, see the example below:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> student_age;</span><br><span class="line">    student_age = <span class="number">19</span>;</span><br><span class="line">    <span class="keyword">bool</span> isMale;</span><br><span class="line">    isMale = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;student_age&lt;&lt;isMale&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It works kinda the same, we use <code>&lt;&lt;</code> link up variables.</p></li></ol><h2 id="4-Data-types"><a href="#4-Data-types" class="headerlink" title="4. Data types"></a>4. Data types</h2><ol><li><code>char grade = &#39;A&#39;;</code> stands for character, it can only store one character. Be careful, we must put the character in between <code>&#39;&#39;</code> rather than <code>&quot;&quot;</code>.<ol start="2"><li><code>string phase = &quot;Hello there&quot;;</code> stands for a string of characters. </li><li><code>int age = 50;</code> stands for a whole number. It can be either positive or negative</li><li><code>float value = 13.5;</code> can store decimal values.</li><li><code>double value = 3.1415;</code> can store decimal values. The difference between <code>double</code> and <code>float</code> is: <code>float</code> can take more decimal points. As a beginner, stick with <code>double</code></li><li><code>bool isMale = false</code> This stands for Boolean values, can either be <code>true</code> or <code>false</code>.</li></ol></li></ol><h2 id="5-Working-with-strings"><a href="#5-Working-with-strings" class="headerlink" title="5. Working with strings"></a>5. Working with strings</h2><ol><li><p><code>endl</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World! "</span> ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Whats up."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>endl</code> basically tells c++ to start a new line in the console after each <code>cout</code> operation. If we don’t want to move to a new line, we can remove <code>&lt;&lt; endl</code>.</p><p>Similar to Python, <code>\n</code> means starting a new line so <code>cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl;</code> is equivalent to <code>cout &lt;&lt; &quot;Hello world \n&quot;;</code> </p></li><li><p>string functions:</p><ul><li><p><code>.length()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> trial;</span><br><span class="line"> trial = <span class="string">"Hello world"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; trial.length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This will print out the length of a <code>string variable</code>. Be aware, we need to define the variable first. If we do <code>cout &lt;&lt; &quot;Hello world&quot;.length() &lt;&lt; endl</code>, an error will show up.</p></li><li><p>Indexing:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> trial;</span><br><span class="line"> trial = <span class="string">"Hello world"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; trial[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello world"</span>[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similar to Python, we can access a certain character in the <code>string</code> by indexing and we don’t have to define a <code>string variable</code> first like what  we do for <code>.length()</code>.  </p></li><li><p>Assigning a new character:</p><p>We can modify a character in the string by assigning a new character to it. <code>trial[1] = &#39;E&#39;</code> Now, we have <code>&quot;HEllo world&quot;</code> instead of <code>&quot;Hello world&quot;</code>.</p></li><li><p><code>.find()</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> trial;</span><br><span class="line"> trial = <span class="string">"Hello world"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; trial.find(<span class="string">"world"</span>,<span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can pass in two parameters, the first will be the <code>substring</code> we wish to find and the second will be where do we want <code>c++</code> to start searching. By default, the second parameter will be <code>0</code>.</p><p>If that <code>substring</code> can’t be find. <code>C++</code> will return <code>4294967295</code>. It is a bit odd but this value is actually the largest 32 bits unsigned value, which kind of make sense.</p></li><li><p><code>.substr()</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> trial;</span><br><span class="line"> trial = <span class="string">"Hello world"</span>;</span><br><span class="line"> <span class="built_in">string</span> trial_1;</span><br><span class="line"> trial_1 = trial.substr(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; trial_1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This function will help us cut a <code>substring</code> out of the main <code>string</code>. It requires two parameters, the first parameter will tell <code>c++</code> where to start cutting. The second parameter will tell <code>c++</code> how many characters do we need. </p><p><code>trial_1 = trial.substr(2,3);</code> Here, we start from the <code>2</code> position which is <code>&quot;l&quot;</code> and we need 3 characters. We get <code>llo</code> as expected. </p></li></ul></li></ol><h2 id="6-Working-with-numbers"><a href="#6-Working-with-numbers" class="headerlink" title="6. Working with numbers"></a>6. Working with numbers</h2><ol><li><p>A quick demo of the math operations</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">5</span> - <span class="number">7</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">15.0</span> / <span class="number">7</span>;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="number">5</span> * <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">10</span> % <span class="number">3</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is one thing interesting, if we do <code>cout &lt;&lt; 15/7;</code> C++ will return <code>2</code> as we are dividing an <code>int</code> by an <code>int</code> so the result is also an <code>int</code>. How can we fix this, use <code>15.0</code> or <code>7.0</code> instead.</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> value;</span><br><span class="line">    value = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    value++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    value--;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    value +=<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Here <code>value++</code> means an increment of <code>1</code> to a numerical variable. A short hand in <code>c++</code>.</li><li>Here <code>value--</code> means decreasing a numerical variable by 1. A short hand in <code>c++</code>.</li><li><code>+=</code> <code>-=</code> etc works the same as Python</li></ul></li><li><p>If we do <code>int</code>+<code>int</code>, we get <code>int</code>. That is kinda the reason why <code>int/int</code> will give <code>int</code> as well.</p></li><li><p>Math function:</p><ul><li><p><code>#include &lt;cmath&gt;</code> We need to import these functions before using them.</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This <code>pow(A,B)</code> function has two parameters, will return A to the power of B. </p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">sqrt</span>(<span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This <code>sqrt(A)</code> takes one parameter, will return the square root of A.</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; round(<span class="number">4.3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This <code>round(A)</code> function will follow the normal rounding rule(四舍五入).</p><p>We also have <code>ceil(A)</code> function, which will round up(向上取整).</p><p>Oppositely, we have <code>floor(A)</code> function, which will round down(向下取整)</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fmax(<span class="number">3</span>,<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fmax(A,B)</code> function will take two parameters, return the greater value between <code>A</code> and <code>B</code>.</p><p><code>fmin(A,B)</code> function will do the opposite.</p></li></ul></li></ol><h2 id="7-Getting-input-from-the-user"><a href="#7-Getting-input-from-the-user" class="headerlink" title="7. Getting input from the user"></a>7. Getting input from the user</h2><ol><li>Most data types:</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">int</span> age;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt;<span class="string">"Please enter your age"</span>;</span><br><span class="line"> <span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">"You are "</span>&lt;&lt; age &lt;&lt; <span class="string">" years old"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   Create a variable first as we want input from the user and we need to store it somewhere.</p><p>   Getting an input is kinda the opposite of <code>cout &lt;&lt;</code>. We use <code>cin &gt;&gt;</code>  and put the variable name after the <code>&gt;&gt;</code> sign. This method works for most data types except for <code>string</code>.</p><ol start="2"><li><code>string</code> type:</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> name;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt;<span class="string">"Please enter your name"</span>;</span><br><span class="line"> getline(<span class="built_in">cin</span>,name);</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">"You are "</span>&lt;&lt; name &lt;&lt; <span class="string">"."</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   We need to use the <code>getline()</code> function when input is the <code>string</code> type. It takes two parameters which are <code>cin</code> and <code>variable_name</code>.</p><h2 id="8-Building-a-calculator"><a href="#8-Building-a-calculator" class="headerlink" title="8. Building a calculator"></a>8. Building a calculator</h2><p>Our target is to get two input figures from the user and add them together and print out the result.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> num1, num2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"Please fill in the first number: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num1;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"Please fill in the second number: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The result is: "</span> &lt;&lt; num1+num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-Building-a-Mad-Libs-Game-疯狂填词-wth"><a href="#9-Building-a-Mad-Libs-Game-疯狂填词-wth" class="headerlink" title="9. Building a Mad Libs Game(疯狂填词 wth???)"></a>9. Building a Mad Libs Game(疯狂填词 wth???)</h2><p>Basically, let the user to input three words and put these words into three sentences. Funny? Maybe.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="built_in">string</span> color,plural_none,celebrity;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please fill in a colour."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>,color);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please fill in a plural none."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>,plural_none);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please fill in a celebrity."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>,celebrity);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Roses are "</span> &lt;&lt; color &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; plural_none &lt;&lt; <span class="string">" are blue"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"I love "</span> &lt;&lt; celebrity &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-Arrays"><a href="#10-Arrays" class="headerlink" title="10. Arrays"></a>10. Arrays</h2><ol><li><p>A <code>variable</code> can only store one value while an <code>array</code> can hold multiple data values.</p></li><li><p>Array operations:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">int</span> lucky_nums[<span class="number">20</span>] = &#123;<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">23</span>,<span class="number">42</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;lucky_nums[<span class="number">3</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    lucky_nums[<span class="number">1</span>] =  <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;lucky_nums[<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>It is similar to creating a variable but we need to put a <code>[]</code> after the <code>array</code> name and put its elements inside <code>{}</code>. We can limit the length(size) of the array by putting a value inside <code>[]</code>(optional).</li><li>We can obtain an element inside the array by <code>indexing</code>, standard stuff.</li><li>We can modify an element’s value by assigning a new value to it.</li><li>If we want to <code>cout</code> the whole <code>array</code>, we need to use <code>for</code> loop</li></ul></li></ol><h2 id="11-Function"><a href="#11-Function" class="headerlink" title="11. Function"></a>11. Function</h2><ol><li><p>A container to put codes so we can re-use them in the future</p></li><li><p><code>main()</code> is actually a function.</p></li><li><p>Create a basic function:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">say_hi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello user"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;say_hi();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>We need to define a function’s <code>return type</code> at the start of defining a function. Everything inside <code>{}</code> are codes of the function.</li><li><code>void</code> basically means <code>return nothing</code>.</li><li>Don’t forget to call the function inside the <code>main()</code>.</li></ul></li><li><p>Create a function with parameters</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">say_hi</span><span class="params">(<span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello "</span>&lt;&lt;name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> student = <span class="string">"Oscar"</span>;</span><br><span class="line">    say_hi(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is kinda similar to Python I guess but we must specify the <code>data type</code> of the formal parameter(形参) we want to input. In terms of the example above, <code>say_hi(string name)</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">say_hi</span><span class="params">(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello "</span>&lt;&lt;name&lt;&lt;<span class="string">". You are "</span>&lt;&lt; age &lt;&lt; <span class="string">" years old"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> student = <span class="string">"Oscar"</span>;</span><br><span class="line">    <span class="keyword">int</span> student_age = <span class="number">19</span>;</span><br><span class="line">    say_hi(student,student_age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We may pass in multiple parameters if we wish. MAKE SURE TO SPECIFY THE DATA TYPE.</p></li><li><p>Order is important in <code>c++</code>, make sure to define the function before calling it in main. If we really want to reverse the order, see the example below, there is a trick we can do.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">say_hi</span><span class="params">(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> student = <span class="string">"Oscar"</span>;</span><br><span class="line">    <span class="keyword">int</span> student_age = <span class="number">19</span>;</span><br><span class="line">    say_hi(student,student_age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">say_hi</span><span class="params">(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello "</span>&lt;&lt;name&lt;&lt;<span class="string">". You are "</span>&lt;&lt; age &lt;&lt; <span class="string">" years old"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can declare a function first by <code>void say_hi(string name, int age);</code>  and fill in codes later.</p></li><li><p>We may pass parameters into a function, but we are actually passing in their values instead of variables themselves. If we want to modify values of variables, WE MUST PASS IN POINTERS AND DEFERENCE THEM.</p></li></ol><h2 id="12-Return-statement"><a href="#12-Return-statement" class="headerlink" title="12. Return statement"></a>12. Return statement</h2><ol><li><p>We must specify the return <code>data type</code> when defining a function. We can set any one of the <code>data types</code> we know as return. If we don’t want anything to return, use <code>void</code></p></li><li><p>Define a function with <code>return</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cube</span><span class="params">(<span class="keyword">double</span> figure)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result;</span><br><span class="line">    result = figure*figure*figure;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> value = <span class="number">3.14</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;cube(value)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>return</code> is very similar to Python. The function will be terminated when <code>return</code> is executed.</p><p>Don’t forget to put a <code>;</code> after the <code>return</code> statement.</p></li></ol><h2 id="13-If-statement"><a href="#13-If-statement" class="headerlink" title="13. If statement"></a>13. If statement</h2><ol><li><p>Allow our program to respond to different conditions。</p></li><li><p><code>if(condition){operation}</code> In other words, if the condition in <code>()</code> is <code>true</code>, codes within <code>{}</code> will run. See the example, below</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> is_male = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(is_male)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hey, this is a boy"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>We can also do logic operators inside <code>()</code>. We have <code>&amp;&amp;</code> for <code>and</code> operator. <code>||</code> for <code>or</code> operator. Example:<code>if(is_male &amp;&amp; is_tall){cout&lt;&lt;&quot;You are both tall and male&quot;&lt;&lt;endl;}</code></p></li><li><p>The basic logic structure in <code>C++</code> is similar to <code>Python</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can also do <code>if</code>, <code>else</code> and <code>else if</code></p></li><li><p>The negation operator in <code>C++</code> is <code>!</code>. Basically, if we have <code>is_tall = true</code>, <code>!is_tall</code> will be <code>false</code>. This basically reverses the answer.</p></li></ol><h2 id="14-More-if-statement-comparison-operators"><a href="#14-More-if-statement-comparison-operators" class="headerlink" title="14. More if statement(comparison operators)"></a>14. More if statement(comparison operators)</h2><ol><li><p>A quick example, see below</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> num1,num2;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please fill in the first number"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; num1;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please fill in the second number"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; num2;</span><br><span class="line">    <span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"The first number is greater which is "</span>&lt;&lt;num1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num1&lt;num2)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"The second number is greater which is "</span>&lt;&lt;num2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num1==num2)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Two numbers are equal, they are both "</span>&lt;&lt;num2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>We have a number of comparison operators: <code>&gt;</code>, <code>&lt;</code>, <code>==</code>, <code>!=</code>. We can mix these comparison operators with logic operators(<code>&amp;&amp;</code>, <code>||</code>).</p></li></ol><h2 id="15-Build-a-more-powerful-calculator"><a href="#15-Build-a-more-powerful-calculator" class="headerlink" title="15. Build a more powerful calculator"></a>15. Build a more powerful calculator</h2><p>The user can fill in two numbers as well as the operator.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> operat;</span><br><span class="line">    <span class="keyword">double</span> num1,num2,result;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please fill in the first number"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num1;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please fill in the operator"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;operat;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please fill in the second number"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num2;</span><br><span class="line">    <span class="keyword">if</span> (operat == <span class="string">'+'</span>)&#123;</span><br><span class="line">        result = num1+num2;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;num1&lt;&lt;operat&lt;&lt;num2&lt;&lt;<span class="string">"="</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(operat == <span class="string">'-'</span>)&#123;</span><br><span class="line">        result = num1-num2;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;num1&lt;&lt;operat&lt;&lt;num2&lt;&lt;<span class="string">"="</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(operat == <span class="string">'*'</span>)&#123;</span><br><span class="line">        result = num1*num2;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;num1&lt;&lt;operat&lt;&lt;num2&lt;&lt;<span class="string">"="</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(operat == <span class="string">'/'</span>)&#123;</span><br><span class="line">        result = num1/num2;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;num1&lt;&lt;operat&lt;&lt;num2&lt;&lt;<span class="string">"="</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Invalid operator input"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-Switch-statements"><a href="#16-Switch-statements" class="headerlink" title="16.  Switch statements"></a>16.  Switch statements</h2><ol><li><p><code>switch</code> statement is a special type of <code>if</code> statement. See the example below.</p></li><li><p>In this example, we want to convert <code>0</code> to Sunday, <code>1</code> to Monday and <code>2</code> to Tuesday etc.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="keyword">int</span> choice)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> day_result;</span><br><span class="line">    <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            day_result = <span class="string">"Sunday"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            day_result = <span class="string">"Monday"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            day_result = <span class="string">"Tuesday"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            day_result = <span class="string">"Wednesday"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            day_result = <span class="string">"Thursday"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            day_result = <span class="string">"Friday"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            day_result = <span class="string">"Saturday"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            day_result = <span class="string">"Invalid input"</span>;</span><br><span class="line">            <span class="keyword">break</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> day_result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> figure;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please fill in the number you wish to convert."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;figure;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;convert(figure)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>switch</code> statement is very useful when we want to compare several values with a variable. </p><p>In the case above, we could compare 1, 2, 3…. to <code>choice</code> variable but it is inefficient. We may write a <code>switch (choice)</code> and <code>case 0:</code> which will be equivalent to <code>choice == 0</code>. </p><p>We need to put a <code>break</code> in each case. Otherwise, if <code>choice == 3</code>, it will enter <code>case 3</code> and keep going into <code>case4</code>, <code>case5</code>, <code>case6</code> and <code>default</code> unless there is a break in any case. We put a <code>break</code> in <code>case 3</code> so it won’t go into the following cases.</p></li></ol><h2 id="17-While-loops"><a href="#17-While-loops" class="headerlink" title="17. While loops"></a>17. While loops</h2><ol><li><p>Basic structure: <code>while(condition){codes}</code></p></li><li><p>Quick demo:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">int</span> index</span>;</span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(index&lt;<span class="number">5</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;index&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        index ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We get <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code> as expected.</p></li><li><p>There is also a loop called <code>do while</code> loop, see the example below</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">int</span> index</span>;</span><br><span class="line">    index = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;index&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        index ++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(index&lt;<span class="number">5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We get <code>6</code> as the answer. Let me explain, it is like the reverse of a <code>while</code> loop. We will run the codes inside<code>do{}</code> first before checking where <code>while()</code> is met. If <code>while</code> is met, it will keep going. If not, it will terminate. That is kinda why we still get <code>6</code> even though <code>index</code> is already greater than <code>5</code>. </p></li></ol><h2 id="18-Guessing-game"><a href="#18-Guessing-game" class="headerlink" title="18. Guessing game"></a>18. Guessing game</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result_figure,choice;</span><br><span class="line">    result_figure = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> chance,max_chance;</span><br><span class="line">    max_chance = <span class="number">5</span>;</span><br><span class="line">    chance = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please guess a number"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;choice;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(choice == result_figure)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Congrats, you win"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"You are wrong"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            chance ++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(chance == max_chance)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"You ran out of chance, lost"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nothin too exciting :-(</p><h2 id="19-For-loops"><a href="#19-For-loops" class="headerlink" title="19. For loops"></a>19. For loops</h2><ol><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>The <code>for</code> loop in <code>c++</code> is a bit different from python. We must pass in three parameters, the first parameter is to define a <code>i</code> or index. The second is to set the condition which will terminate the loop and finally what should be done to <code>i</code> every time we go through one circulation of the loop. We separate these parameters using<code>;</code> .</p><p>There is another way to write the above codes, see below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>One useful thing is to print out elements in an <code>array</code>. See below</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> list_of_nums[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">11</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;list_of_nums[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This basically print out every element in the <code>list_of_nums</code> array.</p></li></ol><h2 id="20-Exponent-function"><a href="#20-Exponent-function" class="headerlink" title="20. Exponent function"></a>20. Exponent function</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result,base,power;</span><br><span class="line">    base =<span class="number">3</span>;</span><br><span class="line">    power =<span class="number">3</span>;</span><br><span class="line">    result =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;power;i++)&#123;</span><br><span class="line">        result*=base;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Only consider positive power factor to simplify.</p><h2 id="21-2d-arrays-amp-nested-loops"><a href="#21-2d-arrays-amp-nested-loops" class="headerlink" title="21. 2d arrays &amp; nested loops"></a>21. 2d arrays &amp; nested loops</h2><ol><li><p>2d arrays: every element in an array is an array like <code>[[1,2,3],[4,5,6],[7,8,9]]</code> in Python.</p></li><li><p>Create a 2d array:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number_grid[<span class="number">3</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When creating a 2d array, we need two <code>[]</code>. The first <code>[]</code> is to define how many arrays do we have in the outside array. The second is two define how many elements do we have in each inside array.</p></li><li><p>We can access any element in a 2d array using <code>cout&lt;&lt;number_grid[row][column]</code></p></li><li><p>Nested loop is superposing <code>for</code> loops. In other words, a <code>for</code> loop in a <code>for</code> loop.</p><p>We can use this technique to return every element in the<code>number_grid</code> array. See below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number_grid[<span class="number">3</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;number_grid[i][j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Basically, putting the other <code>for</code> loop inside the <code>{}</code> of the first <code>for</code> loop.</p></li></ol><h2 id="22-Comments"><a href="#22-Comments" class="headerlink" title="22. Comments"></a>22. Comments</h2><ol><li>We can use <code>//</code> to create one line of comments.</li><li>We can use <code>/*</code> to start multiple lines of comments and <code>*/</code> to terminate.</li></ol><h2 id="23-Pointers-指针"><a href="#23-Pointers-指针" class="headerlink" title="23. Pointers(指针)"></a>23. Pointers(指针)</h2><ol><li><p>A variable is physically stored at a specific <code>address</code> inside the RAM so the computer can keep track.</p></li><li><p>If we want to print out the memory address of a variable, put <code>&amp;</code> before the variable name.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">12</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; &amp;num1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We get <code>0x6dfefc</code> in this case, it is an address in hexadecimal. </p></li><li><p>In <code>c++</code>, we won’t use the phrase memory address, instead, we call it <code>pointer</code>.</p></li><li><p>We can create a variable to store <code>pointer</code>. See the example below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">int</span>* pNum1 = &amp;num1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When creating a pointer variable, we put <code>*p</code> on top of the original variable name. </p><p>Also, the data type of the <code>pointer</code> variable is the same as the original variable data type. Let me explain, <code>&amp;num1</code> is an address so do <code>pNum1</code> while <code>*</code> means <code>dereferencing</code>, <code>*pNum1</code> is actually the value at that <code>pointer</code> address, which is <code>int</code>.</p></li><li><p>We can also <code>dereference</code> a <code>pointer</code> to find the actual value which is stored at that address.</p><ul><li><code>cout&lt;&lt;pNum1&lt;&lt;endl;</code> will print out the <code>pointer</code> address, we get <code>0x6dfef8</code>.</li><li><code>cout&lt;&lt;*pNum1&lt;&lt;endl;</code> will dereference and print out the actual value, we get <code>12</code>.</li></ul></li><li><p>If we do <code>cout&lt;&lt;*&amp;num1&lt;&lt;endl;</code>,  we get 12 as expected.</p><p>If we do <code>cout&lt;&lt;&amp;*&amp;num1&lt;&lt;endl;</code>,  we get <code>0x6dfef8</code> as expected.</p></li></ol><h2 id="24-Classes-amp-Objects-OOP"><a href="#24-Classes-amp-Objects-OOP" class="headerlink" title="24. Classes &amp; Objects(OOP)"></a>24. Classes &amp; Objects(OOP)</h2><ol><li><p>Existing data types in <code>c++</code> are not enough for us to model everything. We can kinda create a new  data type by creating a <code>class</code>.  See the example below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="built_in">string</span> cpu;</span><br><span class="line">    <span class="built_in">string</span> RAM;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Phone my_phone;</span><br><span class="line">    my_phone.name = <span class="string">"iphone x"</span>;</span><br><span class="line">    my_phone.price = <span class="number">6888</span>;</span><br><span class="line">    my_phone.cpu = <span class="string">"A10"</span>;</span><br><span class="line">    my_phone.RAM = <span class="string">"3G"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;my_phone.name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The codes above are similar to using <code>__init__</code> function in <code>Python</code>.</p></li><li><p><code>class</code> is more like a template, we can specify values of its attributes by creating an <code>object</code>. In the code above, we create an <code>object</code> using  <code>Phone my_phone;</code>.</p></li></ol><h2 id="25-Constructor-functions"><a href="#25-Constructor-functions" class="headerlink" title="25. Constructor functions"></a>25. Constructor functions</h2><ol><li><p>A special function which will always be called whenever we create an <code>object</code>. See codes below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    Phone()&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hey, I am creating a new object"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Phone my_phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We are creating a function inside <code>public</code>. The function name MUST be the same as the <code>class</code> name.</p></li><li><p>We may pass parameters into the constructor function. See below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    Phone(<span class="built_in">string</span> phone_name)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hey, I am creating a new object called "</span>&lt;&lt;phone_name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Phone <span class="title">my_phone</span><span class="params">(<span class="string">"Iphone X"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>We are passing in a <code>phone_name</code> parameter, we must specify its value when creating an <code>object</code>. Also similar to <code>__init__</code> function Python. However, we still need to manually specify values of attributes. Constructor functions can save us some efforts. See below</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="built_in">string</span> cpu;</span><br><span class="line">    <span class="built_in">string</span> RAM;</span><br><span class="line">    Phone(<span class="built_in">string</span> Aname,<span class="keyword">int</span> Aprice,<span class="built_in">string</span> Acpu,<span class="built_in">string</span> ARAM)&#123;</span><br><span class="line">        name = Aname;</span><br><span class="line">        price = Aprice;</span><br><span class="line">        cpu = Acpu;</span><br><span class="line">        RAM = ARAM;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Phone <span class="title">my_phone</span><span class="params">(<span class="string">"Iphone x"</span>,<span class="number">6888</span>,<span class="string">"A10"</span>,<span class="string">"3G"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;my_phone.name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>One thing I need to point out, when naming parameter names inside the constructor function. It is a good practice to put an <code>A</code> before the actual name. In Python, we do <code>Phone.name = name</code>. In <code>c++</code>, <code>name = name</code> can be very confusing so instead we do <code>name = Aname</code>. Make it crystal clear.</p></li><li><p>We may also create multiple constructor functions. See below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="built_in">string</span> cpu;</span><br><span class="line">    <span class="built_in">string</span> RAM;</span><br><span class="line">    Phone()&#123;</span><br><span class="line">        name = <span class="string">"No info"</span>;</span><br><span class="line">        price = <span class="number">0</span>;</span><br><span class="line">        cpu = <span class="string">"No info"</span>;</span><br><span class="line">        RAM = <span class="string">"No info"</span></span><br><span class="line">    &#125;</span><br><span class="line">    Phone(<span class="built_in">string</span> Aname,<span class="keyword">int</span> Aprice,<span class="built_in">string</span> Acpu,<span class="built_in">string</span> ARAM)&#123;</span><br><span class="line">        name = Aname;</span><br><span class="line">        price = Aprice;</span><br><span class="line">        cpu = Acpu;</span><br><span class="line">        RAM = ARAM;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Phone no_info_phone;</span><br><span class="line">    <span class="function">Phone <span class="title">my_phone</span><span class="params">(<span class="string">"Iphone x"</span>,<span class="number">6888</span>,<span class="string">"A10"</span>,<span class="string">"3G"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;my_phone.name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;no_info_phone.name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is an excellent way of setting attributes some default values.</p></li></ol><h2 id="26-Object-functions"><a href="#26-Object-functions" class="headerlink" title="26.  Object functions"></a>26.  Object functions</h2><ol><li><p>Functions we can put inside a <code>class</code>. See below.</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="built_in">string</span> cpu;</span><br><span class="line">    <span class="built_in">string</span> RAM;</span><br><span class="line">    Phone(<span class="built_in">string</span> Aname,<span class="keyword">int</span> Aprice,<span class="built_in">string</span> Acpu,<span class="built_in">string</span> ARAM)&#123;</span><br><span class="line">        name = Aname;</span><br><span class="line">        price = Aprice;</span><br><span class="line">        cpu = Acpu;</span><br><span class="line">        RAM = ARAM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">if_expensive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(price&gt;<span class="number">2000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Phone <span class="title">my_phone</span><span class="params">(<span class="string">"Iphone x"</span>,<span class="number">6888</span>,<span class="string">"A10"</span>,<span class="string">"3G"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;my_phone.if_expensive()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><p>We defined an <code>if_expensive</code> function inside the <code>class</code>. We don’t need to pass in <code>self</code> in <code>c++</code>. We can use parameters directly. To be specific, we use <code>price</code> rather than <code>self.price</code> that is kinda why we don’t need to pass in <code>self</code> as a parameter.</p></li></ol><h2 id="27-Getters-amp-Setters"><a href="#27-Getters-amp-Setters" class="headerlink" title="27. Getters &amp; Setters"></a>27. Getters &amp; Setters</h2><ol><li><p>We can use these to control access to attributes. See below.</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="built_in">string</span> cpu;</span><br><span class="line">    <span class="built_in">string</span> RAM;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Phone(<span class="built_in">string</span> Aname,<span class="keyword">int</span> Aprice,<span class="built_in">string</span> Acpu,<span class="built_in">string</span> ARAM)&#123;</span><br><span class="line">        name = Aname;</span><br><span class="line">        price = Aprice;</span><br><span class="line">        cpu = Acpu;</span><br><span class="line">        RAM = ARAM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">name_getter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name_setter</span><span class="params">(<span class="built_in">string</span> Aname)</span></span>&#123;</span><br><span class="line">        name = Aname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Phone <span class="title">my_phone</span><span class="params">(<span class="string">"Iphone x"</span>,<span class="number">6888</span>,<span class="string">"A10"</span>,<span class="string">"3G"</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;my_phone.name_getter()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    my_phone.name_setter(<span class="string">"Iphone 8"</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;my_phone.name_getter()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><p>We can put attributes that we don’t want users to access inside <code>private:</code>. These attributes can only be accessed by functions inside <code>class{}</code> but not elsewhere. </p><p>We may want users to modify certain data  so we define a <code>name_setter()</code>. We may want users to access certain data so we define a <code>name_getter()</code>.</p></li></ol><h2 id="28-Inheritance-继承"><a href="#28-Inheritance-继承" class="headerlink" title="28. Inheritance(继承)"></a>28. Inheritance(继承)</h2><ol><li><p>We can define a new <code>class</code> by extending an existing <code>class</code>. See the example below for a very basic introduction.</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gaming</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"I want to do some gaming"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"I want to spend some time studying"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yuxuan</span> :</span><span class="keyword">public</span> Student&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Yuxuan me;</span><br><span class="line">    me.study();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can inherit <code>public</code> functions, attributes from a <code>superclass</code> into a <code>subclass</code>. These functions can also be overwritten simply by defining it again.</p></li></ol><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>Thanks for reading. These notes are abstract from the <a href="https://www.mikedane.com/programming-languages/c++/" target="_blank" rel="noopener">c++ tutorial</a> created by <a href="https://www.mikedane.com/" target="_blank" rel="noopener">Mike Dane</a>(Giraffe academy). </p><p>I want to express my thanks to Mike. Awesome videos as always. Make sure to check out his website, contents are absolutely amazing.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Basics-information&quot;&gt;&lt;a href=&quot;#1-Basics-information&quot; class=&quot;headerlink&quot; title=&quot;1. Basics information&quot;&gt;&lt;/a&gt;1. Basics information&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;C++ file ends up with &lt;code&gt;.cpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We always need to &lt;code&gt;build&lt;/code&gt; the project first before running it. Build will translate your code to the language that the computer can understand&lt;/li&gt;
&lt;li&gt;MAKE SURE TO PUT &lt;code&gt;;&lt;/code&gt; EVERY TIME YOU FINISH A LINE IN C++.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-Drawing-a-shape&quot;&gt;&lt;a href=&quot;#2-Drawing-a-shape&quot; class=&quot;headerlink&quot; title=&quot;2. Drawing a shape&quot;&gt;&lt;/a&gt;2. Drawing a shape&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You need &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt; and &lt;code&gt;using namespace std&lt;/code&gt; at the beginning of your code. Don’t worry their meanings for now, will explain later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;int main()&lt;/code&gt; is a function in c++, like a container so we can put our codes inside. Codes within the &lt;code&gt;{}&lt;/code&gt; will be executed when we run the program.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="C++" scheme="https://yuxuanliu.tech/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Quick demo for Pymysql</title>
    <link href="https://yuxuanliu.tech/pymysql_demo/"/>
    <id>https://yuxuanliu.tech/pymysql_demo/</id>
    <published>2019-09-08T22:52:07.000Z</published>
    <updated>2019-09-11T15:33:01.882Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><code>import Pymysql</code></p></li><li><p>Search</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(host=<span class="string">"localhost"</span>,user=<span class="string">"root"</span>,passwd=<span class="string">"root"</span>,db=<span class="string">"python_summer"</span>)</span><br><span class="line"><span class="keyword">if</span> conn:</span><br><span class="line">    print(<span class="string">"success"</span>)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line">cur.execute(<span class="string">"SELECT * FROM student"</span>)</span><br><span class="line">all_info = cur.fetchall()</span><br><span class="line">print(all_info)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> all_info:</span><br><span class="line">    print(i[<span class="number">1</span>])</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>Alter</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(host=<span class="string">"localhost"</span>,user=<span class="string">"root"</span>,passwd=<span class="string">"root"</span>,db=<span class="string">"python_summer"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> conn:</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"success"</span>)</span><br><span class="line"></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">num = cur.execute(<span class="string">"UPDATE student SET student.student_name = 'Yuxuan Liu' WHERE student.student_name = 'Oscar'"</span>)</span><br><span class="line"></span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></li><li><p>append</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(host=<span class="string">"localhost"</span>,user=<span class="string">"root"</span>,passwd=<span class="string">"root"</span>,db=<span class="string">"python_summer"</span>)</span><br><span class="line"></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">num = cur.execute(<span class="string">"INSERT INTO student(student_name,student_subject,student_gpa) VALUES('Jim','Engineering','3.93')"</span>)</span><br><span class="line"></span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></li><li><p>delete</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(host=<span class="string">"localhost"</span>,user=<span class="string">"root"</span>,passwd=<span class="string">"root"</span>,db=<span class="string">"python_summer"</span>)</span><br><span class="line"></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">num = cur.execute(<span class="string">"DELETE FROM student WHERE student.student_name = 'Jim'"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">    </span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import Pymysql&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Search&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;conn = pymysql.connect(host=&lt;span class=&quot;string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;,user=&lt;span class=&quot;string&quot;&gt;&quot;root&quot;&lt;/span&gt;,passwd=&lt;span class=&quot;string&quot;&gt;&quot;root&quot;&lt;/span&gt;,db=&lt;span class=&quot;string&quot;&gt;&quot;python_summer&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; conn:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;success&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cur = conn.cursor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cur.execute(&lt;span class=&quot;string&quot;&gt;&quot;SELECT * FROM student&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;all_info = cur.fetchall()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(all_info)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; all_info:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(i[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cur.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conn.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
      <category term="Pymysql" scheme="https://yuxuanliu.tech/tags/Pymysql/"/>
    
      <category term="Mysql" scheme="https://yuxuanliu.tech/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>HTML basics</title>
    <link href="https://yuxuanliu.tech/html_basics/"/>
    <id>https://yuxuanliu.tech/html_basics/</id>
    <published>2019-09-08T16:56:59.000Z</published>
    <updated>2019-09-11T15:33:59.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Tags"><a href="#1-Tags" class="headerlink" title="1. Tags"></a>1. Tags</h2><h3 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure><p>The tag as shown above will tell the internet explorer that we are writing an html file. For this tag, we don’t need an ending tag and for other tags(container tags) we need an ending tag for each starting tag.</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Here are <code>html</code> tags with a starting tag and an ending tag. <code>/</code> is used to denote that it is an ending tag. This is the highest level tag in our website, other contents are under these tags.</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Another type of tags are head tags. We can define the title, description of the document and also other information related to the document. It is like the settings of the html file.</p><a id="more"></a><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>body</code> tags are like the meat and bone of the web page. This is the main part of the website. Normally way longer than the <code>head</code> tags. We can simply put a <code>Hello World</code> inside the body tag and Chrome will print it out for us.</p><h3 id="Indent"><a href="#Indent" class="headerlink" title="Indent"></a>Indent</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Pay extra attention to the indents. <code>head</code> tags and <code>body</code> tags are both inside the <code>html</code> tags. <code>&lt;html&gt;</code> is like the parents while <code>&lt;head&gt;</code>&amp;<code>&lt;body&gt;</code> are like children ish.</p><p><code>&lt;head&gt;</code> and<code>&lt;body&gt;</code> are sort of siblings as they both have one tab indent.</p><h3 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>The title of the website<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Inside <code>head</code> tags, we can put an extra tag called  <code>title</code> tags. We fill the title of the web page in the tags.</p><h2 id="2-More-basic-tags-in-detail"><a href="#2-More-basic-tags-in-detail" class="headerlink" title="2. More basic tags in detail"></a>2. More basic tags in detail</h2><h3 id="Meta"><a href="#Meta" class="headerlink" title="Meta"></a>Meta</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>The title of the website<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> = <span class="string">"description"</span> <span class="attr">content</span> = <span class="string">"This is the description"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This tag will give us some meta data, we can put the type of character encoding inside as above.</p><p>Also, we can put a description inside the meta tag. So when people search our website on Google, this description will be used for reference. <code>meta</code> tags will be introduced in detail in later sections.</p><h3 id="Heading"><a href="#Heading" class="headerlink" title="Heading"></a>Heading</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        The fist header</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        THe second header</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can create a header using the code above, <code>&lt;h1&gt;</code> will give us the largest font size of the header while <code>&lt;h6&gt;</code> will give us the smallest font size available for a header.</p><h3 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Put the contents of the paragraph inside</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can create a paragraph using <code>&lt;p&gt;</code>. All paragraphs will format itself automatically. The order of paragraphs in the html file is simply the order shown on the webpage.</p><h3 id="Bold-加粗"><a href="#Bold-加粗" class="headerlink" title="Bold(加粗)"></a>Bold(加粗)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>The contents you want to bold<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Whenever you want to bold certain contents, simply put it inside <code>&lt;b&gt;</code>.</p><h3 id="Italic-斜体"><a href="#Italic-斜体" class="headerlink" title="Italic(斜体)"></a>Italic(斜体)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>The contents you want to make it italic<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Whenever you want to make certain contents italic, simply put it inside <code>&lt;i&gt;</code>.</p><p>Moreover, we can superpose<code>&lt;p&gt;</code>,<code>&lt;i&gt;</code>&amp;<code>&lt;b&gt;</code>. To make a paragraph both bold and italic.</p><h3 id="Whitespace"><a href="#Whitespace" class="headerlink" title="Whitespace"></a>Whitespace</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        The first paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        The second paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        The first paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        The second paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>html doesn’t read the whitespace between the codes. It only cares about what is in the tags. In other words, the codes above are technically the same.</p><h3 id="Break"><a href="#Break" class="headerlink" title="Break"></a>Break</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If we want a blank line on our web page. We could use the tag <code>&lt;br/&gt;</code> and html will read it. You can make multiple tags to create multiple blank lines.</p><h3 id="Horizontal-line"><a href="#Horizontal-line" class="headerlink" title="Horizontal line"></a>Horizontal line</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can create a horizontal line like this<img src="C:%5CUsers%5COscar%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1565290093941.png" alt="1565290093941">. We may want to use it on our web page to break up contents.</p><h3 id="Big-tag"><a href="#Big-tag" class="headerlink" title="Big tag"></a>Big tag</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        The <span class="tag">&lt;<span class="name">big</span>&gt;</span>first<span class="tag">&lt;/<span class="name">big</span>&gt;</span> paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If we want to make certain contents greater in font size,  using <code>&lt;big&gt;</code> tags is one of the easiest way. Simply put the contents between <code>&lt;big&gt;</code> and <code>&lt;/big&gt;</code>. It is not that significant but will work.</p><p>Things works exactly the same for <code>&lt;small&gt;</code>and <code>&lt;/small&gt;</code>.</p><h3 id="Subscript-下标-amp-superscript-上标"><a href="#Subscript-下标-amp-superscript-上标" class="headerlink" title="Subscript(下标)&amp;superscript(上标)"></a>Subscript(下标)&amp;superscript(上标)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    H<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>O</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If we want to write the chemical formula for water. We need a subscript 2. It can be easily achieved in html by putting 2 between <code>&lt;sub&gt;</code>&amp;<code>&lt;/sub&gt;</code>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    10<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If we want to write 10 square in html. We need a superscript 2. Simply do the very similar thing with <code>&lt;sup&gt;</code>&amp;<code>&lt;/sup&gt;</code>.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>This tags not only works in <code>&lt;body&gt;</code>. It works in all parts of the html file where there is a text.</p><h2 id="3-Comments"><a href="#3-Comments" class="headerlink" title="3. Comments"></a>3. Comments</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Put your </span></span><br><span class="line"><span class="comment">comments inside  --&gt;</span></span><br></pre></td></tr></table></figure><p>Everything within <code>&lt;!--</code> <code>--&gt;</code>is comments and it may take up multiple lines.</p><p>Very similar to other programming languages, it’s like a little note and can be ignored.</p><h2 id="4-Style-and-colors"><a href="#4-Style-and-colors" class="headerlink" title="4. Style and colors"></a>4. Style and colors</h2><p>This is a very basic introduction of CSS(Cascading style sheets) which is used for styling. There is a separate course just for CSS</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"color: blue"</span>&gt;</span></span><br><span class="line">        The fist paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can  pass some attributes to  <code>&lt;p&gt;</code> tags. Here, we are passing a style attribute and set the text color to blue.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"color: blue;backgroung-color: red"</span>&gt;</span></span><br><span class="line">        The fist paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can also set the background color to red using the code above.</p><p>These attributes also work for other tags like <code>&lt;h1&gt;</code>, even<code>&lt;body&gt;</code> tags work.</p><h2 id="5-Formatting-the-website"><a href="#5-Formatting-the-website" class="headerlink" title="5. Formatting the website"></a>5. Formatting the website</h2><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Most web pages will have three sections which are headers(页眉), main and footer(页脚). Html has various tags for creating these sections as shown in the code above.</p><p>Some extra things, using <code>&lt;nav&gt;</code> tags we could create a navigation table and it’s normally in the <code>&lt;header&gt;</code> part of the webpage</p><p>We can also create an article(like the ones in a blog) using <code>&lt;article&gt;</code>  tags and they are normally in the <code>&lt;main&gt;</code> part of the webpage.</p><h3 id="Section"><a href="#Section" class="headerlink" title="Section"></a>Section</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;section&gt;</code> tags often come with <code>&lt;article&gt;</code> tags as they make the web page well-structured.</p><p>Of course, an <code>&lt;article&gt;</code> can contain multiple <code>&lt;section&gt;</code>.</p><h3 id="Aside"><a href="#Aside" class="headerlink" title="Aside"></a>Aside</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You can put something that is not directly related to the core contents in the <code>&lt;aside&gt;</code> tags. A good example is advertisements on web pages.</p><h3 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h3><p>To be honest, all those tags are not necessary, you may create a fabulous website without these structural tags but they can make your website extremely organized and improve the readability of your code. Also, this kind of neat structure allows search engines to figure out what is inside easily.</p><h2 id="6-Links-超链接"><a href="#6-Links-超链接" class="headerlink" title="6. Links(超链接)"></a>6. Links(超链接)</h2><p>Links are used in html to link your website to other websites, other parts of your website or jpg, pdf etc.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"https://www.google.com"</span>&gt;</span>Text shown for this link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>By using  <code>&lt;a&gt;</code> tags we can create a link to a different website. Simply, put the website url inside the <code>href</code>attribute and put the text you wish to show between <code>&lt;a&gt;</code>&amp;<code>&lt;/a&gt;</code>.</p><p>Attention, the code above will navigate users to the url directly so they leave your website.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"https://google.com"</span> <span class="attr">target</span> = <span class="string">"_blank"</span>&gt;</span>Text shown for url<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If we want user to open a new web page for this link, we could add an extra attribute  <code>target = &quot;_blank&quot;</code> inside  <code>&lt;a&gt;</code>tags.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"relative local address"</span>&gt;</span>another page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If we want to link to a different pages of our website. We can simply set the <code>href</code> attribute equal to the relative local address(It must be the relative address, the absolute address won’t work) of our html file. This can automatically navigate to this file. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"address of picture"</span>&gt;</span>picture<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If we want to link to a picture in your computer, it works the same, simply put the relative address of the picture inside the <code>href</code> attribute.</p><h2 id="7-Images"><a href="#7-Images" class="headerlink" title="7.Images"></a>7.Images</h2><h3 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"url of the image"</span> <span class="attr">alt</span> = <span class="string">"text to show if the in scr image is not available"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>scr</code> attribute stores the source of the picture. <code>&lt;alt&gt;</code> attribute is more like a backup, it is some text that will be shown when the picture in <code>scr</code> is no longer available. It is always a good practice to write a <code>&lt;alt&gt;</code>.</p><p>Besides, we don’t need an end tag for  <code>&lt;img</code> simply do <code>/&gt;</code> when you finish.</p><p>Very similar to links, we can do relative address of the picture instead of the url.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span> = <span class="string">"100"</span> <span class="attr">height</span> = <span class="string">"50"</span> <span class="attr">src</span>=<span class="string">"url of the image"</span> <span class="attr">alt</span> = <span class="string">"text"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>We could alter dimensions of the image by passing in <code>width</code> &amp;<code>height</code>attributes.  The unit we use here are pixels(像素).   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span> = <span class="string">"100"</span> <span class="attr">src</span>=<span class="string">"url of the image"</span> <span class="attr">alt</span> = <span class="string">"text"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Instead of setting both height of width, we could set only one attribute of those. HTML will set the other value automatically to keep the aspect ratio(长宽比) unchanged.</p><h3 id="Example-Set-an-image-as-a-link"><a href="#Example-Set-an-image-as-a-link" class="headerlink" title="Example: Set an image as a link"></a>Example: Set an image as a link</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"https://www.google.com"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span> = <span class="string">"100"</span> <span class="attr">src</span>=<span class="string">"url of the image"</span> <span class="attr">alt</span> = <span class="string">"text"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The code above is an example of setting an image also as a link. This trick also works for other tags like<code>&lt;h1&gt;</code> etc.</p><h2 id="8-Videos-amp-YouTube"><a href="#8-Videos-amp-YouTube" class="headerlink" title="8. Videos &amp; YouTube"></a>8. Videos &amp; YouTube</h2><h3 id="Basics-1"><a href="#Basics-1" class="headerlink" title="Basics"></a>Basics</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span> =<span class="string">"relative address "</span> <span class="attr">controls</span> <span class="attr">width</span> = <span class="string">"100"</span>&gt;</span>Text shows if video can't play<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can add a video to the website using <code>&lt;video&gt;</code>. Very similar to adding a picture we use a relative address and reserved word <code>controls</code> afterwards(very important, otherwise there will be no buttons for us to control the video ). The text between <code>&lt;video&gt;</code> and <code>&lt;/video&gt;</code>will only be shown if the browser can’t play this video.</p><p>In addition, we can control dimensions of the video by passing in <code>width</code> and <code>height</code> attributes. Old tricks as we used it in previous sections already.</p><h3 id="Poster"><a href="#Poster" class="headerlink" title="Poster"></a>Poster</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span> =<span class="string">"relative address"</span> <span class="attr">controls</span> <span class="attr">poster</span> = <span class="string">"relative address"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Instead of showing the first scene of the video as the poster, we could DIY our poster. Simply set an extra attribute called <code>poster</code> and pass in the relative address of our poster.</p><h3 id="Auto-play-amp-loop-自动重复播放"><a href="#Auto-play-amp-loop-自动重复播放" class="headerlink" title="Auto play &amp; loop(自动重复播放)"></a>Auto play &amp; loop(自动重复播放)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span> =<span class="string">"relative address"</span> <span class="attr">controls</span> <span class="attr">loop</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Simply pass in extra reserved words <code>autoplay</code> and <code>loop</code>. Easy peasy, lemon squeasy!</p><h3 id="YouTube-videos"><a href="#YouTube-videos" class="headerlink" title="YouTube videos"></a>YouTube videos</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">"560"</span> <span class="attr">height</span>=<span class="string">"315"</span> <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/8JnfIa84TnU"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">allow</span>=<span class="string">"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Click the <code>share</code> button of the YouTube video and choose <code>Embed</code>. This will give us some<code>&lt;iframe&gt;</code> code. We can use them to add YouTube videos to our website. Don’t worry too much about<code>&lt;iframe&gt;</code> for now. This will also give you the YouTube control panel which is awesome.</p><h2 id="9-Lists"><a href="#9-Lists" class="headerlink" title="9. Lists"></a>9. Lists</h2><h3 id="Unordered-list"><a href="#Unordered-list" class="headerlink" title="Unordered list"></a>Unordered list</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"apple.com"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Pear<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We could create an unordered list by using the <code>&lt;ul&gt;</code>tags. The <code>&lt;ul&gt;</code> tags act as a container and we can put each list item inside tags <code>&lt;li&gt;</code> .  Different types of data can be put inside one unordered list. See the Apple example, we actually put a link inside the list along with some texts.</p><p>As we are creating an unordered list, each item starts with a black dot.</p><h3 id="Ordered-list"><a href="#Ordered-list" class="headerlink" title="Ordered list"></a>Ordered list</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"apple.com"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Pear<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>An ordered list actually works almost the same, except we got serial numbers at the start of each item instead of black dots. </p><h3 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span> = <span class="string">"a"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>bacon<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can change the style of the ordered list. Simply input an extra attribute called<code>type</code>. Its value can be <code>&quot;a&quot;</code>so we got a,b,c ….. It may also be <code>&quot;A&quot;</code> so we got A,B,C …… Apart from those, we can have Roman numerals(I,II,III,IV….) by inputting <code>&quot;I&quot;</code>  </p><h2 id="Cascade-lists"><a href="#Cascade-lists" class="headerlink" title="Cascade lists"></a>Cascade lists</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>school<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>uni<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can have lists in a list(cascade). See the example above, we have two unordered lists inside an ordered list.</p><h2 id="10-Table"><a href="#10-Table" class="headerlink" title="10. Table"></a>10. Table</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>The title of the table<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Title_1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Title_2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Title_3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>one<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>two<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>three<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We initialize tables in html using <code>&lt;table&gt;</code>tags. <code>&lt;tr&gt;</code> tags are placed inside to act as a row container. For elements in a row, we put every of them inside<code>&lt;td&gt;</code>tags.</p><p>Here we got three elements in a row. If we want more rows or more elements, simply add more <code>&lt;tr&gt;</code>&amp;<code>&lt;td&gt;</code>.</p><p>For creating table headers, it works similarly, just use <code>&lt;th&gt;</code> instead of <code>&lt;td&gt;</code>.</p><p>One more thing, we can create a caption(title) for the table using<code>&lt;caption&gt;</code>tags at the very top.</p><h2 id="11-Containers-in-HTML-div-span"><a href="#11-Containers-in-HTML-div-span" class="headerlink" title="11. Containers in HTML(div,span)"></a>11. Containers in HTML(div,span)</h2><h3 id="Basics-2"><a href="#Basics-2" class="headerlink" title="Basics"></a>Basics</h3><p>It is a good habit to put your HTML code inside containers. One reason is that in the future we will use CSS to formatting your web page. It makes CSS code really easy if your HTML codes are well structured in containers. <code>&lt;div&gt;</code> and <code>&lt;span&gt;</code> are two popular containers.</p><h3 id="Types-of-elements"><a href="#Types-of-elements" class="headerlink" title="Types of elements"></a>Types of elements</h3><p>There are basically two types of elements in HTML. The first type is called the block elements. They will occupy the entire width of the page. The other one is called inline elements. They will only occupy the space they actually need.  See the example below.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"google.com"</span>&gt;</span>link1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"apple.com"</span>&gt;</span>link2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Link1 and link2 are clearly inline elements. As neither of them takes up the entire lines, they are actually sitting beside(in the same line with) each other.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Paragraph 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Paragraph 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Paragraphs here are clearly block elements. There is enough space after paragraph 1 for paragraph 2. However, these two paragraphs don’t sit beside each other. Instead, paragraph 2 switch to a different line.</p><h3 id="lt-span-gt"><a href="#lt-span-gt" class="headerlink" title="&lt;span&gt;"></a><code>&lt;span&gt;</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>The fist span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>The second span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;span&gt;</code> tags are inline elements. The contents inside are able to sit beside each other.</p><h3 id="lt-div-gt"><a href="#lt-div-gt" class="headerlink" title="&lt;div&gt;"></a><code>&lt;div&gt;</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    The fist div</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    The second div</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;div&gt;</code> tags are block elements. Either of them occupies their own line. They can’t sit beside each other.</p><h3 id="Summary-2"><a href="#Summary-2" class="headerlink" title="Summary"></a>Summary</h3><p><code>&lt;div&gt;</code>  is a block element.</p><p> <code>&lt;span&gt;</code> is a inline element. More popular than<code>&lt;div&gt;</code>.</p><h2 id="12-Input-tags"><a href="#12-Input-tags" class="headerlink" title="12. Input tags"></a>12. Input tags</h2><h3 id="Text-box"><a href="#Text-box" class="headerlink" title="Text box"></a>Text box</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span> = <span class="string">"DPOefault text"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We are using a single <code>&lt;input&gt;</code> tag in html. We need to pass in a <code>type</code> attribute. The code above will generate a text box for user to type in.</p><p>We can set default text for the text box by passing in a <code>value</code> attribute and set it equal to the text we want to show.</p><h3 id="Password-box"><a href="#Password-box" class="headerlink" title="Password box"></a>Password box</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Here we are creating a text box for password. This text box will automatically hide the user inputs.</p><h3 id="Textarea"><a href="#Textarea" class="headerlink" title="Textarea"></a>Textarea</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span> = <span class="string">"10"</span> <span class="attr">cols</span>=<span class="string">"3"</span>&gt;</span>Default text<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>It is simply a bigger block where users can input some text. We can control its dimension by setting <code>rows</code> and <code>cols</code> attributes.</p><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"date"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The will create a box where users can select a certain date.</p><h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"range"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This will produce a slider.</p><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"file"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This will create a button for user to choose file. The file explorer will shown up if an user click the button.</p><h3 id="Checkbox"><a href="#Checkbox" class="headerlink" title="Checkbox"></a>Checkbox</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"checkbox"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A tiny box, user a click it to tick the box. We could tick as many checkboxes as we want.</p><h3 id="Radio-button"><a href="#Radio-button" class="headerlink" title="Radio button"></a>Radio button</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span> =<span class="string">"Oscar"</span> <span class="attr">type</span> = <span class="string">"radio"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span> = <span class="string">"Oscar"</span> <span class="attr">type</span> = <span class="string">"radio"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span> = <span class="string">"Oscar"</span> <span class="attr">type</span> = <span class="string">"radio"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Radio buttons are kinda similar to checkbox. The biggest difference is that we can only tick one of the radio buttons with the same <code>name</code> attribute.</p><p>There are so many types of inputs. I am only listing a number of them, there is a web page for references. Make sure to check it out <a href="https://www.w3schools.com/tags/tag_input.asp&gt;" target="_blank" rel="noopener">https://www.w3schools.com/tags/tag_input.asp&gt;</a>.</p><h2 id="13-iFrame"><a href="#13-iFrame" class="headerlink" title="13. iFrame"></a>13. iFrame</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">scr</span> = <span class="string">"www.mikedane.com"</span> <span class="attr">width</span> = <span class="string">"1000"</span> <span class="attr">height</span> =<span class="string">"800"</span>&gt;</span></span><br><span class="line">    The text will be shown if iframe is not working    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>By using the <code>&lt;iframe&gt;</code> tags, we could display the website in the <code>scr</code> attribute on your website(kinda like enbedded someone else’s website on yours).</p><p>The default size for<code>&lt;iframe&gt;</code> is tiny, we can change its dimensions by passing in <code>width</code> &amp;<code>height</code> attributes similar to before.</p><p>One of the biggest problem for <code>iframe</code> is that many big websites(amazon.com etc) have settings preventing other developers to iframe their websites so don’t be too surprised if <code>iframe</code> is not working!</p><h2 id="14-Meta-tags"><a href="#14-Meta-tags" class="headerlink" title="14. Meta tags"></a>14. Meta tags</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> = <span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"Your description"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> = <span class="string">"author"</span> <span class="attr">content</span> = <span class="string">"Name of the author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> = <span class="string">"keywords"</span> <span class="attr">content</span> = <span class="string">"HTML, Blog, what not"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> = <span class="string">"viewport"</span> <span class="attr">content</span> =<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;meta&gt;</code>tags are in the <code>&lt;head&gt;</code> . They define some key information of your web page.</p><p><code>charset</code> defines how your words are encoded. </p><p>For the other<code>&lt;meta&gt;</code> tags, there are two attributes, the <code>name</code> will tell html what types of <code>meta</code> tags you are defining and <code>content</code> is actually the content inside your <code>meta</code> tags.</p><p><code>description</code> gives a short description of your website to help search engines. Normally less than 160 characters. If too long, your website can be disadvantaged in terms of priority in search engine</p><p><code>author</code> tells the author of the web page</p><p><code>keywords</code> set several keywords to help search engines, are normally ignored these days but still a good practice to fill in.</p><p><code>viewport</code> how your website is displayed on different devices like pc, mobile, ipad etc. It can get really complicated, for now just keep in mind using the following statement:                           </p><p><code>content =&quot;width=device-width, initial-scale=1.0&quot;</code> before you become an experienced developer.</p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>Thanks for reading. These notes are abstract from the <a href="https://www.mikedane.com/web-development/html/" target="_blank" rel="noopener">HTML tutorial videos</a> created by <a href="https://www.mikedane.com/" target="_blank" rel="noopener">Mike Dane</a>(Giraffe academy).</p><p>I want to express my thanks to Mike. Awesome videos as always. Make sure to check out his website, contents are absolutely amazing.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Tags&quot;&gt;&lt;a href=&quot;#1-Tags&quot; class=&quot;headerlink&quot; title=&quot;1. Tags&quot;&gt;&lt;/a&gt;1. Tags&lt;/h2&gt;&lt;h3 id=&quot;DOCTYPE&quot;&gt;&lt;a href=&quot;#DOCTYPE&quot; class=&quot;headerlink&quot; title=&quot;DOCTYPE&quot;&gt;&lt;/a&gt;DOCTYPE&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The tag as shown above will tell the internet explorer that we are writing an html file. For this tag, we don’t need an ending tag and for other tags(container tags) we need an ending tag for each starting tag.&lt;/p&gt;
&lt;h3 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Here are &lt;code&gt;html&lt;/code&gt; tags with a starting tag and an ending tag. &lt;code&gt;/&lt;/code&gt; is used to denote that it is an ending tag. This is the highest level tag in our website, other contents are under these tags.&lt;/p&gt;
&lt;h3 id=&quot;head&quot;&gt;&lt;a href=&quot;#head&quot; class=&quot;headerlink&quot; title=&quot;head&quot;&gt;&lt;/a&gt;head&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Another type of tags are head tags. We can define the title, description of the document and also other information related to the document. It is like the settings of the html file.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="HTML" scheme="https://yuxuanliu.tech/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Python revision notes</title>
    <link href="https://yuxuanliu.tech/python_revision/"/>
    <id>https://yuxuanliu.tech/python_revision/</id>
    <published>2019-09-08T14:40:42.000Z</published>
    <updated>2019-09-12T10:26:27.368Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Switch data in two variables: <code>a,b = b,a</code> This is something unique to Python.</p></li><li><p><code>print(variable, end = &quot;&quot;)</code> If we don’t want to skip a line after printing <code>variable</code>. The default value for <code>end</code> attribute is <code>\n</code>(skip a line).</p></li><li><p>When we use comparison operators in Python(<code>&gt;</code>, <code>&lt;</code> etc.). It will always return a <code>Boolean value</code>(<code>True</code>, <code>False</code>)</p></li><li><p><code>print(1==True)</code>;<code>print(0==False)</code> These two statements will always return <code>True</code>. As in Python <code>1</code> also means <code>True</code> and <code>0</code> also means <code>False</code>.</p></li><li><p><code>print(0==0.0)</code> will also return <code>True</code> even though they are different data types.</p></li><li><p>There is a special operation symbol which is <code>in</code>. For example, <code>print(“a” in “abc”)</code>. This will return <code>True</code>.</p></li><li><p>3 types of logic order in Python: plain sequence(顺序), loop(循环) and branches(分支).</p></li><li><p><code>while True</code> will produce an infinite loop.</p><a id="more"></a></li><li><p><code>break</code> will terminate one layer of the loop.</p></li><li><p><code>continue</code> will only skip one element in a loop and don’t affect the remainder elements.</p></li><li><p><code>range</code> function can take 3 parameters. For example, <code>range(1,10,2)</code> This means a series from 1 to 9 with <code>a step of 2</code>. i.e.1,3,5,7,9</p></li><li><p><code>list1.pop(index)</code> removes the element at the index position of the list. If we use <code>list1.pop()</code> and leave it black in brackets. It will drop the last element in the list.</p></li><li><p><code>print(&quot;111&quot; in list1)</code> If there is a <code>111</code> element in <code>list1</code>. It will return <code>True</code>, otherwise, it will return <code>False</code>.</p></li><li><p>If we want to drop a list, use <code>del list1</code>. If we <code>print(list1)</code> afterwards, it will return an error.</p></li><li><p>If we want to drop all elements in a list, use <code>list1.clear()</code>. If we <code>print(list1)</code> afterwards, it will return <code>[]</code></p></li><li><p><code>list1.index(element,start,end)</code> passing in <code>start</code> and <code>end</code>, Python will search <code>element</code> within that range. If <code>element</code> isn’t in the range, an error will show up.</p><p>We could use <code>list1.find(element,start,end)</code>. If <code>element</code> is also not in that range, Python will return <code>-1</code> rather than an error.</p></li><li><p>There are two types of functions in Python. The first type <code>.sort()</code>, for example, it starts with a <code>.</code> It means that this function links to the data type before <code>.</code></p></li></ol><p>The second type <code>sorted()</code>, for example, all these types of function are Python’s internal function, they do not related to the input data type. </p><ol start="18"><li><p>Enumerate() function：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [“spring”,”summer”,”autumn”,”winter”]</span><br><span class="line"><span class="keyword">for</span> index, content <span class="keyword">in</span> enumerate(list1):</span><br><span class="line">print(index,content)</span><br></pre></td></tr></table></figure></li></ol><p>This will return:</p><p><code>0</code> <code>&quot;spring&quot;</code></p><p><code>1</code> <code>&quot;summer&quot;</code></p><p><code>2</code> <code>&quot;autumn&quot;</code></p><p><code>3</code> <code>&quot;winter&quot;</code>     </p><p>This function are fairly convenient when tackling algorithm questions.</p><ol start="19"><li><p>Create a list with ten <code>0</code> elements : <code>list1 = [0]*10</code> </p><p>This is unique to Python as well</p></li><li><p>Create a 3*3 matrix filled with <code>0</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range <span class="number">3</span>:</span><br><span class="line">    list1.append([<span class="number">0</span>]*<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li><li><p>List comprehension(列表推导)：</p><ul><li>numerical: </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print([i*<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> list1])</span><br></pre></td></tr></table></figure><p>This will return <code>[3,6,9]</code></p><ul><li><p>Logical:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">print([i <span class="keyword">for</span> i <span class="keyword">in</span> list1 <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>This will only print out even numbers so we get <code>[2,4]</code> as expected</p></li><li><p>Mixing numerical and logical</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">print([i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> list1 <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>This will return even numbers in the list and multiply their values by 2 so we got <code>[4,8]</code> as expected.</p></li></ul></li><li><p>Elements within <code>dictionary</code> have no order in Python. All <code>keys</code> need to be unique, if we have two <code>values</code> with the same <code>key</code>, the <code>value</code> which shows up later will overwrite the former. </p></li><li><p><code>dictionary.keys()</code> will collect all keys and return a <code>list</code>.</p></li><li><p><code>dictionary.values()</code> will collect all values and return a <code>list</code>.</p></li><li><p><code>dictionary.items()</code> This will collect both keys and values made up tuples in a list. We normally use it in the following format:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dictionary = &#123;<span class="number">1</span>:<span class="string">"one"</span>,<span class="number">2</span>:<span class="string">"two"</span>,<span class="number">3</span>:<span class="string">"three"</span>,<span class="number">4</span>:<span class="string">"four"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> dictionary.items():</span><br><span class="line">    print(i,j)</span><br></pre></td></tr></table></figure><p>This will return: <code>1</code>, <code>&quot;one&quot;</code>, <code>2</code>, <code>&quot;two&quot;</code>, <code>3</code>, <code>&quot;three&quot;</code>, <code>4</code>, <code>&quot;four&quot;</code> </p></li><li><p>Drop an element from a dictionary: <code>dictionary.pop(key)</code> The value with the key in the bracket will be removed</p></li><li><p><code>.append()</code> has a low algorithm complexity while <code>.insert()</code> and  <code>.index()</code> have high algorithm complexity</p></li><li><p>List slicing:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [‘aaa’, ‘bbb’, ‘ccc’, ‘ddd’, ‘eee’]</span><br><span class="line">print(list1[<span class="number">1</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>This will give <code>&quot;bbb&quot;</code> &amp; <code>&quot;ccc&quot;</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [‘aaa’, ‘bbb’, ‘ccc’, ‘ddd’, ‘eee’]</span><br><span class="line">print(list1[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><p>This will give <code>&quot;bbb&quot;</code>, <code>&quot;ccc&quot;</code>, <code>&quot;ddd&quot;</code> &amp; <code>&quot;eee&quot;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [‘aaa’, ‘bbb’, ‘ccc’, ‘ddd’, ‘eee’]</span><br><span class="line">print(list1[:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>This will give <code>&quot;aaa&quot;</code>, <code>&quot;bbb&quot;</code> &amp; <code>&quot;ccc&quot;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [‘aaa’, ‘bbb’, ‘ccc’, ‘ddd’, ‘eee’]</span><br><span class="line">print(list1[:<span class="number">-1</span>])</span><br><span class="line">print(list1[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure></li></ol><p>Results returned from the two <code>print</code> operations are the same which will both give  <code>&quot;aaa&quot;</code>, <code>&quot;bbb&quot;</code>, <code>&quot;ccc&quot;</code> &amp; <code>&quot;ddd&quot;</code></p><p>We may pass in three parameters when slicing. <code>list1[start,end,step]</code></p><p>A good and smart example: <code>print(list1[::-1])</code>    This operation will reverse the list and is equivalent to <code>.reverse()</code>.</p><p>Let me quickly explain: The first <code>:</code> means starting from the end(right), <code>-1</code> means moving to the left by one element every time. The second <code>:</code> means finishing at the end but won’t include the last element. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list2 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">print(list2[<span class="number">0</span>:len(list2):<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>This will give all even numbers: <code>&quot;0&quot;</code>, <code>&quot;2&quot;</code>, <code>&quot;4&quot;</code>, <code>&quot;6&quot;</code>, <code>&quot;8&quot;</code> &amp; <code>&quot;10&quot;</code></p><ol start="29"><li><p>When we input a negative <code>step</code> parameter, we must make sure the value of <code>start</code> parameter is greater than <code>end</code> parameter otherwise Python will return a <code>[]</code>. Let’s say <code>list2[-9:-6:-1]</code>, Python will take away 1 from -9 every time and try to achieve -6. Clearly, there is no way to get -6 by taking away 1s from -9 so we get <code>[]</code>.</p><p>In addition, Python don’t think list2[-1] is equivalent to list2[-12] :(</p></li><li><p><code>set</code>(集合): if we write <code>{}</code> in Python, by default, it will be treated as a dictionary.</p></li><li><p>Elements in a <code>set</code> has no order, the order of the elements changed every time we <code>print</code>. Unless, all elements are <code>int</code>, they will be shown in descending order but we still can’t do <code>index</code> operation.</p></li><li><p><code>set1.add()</code> Add an extra element.</p></li><li><p><code>set1.remove(element name)</code> Remove an element by the element name.</p></li><li><p><code>set1.pop()</code> Remove the FIRST element from the set, we CANNOT pass in a index in the bracket.</p></li><li><p>set operations：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">set3 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">print(set1-set2)</span><br></pre></td></tr></table></figure><p>This will give the difference set(差集). In other words, all elements within <code>set1</code> but are not in <code>set2</code>. We get <code>1</code> here as expected.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">set3 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">print(set1|set2)</span><br></pre></td></tr></table></figure><p>This will give the union(合集). We get <code>1</code>, <code>2</code>, <code>3</code> &amp; <code>4</code> here as expected.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">set3 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">print(set1^set2)</span><br></pre></td></tr></table></figure><p>This will give the complementary set(补集). We get <code>1</code> &amp; <code>4</code> here as expected.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">set3 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">print(set1&amp;set2)</span><br></pre></td></tr></table></figure><p>This will give the intersection set(交集). We get <code>2</code> &amp; <code>3</code> here as expected.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">set3 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">print(set1&lt;set2)</span><br></pre></td></tr></table></figure><p>If <code>set1</code> is a subset(子集) of <code>set2</code>, we will get <code>True</code> , otherwise we will get <code>False</code>. we get <code>False</code> here as expected.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">set3 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">print(set1&lt;set3)</span><br></pre></td></tr></table></figure><p>We get a <code>True</code> here as expected.</p><ol start="36"><li><p>Use <code>set1.update(set2)</code> to add all elements in <code>set2</code> into <code>set1</code>.</p></li><li><p>We could give variables in a function default values when defining:<code>def fun(a=3,b):</code></p><p>We can either pass in one variable or two variables when calling the function.</p><p>Criteria: variables with default values must be placed in front of variables without default values.</p></li><li><p>See the example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trial</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">    print(<span class="string">f"<span class="subst">&#123;a&#125;</span>;<span class="subst">&#123;b&#125;</span>;<span class="subst">&#123;c&#125;</span>"</span>)</span><br><span class="line">trial(b=<span class="number">2</span>,a=<span class="number">1</span>,c=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>It is a good practice to passing in values of variables using this method as ORDER is not important in the above case.</p></li><li><p>If we want to pass in multiple values for a parameter, we could add a <code>*</code> before the variable name. See the example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trial</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        print(i)</span><br><span class="line">trial(<span class="number">1</span>,<span class="number">2</span>,<span class="string">"Oscar"</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>It is equivalent to passing in a tuple<code>(1,2,&quot;Oscar&quot;,[1,2,3])</code> to <code>args</code>.</p></li><li><p>If we want the values we passed in for a parameter to be treated as a <code>dictionary</code>, we could add a <code>**</code> before the variable name. See the example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trial</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        print(i)</span><br><span class="line">        print(j)</span><br><span class="line">trial(name = <span class="string">"oscar"</span>, age = <span class="number">19</span>, gender = <span class="string">"M"</span>)</span><br></pre></td></tr></table></figure><p>This is equivalently to passing <code>{&quot;name&quot;:&quot;oscar&quot;,&quot;age&quot;:19,&quot;gender&quot;:&quot;M&quot;}</code> to <code>kwargs</code>.</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    result = <span class="string">"Hello world"</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">print(type(fun))</span><br><span class="line">print(type(fun()))</span><br></pre></td></tr></table></figure><p>For <code>type(fun)</code>, Python will return <code>&lt;class &#39;function&#39;&gt;</code>. This is because we are printing out the type of the function and of course the answer will be <code>function</code>.</p><p>In terms of <code>type(fun())</code>, we are calling the function and we are actually printing out the type of the returned value i.e. type of <code>result</code> variable. That’s why we get <code>&lt;class &#39;str&#39;&gt;</code> </p></li><li><p>Decorator(装饰器): add some codes to a function without changing the source code of the function. There multiple ways of achieving this.</p><ol><li><p>Define a new function and call the old function inside the new function</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    greet_user()</span><br><span class="line">    print(<span class="string">"world!"</span>)</span><br></pre></td></tr></table></figure></li><li><p>Define a new function and pass in the old function as a parameter</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_greet_user</span><span class="params">(func)</span>:</span></span><br><span class="line">    func()</span><br><span class="line">    print(<span class="string">"world"</span>)</span><br></pre></td></tr></table></figure><p>We need to be crystal clear that we are passing in the old function as a parameter so there is no bracket. The function is called inside the new function.</p></li><li><p>Define an <code>inner</code> function inside the new function so the user has a feeling we are still using <code>greet_user</code> which is the old function. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello"</span>)   <span class="comment">#define the old function</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorate_show</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">"world"</span>)</span><br><span class="line">        <span class="comment">#define the inner function that will print "Hello world"</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="comment">#The decorate_show function will return the inner funciton.</span></span><br><span class="line">    </span><br><span class="line">greet_user = decorate_show(greet_user)  <span class="comment">#call decorate_show</span></span><br><span class="line"><span class="comment">#greet_user variable is now equal to the inner with old greet_user as func.</span></span><br><span class="line">greet_user()   <span class="comment">#Call the new greet_user</span></span><br></pre></td></tr></table></figure><p>If we need parameters for <code>func()</code>, make sure to pass it in at <code>def inner(A,B):</code>. This is basically the theory behind the <code>decorator</code></p></li><li><p>The final version, it is actually using the same theory as the third method but looks nicer.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorate_show</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">"world"</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorate_show</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">great_user</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello"</span>)</span><br></pre></td></tr></table></figure><p>We simply put <code>@decorate_function_name</code> at the line above the function we wish to decorate. To make it easier to read, we can simply replace <code>func()</code> by <code>great_user()</code>. </p><p>This is really significant as we haven’t touched the source code of the original function. Besides, we can add extra codes dynamically, no need to write everything at the start.</p></li></ol></li><li><p>If we want to ignore escape characters(转义字符), we can put <code>r</code> before the <code>&quot;</code> of a string. See the example: <code>print(r”Hello\nworld”)</code> These characters will be print out directly, no new line will be created.</p></li><li><p><code>str1.lower()</code> convert every character in a string to the lower case.</p><p><code>str1.upper()</code> convert every character in a string to the upper case.</p></li><li><p><code>str1.title()</code> convert the initial character of EVERY WORD in a <code>string</code> to the upper case.</p><p><code>str1.capitalize()</code> convert the initial character of the FIRST WORD in a string to the upper case.</p></li><li><p><code>print(str1.center(20, “*”))</code> This means put <code>str1</code> in the middle. If its length is shorter than 20 characters, <code>*</code> will be used to fill the remainder. </p><p>Similarly, we have <code>str1.ljust(20, “*”)</code> and <code>str1.rjust(20, “*”)</code>. The difference is where <code>str1</code> will be placed(left, right or middle) in the new string.</p></li><li><p><code>str1.count(sub,start,end)</code> give how many times <code>sub</code>  appears in <code>str1</code> within the <code>start</code>, <code>end</code> range. By leave <code>start</code> and <code>end</code> parameters away, Python will search the whole string.</p></li><li><p><code>str1.index(sub,start,end)</code> search from the left and return the position where  <code>sub</code> first time appears within the <code>start</code>, <code>end</code> range. If <code>sub</code> isn’t found, an error will appear.</p><p><code>str1.rindex(object,start,end)</code> Do the very similar but start searching from the right.</p></li><li><p><code>str1.endswith(“xxx”)</code> return <code>True</code> if <code>str1</code> ends with “xxx”, otherwise <code>False</code>.   <code>str1.startswith(“xxx”)</code> return <code>True</code> if <code>str1</code> starts with “xxx”, otherwise <code>False</code>.</p></li><li><p><code>str1.isalpha()</code> return <code>True</code> if every character in <code>str1</code> in a letter, otherwise <code>False</code>.  It is a powerful tool for filtration when using with the <code>for</code> loop. See the example below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"a1b2c3d4"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">if</span> i.isalpha() == <span class="literal">True</span>:</span><br><span class="line">        print(i, end = <span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>Similarly, we have <code>str1.isdigit()</code>. It will return <code>True</code>, if every character in <code>str1</code> in a number, otherwise <code>False</code>.</p></li><li><p><code>str1.isspace()</code> return <code>True</code> if every character in <code>str1</code> is a <code>space</code>, otherwise <code>False</code>. May also be used for filtration.</p></li><li><p><code>str1.strip()</code> If <code>str1</code> starts with a <code>space</code>, that <code>space</code> will be removed.</p><p><code>str1.lstrip()</code> If <code>str1</code> ends up with a <code>space</code>, that <code>space</code> will be removed.</p></li><li><p><code>str1.replace(old,new,times)</code> If the <code>old</code> string appears in <code>str1</code>, it will be replaced by <code>new</code>. By default, this operation will keep going until no <code>old</code> string is in <code>str1</code> any more. We may limit the times this operation is called, by passing in a <code>times</code> parameter.</p></li><li><p><code>str1.split(&quot;a&quot;)</code> <code>str1</code> will be separated into two pieces every time there is <code>&quot;a&quot;</code>. See the example,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"bbbacccadddaeee"</span></span><br><span class="line">print(str1.split(<span class="string">"a"</span>))</span><br></pre></td></tr></table></figure><p>This will return <code>[bbb,ccc,ddd,eee]</code></p></li><li><p><code>str1.splitlines()</code>  <code>str1</code> will be separated into two pieces every time there is <code>&quot;\n&quot;</code>.</p></li><li><p><code>list1.join()</code> Every element inside <code>list1</code> will be attached together and make up a <code>string</code></p></li><li><p>If we have a list of values and we want to find its <code>mean</code>, we can use the <code>statistics</code> package.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> statistics <span class="keyword">import</span> mean</span><br><span class="line">print(mean([<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>]))</span><br></pre></td></tr></table></figure></li></ol><p>We can also find median(中位数), mode(众数) and variance(方差) exact the same way just by replacing mean in the statements above.</p><ol start="58"><li><p>If another <code>file2.py</code> file is in the same folder as the <code>file1.py</code> we are currently running. We can use <code>import file2</code> to import it directly. If not we can use either the absolute address or the relative address. </p></li><li><p><code>print(dir(variable_name))</code> We can print out all functions that may be applied to this variable(data type) </p><p>If we do <code>print(dir(package_name))</code>, we can print out all functions that are inside that package.</p></li><li><p><code>pip list</code> show all packages that we have installed</p><p><code>pip install</code> install a  package</p></li></ol><p>​    <code>pip uninstall</code> uninstall a package</p><ol start="61"><li><p><code>print(os.getcwd())</code> give the absolute address of the file we are currently running.</p></li><li><p><code>os.makedirs(“folder name”)</code>  Create a new folder, will return an error if already exists.</p></li><li><p><code>os.removedirs(“Folder name”)</code> Remove an empty folder, will report an error if there is any content inside.</p></li><li><p><code>print(os.listdir())</code> Print all documents in the current folder.</p></li><li><p><code>os.remove(“filename”)</code> Remove a file</p></li><li><p><code>os.chdir(“address”)</code> It is just like the <code>cd</code> operation in the cmd</p></li><li><p><code>os.curdir()</code> return to the folder where current <code>.py</code> file is located.</p></li><li><p>If we <code>.read()</code>, <code>.readlines()</code> or <code>.readline()</code>  a file in <code>a+</code> and <code>w+</code> mode, nothing will be returned. This is because <code>w+</code> will clear the file by default before the read operation. <code>a+</code> will move the cursor to the end of the text to get ready for the appending operation. A way to fix it is by using <code>file.seek(0,0)</code> to move the cursor back to the start of the file.</p></li><li><p>Another method to open a file so we don’t need to close it</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(“filename”, “r”, encoding = ) <span class="keyword">as</span> file:</span><br><span class="line">    content = file.read()</span><br></pre></td></tr></table></figure></li><li><p>Combining two list1 into a dictionary: <code>dict(zip(list_keys,list_values))</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Switch data in two variables: &lt;code&gt;a,b = b,a&lt;/code&gt; This is something unique to Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;print(variable, end = &amp;quot;&amp;quot;)&lt;/code&gt; If we don’t want to skip a line after printing &lt;code&gt;variable&lt;/code&gt;. The default value for &lt;code&gt;end&lt;/code&gt; attribute is &lt;code&gt;\n&lt;/code&gt;(skip a line).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When we use comparison operators in Python(&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt; etc.). It will always return a &lt;code&gt;Boolean value&lt;/code&gt;(&lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;print(1==True)&lt;/code&gt;;&lt;code&gt;print(0==False)&lt;/code&gt; These two statements will always return &lt;code&gt;True&lt;/code&gt;. As in Python &lt;code&gt;1&lt;/code&gt; also means &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; also means &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;print(0==0.0)&lt;/code&gt; will also return &lt;code&gt;True&lt;/code&gt; even though they are different data types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is a special operation symbol which is &lt;code&gt;in&lt;/code&gt;. For example, &lt;code&gt;print(“a” in “abc”)&lt;/code&gt;. This will return &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3 types of logic order in Python: plain sequence(顺序), loop(循环) and branches(分支).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;while True&lt;/code&gt; will produce an infinite loop.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Mysql basics</title>
    <link href="https://yuxuanliu.tech/Mysql_basics/"/>
    <id>https://yuxuanliu.tech/Mysql_basics/</id>
    <published>2019-09-08T12:25:57.000Z</published>
    <updated>2019-09-11T15:34:43.946Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Database(DB): Any collection of related information that can be stored in different ways.</p></li><li><p>Database management system(DBMS): software used to manage data in the database.</p></li><li><p>C.R.U.D: Create Read Update Delete</p></li><li><p>Relational databases(SQL): organize data onto one or more tables similar to Excel.</p></li><li><p>Non-relational databases(no SQL): Everything but not SQL like <code>JSON</code>,<code>XML</code> etc.</p></li><li><p>SQL(Structured Query Language): standard language interacts with DBMS to perform C.R.U.D operations.</p></li><li><p>Database queries: requests made to the DBMS for specific information, in other words, asks the database for specific pieces of information</p></li><li><p>There is always a primary key to a table, each row has its own primary key.</p><a id="more"></a></li><li><p>A row may also have a foreign key which leads to a primary key to a different table. This foreign key will help us link with other tables. A certain row may have multiple foreign keys. A foreign key may also lead to a different row in the same table</p></li><li><p>Composite key: a key made up of multiple columns i.e. multiple attributes. We need composite keys because sometimes one column can’t define a primary key without repeating so we need multiple columns as the key.</p></li><li><p>SQL language is the compound of a series of languages as followed: Data Query Language(DQL), Data Definition Language(DDL), Data Control Language(DCL) and Data Manipulation Language(DML)</p></li><li><p>Queries: a set of instructions given to DBMS to obtain the information you want to retrieve.</p></li><li><p>Data type:  <code>INT</code>: integer; <code>DECIMAL(M,N)</code>: M means the total number of significant digits; N means the number of digits you want to keep after the decimal place; <code>VARCHAR(L)</code>: L means the length of the string; <code>BLOB</code>: binary a large object, a structure can store large amount of binary data; <code>DATE</code>: YYYY-MM-DD; <code>TIMESTAMP</code>: YYYY-MM-DD HH-MM-SS normally used to record time</p></li><li><p>People normally write reserved words in SQL in capital letters such as <code>CREATE TABLE</code></p></li><li><p>Create columns: </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line">student_id INT,</span><br><span class="line">name VARCHAR(20),</span><br><span class="line">major VARCHAR(20),</span><br><span class="line">PRIMARY KEY(student_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>CREATE TABLE</code>: reserved words</p><p><code>student</code>: table name</p><p><code>student_id</code>, <code>name</code>, <code>major</code>: column name</p><p><code>INT</code>,<code>VARCHAR()</code>: datatype</p><p><code>PRIMARY KEY()</code>: reserved words, put the column name inside brackets.</p><p>Make sure to end the line with <code>;</code></p><p><code>DESCRIBE student;</code> This command will give some basic information about the table.</p><ol start="16"><li><p>We can modify the structure of the table after created.</p><p><code>DROP TABLE student;</code>    Delete the whole table <code>student</code></p><p><code>ALTER TABLE student ADD gpa DECIMAL(3,2);</code>   Add an extra column</p><p><code>ALTER TABLE student DROP COLUMN gpa;</code>    Remove a column from the list</p></li></ol><p><code>name VARCHAR(20) NOT NULL</code> When creating a table we may put <code>NOT NULL</code> after the column name so data in this column can’t be <code>NULL</code>. Similarly, we could also put <code>UNIQUE</code>, which means that all data must be unique in that table</p><ol start="17"><li><p>The primary key must be both <code>NOT NULL</code> and <code>UNIQUE</code>.</p></li><li><p><code>major VARCHAR(20) DEFAULT &#39;undecided&#39;</code> We could set a default value to certain columns</p></li><li><p>We could also set the value to be <code>AUTO_INCREMENT</code>, which may be quite useful for the primary key, simply do <code>student_id INT AUTO_INCREMENT</code>.</p></li><li><p>Inserting data:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO student VALUES(1,&quot;Jack&quot;,&quot;Biology&quot;);</span><br></pre></td></tr></table></figure></li></ol><p><code>INSERT</code>: reserved word to put data into the table</p><p><code>INTO</code>: reserved word</p><p><code>student</code>: table name</p><p><code>VALUES()</code>: reserved word, there are three parameters in the bracket. One for each column.</p><p>We may put <code>NULL</code> in the bracket and it is equivalent to not being filled. </p><p><code>SELECT * FROM student</code> This command will print out all data from the table.</p><p><code>INSERT INTO student(student_id, name) VALUES(2,&quot;Kate&quot;);</code></p><p>If we only want to fill in data in two columns rather than all three. We could put a bracket after table name and fill in column names that we wish to fill and leaving the unfilled ones <code>NULL</code>. Unless <code>DEFAULT</code>, <code>AUTO_INCREMENT</code> etc. are used.</p><ol start="21"><li><p><code>&lt;&gt;</code> means not equal in MySQL.</p></li><li><p>Update data:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE student</span><br><span class="line">SET major = &quot;Bio&quot;</span><br><span class="line">WHERE major = &quot;Biology&quot;;</span><br></pre></td></tr></table></figure></li></ol><p><code>UPDATE</code>: reserved word for changing data</p><p><code>SET</code>: reserved word for setting new data</p><p><code>WHERE</code>: reserved word to filter the part of data we want to change</p><p>Similarly, lines below will set gpa to be 4.0 at the row with <code>student_id = 1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE student</span><br><span class="line">SET gpa = 4.0</span><br><span class="line">WHERE student_id = 1;</span><br></pre></td></tr></table></figure><p>For the <code>WHERE</code> command, we can make it more complex by using <code>OR</code>, <code>AND</code> etc statements.</p><p>We can also change multiple columns in one line using <code>SET</code>. See below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE student</span><br><span class="line">SET gpa = 4.0, name = &apos;Oscar&apos;</span><br><span class="line">WHERE student_id = 1;</span><br></pre></td></tr></table></figure><ol start="23"><li><p>Delete data: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM student</span><br><span class="line">WHERE name = &quot;Tom&quot; AND major = &quot;undecided&quot;</span><br></pre></td></tr></table></figure><p>The operation above will delete a certain row according to the <code>WHERE</code> condition. Without <code>WHERE</code>, all rows will be deleted.</p></li><li><p>Basic query:  <code>SELECT * FROM student;</code></p><p>We already know the query above will give us all the data in the table.</p></li></ol><p><code>SELECT</code>: reserved word, tell SQL we want to get some information from the database.</p><p>We can get data from certain column(s) by filling its name after <code>SELECT</code>, see below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT student_name, student_subject FROM student;</span><br></pre></td></tr></table></figure><p>The line below is equivalent to the line above, using <code>student.student_id</code> &amp; <code>student.student_subject</code> but make your language more precise.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT student.student_name,student.student_subject FROM student;</span><br></pre></td></tr></table></figure><p>We may also order the data obtained simply using reserved word <code>ORDER BY</code> + column name.</p><p>By default it is ascending, we can make it descending by adding <code>DESC</code> after the column name.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT student.name, student.major</span><br><span class="line">FROM student</span><br><span class="line">ORDER BY name;</span><br></pre></td></tr></table></figure><p>We could also fill multiple column names after <code>ORDER BY</code>. In the case below, if <code>major</code> is the same, <code>student_id</code> will be used for ranking.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM student</span><br><span class="line">ORDER BY major, student_id;</span><br></pre></td></tr></table></figure><p>If we only want a certain number of results, we can add an extra line <code>LIMIT 2</code> so we will only get the top 2 results in the list.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM student</span><br><span class="line">ORDER BY major, student_id</span><br><span class="line">LIMIT 2;</span><br></pre></td></tr></table></figure><p>Filter operation can be done by using <code>WHERE</code>, similar to the operation used in the update data section. In this case, we only print out student information who is doing Biology</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM student</span><br><span class="line">WHERE major = &quot;Biology&quot;;</span><br></pre></td></tr></table></figure><ol start="25"><li>If we want to add comments in MySQL use <code>--</code> at the start of the line</li><li><code>IN</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM student</span><br><span class="line">WHERE name IN (&quot;Claire&quot;, &quot;Kate&quot;, &quot;Mike&quot;);</span><br></pre></td></tr></table></figure><p>Another thing you can put after <code>WHERE</code> is <code>IN</code> (reserved word). Very similar to Python, which means return all data in the <code>name</code> column which are in the list of <code>[Claire, Kate, Mike]</code>. You can also connect other statements for filtration using <code>AND</code>, <code>OR</code> etc.</p><ol start="27"><li>Creating a foreign key when creating a table:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FOREIGN KEY(column_name) REFERENCES table_name(column_name)</span><br><span class="line">ON DELETE SET NULL;</span><br></pre></td></tr></table></figure><p>For the column we <code>REFERENCES</code> to, it must be the <code>primary key</code>.</p><p>We will always put <code>ON DELETE SET NULL</code> or <code>ON DELETE CASCADE</code> when creating a <code>foreign key</code>, this will make our lives a lot easier and I will explain it a bit later.</p><ol start="28"><li><p>Add foreign key after a table is created:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE employee</span><br><span class="line">ADD FOREIGN KEY(branch_id)</span><br><span class="line">REFERENCES branch(branch_id)</span><br><span class="line">ON DELETE SET NULL;</span><br></pre></td></tr></table></figure></li></ol><p>This is faily commonly used as we can’t reference foreign key to another table before the other table is created first.</p><p>Don’t forget <code>ON DELETE SET NULL</code></p><ol start="29"><li>Set a composite primary key:</li></ol><p>Simply use <code>PRIMARY KEY(column1,column2)</code>when creating a table</p><ol start="30"><li><p>A primary key may also be A foreign key. VERY VERY IMPORTANT!!!!!</p></li><li><p>If we want to set foreign keys reference to a different form. It is very likely that the second form has not been created. If we still set foreign keys, no wonder there will be an error. What we should do is to set elements in the foreign key column to be <code>NULL</code>. Create the second table first, then <code>UPDATE</code>,  <code>SET</code> elements in the foreign key column. It is kinda like a circular procedure.</p><p>当我们向有foreign key的表格中插入内容时 要考虑一个问题， 就是这个foreign key指向的表格的内容很可能还没有被输入 这时就会报错 我们要做的就是把这些foreign key 的值先写成<code>NULL</code> 待指向的表格的内容输入后 再进行UPDATE </p></li></ol><ol start="32"><li><p>We can temporarily change the returned <code>column names</code> by using <code>AS</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT fitst_name AS forename, last_name AS surname</span><br><span class="line">FROM employee;</span><br></pre></td></tr></table></figure><p>Column names are <code>forename</code> &amp; <code>surname</code> now instead of <code>first_name</code> &amp; <code>last_name</code>.</p></li><li><p>If we want to get rid of repeated elements in a column we can use <code>DISTINCT</code>.</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT branch_id FROM employee;</span><br></pre></td></tr></table></figure><ol start="34"><li><p>Internal functions:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(emp_id)</span><br><span class="line">FROM employee;</span><br></pre></td></tr></table></figure></li></ol><p>This <code>COUNT</code> function will count how many elements appeared in the <code>emp_id</code> column and return an <code>INT</code> value. If one of the element is <code>NULL</code>, it won’t be counted as it stands for <code>no value</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(emp_id)</span><br><span class="line">FROM employee</span><br><span class="line">WHERE sex = &quot;F&quot; AND birth_date &gt; &apos;1970-01-01&apos;;</span><br></pre></td></tr></table></figure><p>Various operations can be achieved using <code>COUNT</code> in together with <code>WHERE</code>. The example above can help us find how many female employees are born after 1970-1-1. Be careful, 1970-01- 01 is another datatype: <code>DATE</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary)</span><br><span class="line">From employee</span><br><span class="line">WHERE sex = &quot;M&quot;;</span><br></pre></td></tr></table></figure><p>Another function we may use is <code>AVG</code>, which will return the mean of elements in the column selected. Here, we are finding the mean salary of male employees.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(salary)</span><br><span class="line">FROM employee;</span><br></pre></td></tr></table></figure><p><code>SUM</code> function we give us the numerical sum of elements we selected from the database.</p><ol start="35"><li><p>Aggregation(聚合):</p><p><code>GROUP BY</code> is a powerful tool, we could put a column name afterwards and repeated elements in that column will be treated together as a group.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(sex), sex</span><br><span class="line">FROM employee</span><br><span class="line">GROUP BY sex;</span><br></pre></td></tr></table></figure><p>Here we want to find out the number of male and female employee respectively. <code>GROUP BY</code> is suitable here as it put all elements with <code>sex =&quot;M&quot;</code> together in a group and <code>sex = &quot;F&quot;</code> together in a different group. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(total_sales), emp_id</span><br><span class="line">FROM works_with</span><br><span class="line">GROUP BY emp_id;</span><br></pre></td></tr></table></figure><p>Similarly, we can find the sum of sales of each employee using <code>GROUP BY</code></p></li></ol><ol start="36"><li>Wildcard(通配符): <code>%</code> means any number of characters <code>_</code> means one character. It is similar to  regular expressions in other programming languages(正则表达式). In other words, wildcard means using <code>%</code> and <code>_</code> to describe a general pattern to help us filter result.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM client</span><br><span class="line">WHERE clien_name LIKE &quot;%LLC&quot;</span><br></pre></td></tr></table></figure><p>The example above has a new reserved word <code>LIKE</code>. A statement is followed by, which will describe a general pattern. Here <code>‘%LLC’</code> means there can be any number of words before <code>&quot;LLC&quot;</code> and the word needs to end up with <code>&quot;LLC&quot;</code>. If the statement is satisfied. The result will be returned, otherwise filtered.​    </p><p>Another wildcard example: <code>%Label%</code>. This means the statement is satisfied as long as the <code>VARCHAR</code> contains a subsection <code>&quot;Label&quot;</code> </p><ol start="37"><li>Union: combine several <code>SELECT</code> results together(union columns together). This links two or multiple <code>SELECT</code> statements.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT first_name</span><br><span class="line">FROM employee</span><br><span class="line">UNION</span><br><span class="line">SELECT branch_name</span><br><span class="line">FROM branch;</span><br></pre></td></tr></table></figure><p>Criteria: In order to successfully <code>UNION</code> multiple <code>SELECT</code> statements, each <code>SELECT</code> must have the same number of columns, otherwise there will be an error. We also need the <code>datatype</code> returned from each <code>SELECT</code> to be similar. If they are really different, there are likely to be an error as well.</p><ol start="38"><li><code>JOIN</code>: combine rows from two or more tables based on related columns(foreign keys)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT employee.emp_id, employee.first_name, branch.branch_name</span><br><span class="line">FROM employee</span><br><span class="line">JOIN branch</span><br><span class="line">ON employee.emp_id = branch.mgr_id;</span><br></pre></td></tr></table></figure><p>The example above <code>SELECT</code> columns from different tables.</p><p><code>FROM</code>: reserved words(first table)</p><p><code>JOIN</code>: reserved words(second table)</p><p><code>ON</code>: reserved words, it tells MySQL, on what basis, rows should be joined together.</p><p>In other words, if and only if <code>employee.emp_id</code> = <code>branch.mgr_id</code>, should rows from different tables join together.</p><p>There is a second type called <code>LEFT JOIN</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT employee.emp_id, employee.first_name, branch.branch_name</span><br><span class="line">FROM employee</span><br><span class="line">LEFT JOIN branch</span><br><span class="line">ON employee.emp_id = branch.mgr_id;</span><br></pre></td></tr></table></figure><p>Every row in the FROM <code>employee</code> table will be shown. For the <code>branch.branch_name</code>, it will only join to the left table if <code>ON</code> condition is met, otherwise, its value will be <code>NULL</code>.</p><p>There is also an opposite type of operation, which is <code>RIGHT JOIN</code>. It does exactly the opposite. Each row in the <code>RIGHT JOIN</code> table will be shown and rows in the <code>FROM</code> table will join only if <code>ON</code> condition is met, otherwise, it will be <code>NULL</code></p><ol start="39"><li>Nested enquiry: We can use result from one query to filter data in another query.  See the example below. It is like cascading the result of one enquiry into the other.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT works_with.emp_id</span><br><span class="line">FROM works_with</span><br><span class="line">WHERE works_with.total_sales &gt; 30000;</span><br></pre></td></tr></table></figure><p>Here, we find out employee id of employees whose salary exceeds 30k. What we can do is to put the statements above into another query as followed</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT employee.first_name, employee.last_name</span><br><span class="line">FROM employee</span><br><span class="line">WHERE employee.emp_id IN(</span><br><span class="line">    SELECT works_with.emp_id</span><br><span class="line">FROM works_with</span><br><span class="line">WHERE works_with.total_sales &gt; 30000;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>The part indented return a list of<code>employee_id</code>. <code>WHERE</code> filters ID that is not in the list so we only print out names of employees whose salary exceeds 30K. This is a useful method when handling data in different tables.</p><p> In terms of the indent above, it is not necessary but makes readers easy to read.</p><ol start="40"><li><code>On Delete</code>: how can we delete an element when it is associated with a foreign key.</li></ol><p>We already meet it before, remember when we set foreign key, we put an extra line which is <code>ON DELETE SET NULL</code>/<code>ON DELETE CASCADE</code>. That is what we are going to talk about now.</p><p> <code>ON DELETE SET NULL</code>: means when we delete the primary key where the foreign key may lead to, this foreign key will automatically become <code>NULL</code> so there will be no error.</p><p> <code>ON DELETE CASCADE</code>: will delete the entire row where the foreign key located instead of setting it to <code>NULL</code>.</p><p>When the <code>foreign key</code> is also a <code>primary key</code>, we must use <code>ON DELETE CASCADE</code> because primary key can’t be <code>NULL</code>. Otherwise, we are free to choose between the two.</p><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>Thanks for reading. These notes are abstract from the <a href="https://www.mikedane.com/databases/sql/" target="_blank" rel="noopener">MySQL tutorial</a> created by <a href="https://www.mikedane.com/" target="_blank" rel="noopener">Mike Dane</a>(Giraffe academy). Tables used as the demo in the tutorial can be found <a href="https://www.mikedane.com/databases/sql/company-database.pdf" target="_blank" rel="noopener">here</a>.</p><p>I want to express my thanks to Mike. Awesome videos as always. Make sure to check out his website, contents are absolutely amazing.</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Database(DB): Any collection of related information that can be stored in different ways.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database management system(DBMS): software used to manage data in the database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C.R.U.D: Create Read Update Delete&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Relational databases(SQL): organize data onto one or more tables similar to Excel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Non-relational databases(no SQL): Everything but not SQL like &lt;code&gt;JSON&lt;/code&gt;,&lt;code&gt;XML&lt;/code&gt; etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQL(Structured Query Language): standard language interacts with DBMS to perform C.R.U.D operations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database queries: requests made to the DBMS for specific information, in other words, asks the database for specific pieces of information&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is always a primary key to a table, each row has its own primary key.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="Mysql" scheme="https://yuxuanliu.tech/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Python basics</title>
    <link href="https://yuxuanliu.tech/python_basics/"/>
    <id>https://yuxuanliu.tech/python_basics/</id>
    <published>2019-09-08T10:32:01.000Z</published>
    <updated>2019-09-12T10:25:38.259Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><code>\n</code> will create a new line in a string. <code>print(&quot;apple\npear&quot;)</code></p></li><li><p><code>string.lower()</code> will change every character in a string to lower cases.</p></li><li><p><code>string.upper()</code> will change every character in a string to upper cases.</p></li><li><p><code>len(string)</code> will return the length of the string.</p></li><li><p><code>string[3]</code> will could index a string(start from zero)</p></li><li><p><code>string.index(A)</code> will return the position where <code>A</code> first time appear in the string. If <code>A</code> is consisted of multiple characters, it will return the position of the first character in <code>A</code>. If <code>A</code> can’t be found in the string, you will get an error</p></li><li><p><code>string.find(A)</code> very similar to <code>.index(A)</code>. The difference is that if we couldn’t find <code>A</code> in the string, it will return <code>-1</code> instead of an error.</p><a id="more"></a></li><li><p><code>string.replace(old,new,times)</code> The <code>old</code> parameter inside the string will be replaced by the <code>new</code> parameter. Without specify <code>times</code>, all <code>old</code> substring will be replaced by <code>new</code>. We may only want to replace <code>old</code> substring certain number of times, simply fill in the <code>times</code> parameter.</p></li><li><p><code>*</code> means multiply in Python. <code>**</code> means exponential. We can also use <code>pow(A,B)</code> which stands for <code>A</code> to the power of <code>B</code>.</p></li><li><p><code>%</code> will return the remainder of the division. </p></li><li><p><code>1//</code> means division and round down the answer. Remainder: <code>print(5//2)</code> will return 2 while <code>print(-5//2)</code> will return -3.</p></li><li><p><code>type(A)</code> will return the data type of <code>A</code>.</p></li><li><p><code>max(A,B,C)</code> will return the greatest numerical value in <code>A,B,C</code>. <code>min(A,B,C)</code> does exactly the opposite.</p></li><li><p><code>round(A)</code> will help us rounding A. i.e. 5.4 becomes 5 and 4.7 becomes 5.</p></li><li><p><code>list1[0]</code> A list can be indexed. <code>[-1]</code> will return the last element in the list, <code>[-2]</code> will return the second last element etc. <code>[1:]</code> will give all elements include and after position 1. <code>[1:3]</code> will return elements at position 1 &amp; 2 but won’t include 3(左闭右开).</p></li><li><p><code>list1[1] = new_value</code> We can re-define an element value inside a list using this method.</p></li><li><p><code>name = [&quot;Oscar&quot;, &quot;Jack&quot; , &quot;Michael&quot;]</code> <code>number = [3,5,6,7]</code> . If we want to combine these two lists, we could use <code>name.append(number)</code>. This will return <code>[&quot;Oscar&quot;, &quot;Jack&quot; , &quot;Michael&quot;,[3,5,6,7]]</code>. In other words, adding a list into a list. We can also do <code>name.extend(number)</code>. This will return <code>[&quot;Oscar&quot;, &quot;Jack&quot; , &quot;Michael&quot;,3,5,6,7]</code></p></li></ol><p>18 . Adding an element to a certain position in a list, we could use <code>list1.insert(A,B)</code>. This means we want to put <code>B</code>(element) at position <code>A</code>.</p><ol start="19"><li><p><code>list1.remove(A)</code> remove <code>A</code>(element) from the list.</p></li><li><p><code>list1.pop()</code> remove the last element from the list.</p></li><li><p><code>list1.count(A)</code> count how many times <code>A</code>(element) appears in a list.</p></li><li><p><code>list1.sort()</code> sort the list in default ascending order(numerical,alphabet). If we want to sort in descending order, use <code>list1.sort(reverse = True)</code>.</p></li><li><p><code>list1.reverse()</code> This will reverse the order of the list.</p></li><li><p><code>tuple1 = (A,B,C)</code> use a small bracket to define. Its value can’t be changed once defined. We can have a list of tuples <code>[(1,2),(3,4),(8,9)]</code></p></li><li><p><code>if</code> statement: the condition after <code>if</code> must be either <code>True</code> or <code>False</code>. Further Boolean algebra can be applied: <code>or</code>, <code>and</code>, <code>nor</code> etc.</p></li><li><p><code>!=</code> means not equal in python</p></li><li><p><code>dictionary1 = {key:value}</code> In other words, key-value pairs are used to define a dictionary</p></li><li><p>There are two ways of getting values in the dictionary. <code>result=dictionary1[key]</code>. This method will return an error if the <code>key</code> doesn’t exist. <code>result=dictionary.get(key,default_value)</code> If the key doesn’t exist, it will return <code>None</code>. We may also fill in a default value(optional) which will only be returned if the key doesn’t exist.</p></li><li><p><code>While</code> loop will keep running until the condition afterwards becomes <code>False</code>.</p></li><li><p>Get out of one loop: <code>break</code></p></li><li><p>A <code>string</code> can be sliced. See the example.</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> “Love”:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>This will return “l”,”o”,”v”,”e”</p><ol start="32"><li><p><code>for i in range(3)</code> means from 1 to 3 excluding 3. i.e. 1,2</p></li><li><p>We can put lists inside a list to make it a 2D(3D) array. </p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">         [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br></pre></td></tr></table></figure><p>We can easily slicing the array by<code>list1[1][2]</code>. This means obtaining the data at row 1 and column 2. We have 6 in this case. </p><p>Nasty <code>for</code> means: cascading <code>for loops</code>. Here, we can have:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">         [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> rows:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Know what I mean, makes the logic really clear.</p><p>A really beautiful example applying <code>for</code> loops, successfully solve the problem without cascading <code>for</code> loops. </p><p>Problem: replace a(A), e(E), i(I), o(O), u(U) in a word by g(G).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">translate</span><span class="params">(phrase)</span>:</span></span><br><span class="line">     translation = <span class="string">""</span></span><br><span class="line">     <span class="keyword">for</span> letter <span class="keyword">in</span> phrase:</span><br><span class="line">          <span class="keyword">if</span> letter.lower() <span class="keyword">in</span> <span class="string">"aeiou"</span>:</span><br><span class="line">               <span class="keyword">if</span> letter.isupper():</span><br><span class="line">                    translation = translation + <span class="string">"G"</span></span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                    translation = translation + <span class="string">"g"</span></span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">               translation = translation + letter</span><br><span class="line">     <span class="keyword">return</span> translation</span><br></pre></td></tr></table></figure><ol start="34"><li><p><code>try</code>&amp; <code>except</code> method</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    In=int(input(<span class="string">"Fill in the answer"</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    Print(<span class="string">"Invalid input, not an integer"</span>)</span><br></pre></td></tr></table></figure><p>Here, if the input isn’t an integer, an error will show up. By using <code>try</code>, <code>except</code> method, operations in <code>except</code> will run if and only if there is an error.</p><p>We can also specify the type of error after <code>expect</code>, refer to the example below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    answer = <span class="number">10</span> / int(input(<span class="string">"Enter Number: "</span>))</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"Caught any exception"</span>)</span><br></pre></td></tr></table></figure><p>If the input is zero, it will print out the error type in <code>except</code> because we only specified <code>ZeroDivisionError</code>. For any other types of errors, it will print out <code>caught any exception</code>. </p><p>We can also specify other types of error such as <code>ValueError</code> etc.</p></li><li><p><code>text = open(“filename.txt”, “mode”)</code></p><p>Modes we have: <code>“r”</code>: read; <code>“w”</code>: overwrite existing file; <code>“a”</code>: append; <code>“r+”</code>:  read &amp; overwrite, <code>“a+”</code>: read &amp; append; <code>“b”</code>: read the text in binary</p><p>Make sure to close the file using <code>text.close()</code>once opened a file.</p></li><li><p>To read all the content, using <code>text.read()</code></p><p>To read a certain line, use <code>text.readline()</code>. This will read the first line when we run it for the first time and read the second line when we run it for the second time etc.</p><p>Also,we could use <code>text.readlines()</code>. This will put every line in a <code>list</code>, we could fetch any line using the index method.</p></li><li><p>If we want to write(append) a file, make sure to change <code>“r”</code> into <code>&quot;w&quot;</code>(<code>&quot;a&quot;</code>) </p></li></ol><p>Using :<code>text.write(“Whatever you want to add”)</code></p><ol start="38"><li>By creating a new class, we are actually creating a new datatype in some ways. When we use a class, we need to instantiate the class like <code>oscar = Student()</code>. oscar here is no longer a <code>class</code> instead it becomes an <code>object</code>.</li><li>Inheritance: We can create a new class that contains all the functions and the attributes in the old class. Quick demo: <code>class New(Old)</code>. I will write a separate note to introduce it in detail.</li><li>If we want to change a float(decimal) to a fraction using the method below:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line">print(str(Fraction(<span class="number">0.25</span>)))</span><br></pre></td></tr></table></figure><p>​     This will return <code>&quot;1/4&quot;</code> </p><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>Thanks for reading. These notes are abstract from the <a href="https://www.mikedane.com/programming-languages/python/" target="_blank" rel="noopener">Python introduction course</a> created by <a href="https://www.mikedane.com/" target="_blank" rel="noopener">Mike Dane</a>(Giraffe academy).</p><p>I want to express my thanks to Mike. Awesome videos as always. Make sure to check out his website, contents are absolutely amazing.</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\n&lt;/code&gt; will create a new line in a string. &lt;code&gt;print(&amp;quot;apple\npear&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;string.lower()&lt;/code&gt; will change every character in a string to lower cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;string.upper()&lt;/code&gt; will change every character in a string to upper cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;len(string)&lt;/code&gt; will return the length of the string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;string[3]&lt;/code&gt; will could index a string(start from zero)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;string.index(A)&lt;/code&gt; will return the position where &lt;code&gt;A&lt;/code&gt; first time appear in the string. If &lt;code&gt;A&lt;/code&gt; is consisted of multiple characters, it will return the position of the first character in &lt;code&gt;A&lt;/code&gt;. If &lt;code&gt;A&lt;/code&gt; can’t be found in the string, you will get an error&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;string.find(A)&lt;/code&gt; very similar to &lt;code&gt;.index(A)&lt;/code&gt;. The difference is that if we couldn’t find &lt;code&gt;A&lt;/code&gt; in the string, it will return &lt;code&gt;-1&lt;/code&gt; instead of an error.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
  </entry>
  
</feed>
