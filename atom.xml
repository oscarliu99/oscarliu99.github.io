<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Logical thinking</title>
  
  <subtitle>Keep exploring</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuxuanliu.tech/"/>
  <updated>2020-06-18T15:36:50.893Z</updated>
  <id>https://yuxuanliu.tech/</id>
  
  <author>
    <name>Yuxuan Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CFA Quantitative method Notes</title>
    <link href="https://yuxuanliu.tech/CFA_Quantitative_method/"/>
    <id>https://yuxuanliu.tech/CFA_Quantitative_method/</id>
    <published>2020-06-18T22:26:58.000Z</published>
    <updated>2020-06-18T15:36:50.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Time-value-of-money"><a href="#Time-value-of-money" class="headerlink" title="Time value of money"></a>Time value of money</h2><ol><li>Applications of interest rate:<ul><li>Required rate of return: minimum rate of return must receive to accept an investment</li><li>Discount rate: cash in the future is discounted to find the value today</li><li>Opportunity cost: 因为做了A投资,所以必须放弃B投资,B投资的收益就是opportunity cost</li></ul></li><li>Components of interest rate:<ul><li>Nominal risk-free rate(rf) = US Treasury bond(T-bond) rate = real risk-free rate + inflation rate</li><li>Risk premium = Default risk premium + Liquidity premium + Maturity premium</li><li>Nominal interest rate = Nominal risk-free rate + Risk premium</li></ul></li><li>Effective Annual Rate(EAR):<ul><li>EAR = $(1+\frac{r_{s}}{m})^{m}$</li><li>$r_{s}$: nominal rate</li><li>m: compounding frequency</li></ul></li><li>Continuous compounding:<ul><li>EAR = $e^{r_{s}}-1$</li><li>Continuous compounding EAR is the maximum return for a given $r_{s}$</li></ul></li><li>Annuity:<ul><li>A set of <strong>fixed</strong> cash flows</li><li>Ordinary annuity: cash inflow at the end of each period</li><li>Annuity due: cash inflow at the beginning of each period</li><li>Perpetuity(永续年金): never ending cash inflow at the end of each period</li><li>Present value of a perpetuity with a periodic cash inflow of A = $\frac{A}{r}$</li></ul></li></ol><h2 id="Basic-statistics"><a href="#Basic-statistics" class="headerlink" title="Basic statistics"></a>Basic statistics</h2><ol><li><p>Parameter: any measure of a <strong>population</strong> characteristic</p></li><li><p>Sample statistics: any measure of a <strong>sample</strong> characteristic</p></li><li><p>Measurement scales:</p><ul><li><p>Nominal scale: no ranking between groups(没有排名)</p></li><li><p>Ordinal scale: there is ranking between groups(有排名)</p></li><li><p>Interval scale: difference between any two scales are equal and can be quantized(前后一名差距相同)</p></li><li><p>Ratio scale: there is a <strong>true zero point</strong> at the zero scale(真实零点,零点即代表没有)</p><ol start="4"><li>Central tendency:</li></ol><ul><li><p>Types of mean:</p><ul><li><p>Arithmetic mean: focus on average <strong>single-period</strong> performance(预测未来一期的收益)</p></li><li><p>Weighted mean</p></li><li><p>Geometric mean: focus on average <strong>multi-period</strong> performance as it takes into account compounding interest(预测未来多期的收益)</p></li><li><p>Periodic compound return = $\sqrt[n]{(1+R_{1})(1+R_{2})……(1+R_n)}-1$ </p><p>where $R_{i}$ is the return in each <strong>equal period</strong></p></li><li><p>Time weighted return(TWR) = $\sqrt[N]{(1+HPR_{1})(1+HPR_{2})……(1+HPR_{n})}-1$ </p><p>where HPR: holding period return, N is the total holding time in years</p><p>TWR is very similar to periodical compound return but <strong>holding periods in TWR are not necessarily to be equal</strong></p></li><li><p>Harmonic mean(调和平均数) = $$\bar{X}<em>{Harmonic}=\frac{N}{\sum</em>{i=1}^{N} \frac{1}{X_{i}}}$$</p><p>used to find average cost per share purchased at different time(基金定投)</p></li></ul></li><li><p>Harmonic mean &lt; Geometric mean &lt; Arithmetic mean</p><p>$\sigma$ 越大,三种平均数之间的差距越大</p></li><li><p>Median</p></li><li><p>Mode</p></li><li><p>Quantile: a value at or below which a stated fraction(<strong>y</strong>) of the data lies</p><p>Location of the value = (n+1)$\frac{y}{100}$</p><p>Quartiles: 四分位 Quintiles: 五分位 Deciles: 十分位 Percentiles: 百分位</p></li></ul><ol start="5"><li>Dispersion:</li></ol><ul><li>Range = maxima - minima</li><li>Mean absolute deviation(MAD) = $\frac{\sum_{i=1}^{n}\left|x_{1}-\bar{x}\right|}{n}$</li><li>Population variance= $\sigma^{2}=\frac{\sum_{i=1}^{N}(X_{i}-\mu)^{2}}{N}$ where $\mu$ is the population mean</li><li>Sample variance = $s^{2}= \frac{\sum_{i=1}^{N}(X_{i}-\bar{X})^{2}}{n-1}$ where $\bar{X}$ is the sample mean, <strong>degree of freedom = n-1</strong></li><li>Population standard deviation = $\sigma = \sqrt{\frac{\sum_{i=1}^{N}(X_{i}-\mu)^{2}}{N}}$</li><li>Sample standard deviation = $s = \sqrt{\frac{\sum_{i=1}^{N}(X_{i}-\bar{X})^{2}}{n-1}}$</li></ul><ol start="6"><li>Chebyshev’s inequality: <strong>minimum percentage of population</strong> that lies within <strong>k</strong> standard deviation of the mean would be $1- \frac{1}{k^{2}}$ </li><li>Coefficient of variation(CV) = $\frac{S}{\bar{X}}$, standard deviation over mean</li><li>Sharpe ratio(SR) = $\frac{\bar{R_{p}}-\bar{R_{F}}}{\sigma_{p}}$  where $\bar{R_{P}}$ is the mean return of the portfolio, $\bar{R_{F}}$ is the mean risk-free return, $\sigma_{P}$ is the standard deviation of the portfolio reurn.</li></ol><p>In other word, it is measuring the excess return earned for every unit of standard deviation</p><ol start="9"><li>Skewness(偏度):</li></ol><ul><li>Skewness = 0, symmetrical distribution, mean = mode = median</li><li>Skewness &gt; 0, 尾部右偏(正偏), mode &lt; median &lt; mean</li><li>Skewness &lt; 0, 尾部左边(负偏), mean &lt; median &lt; mode</li></ul><ol start="10"><li>Kurtosis(峰度):</li></ol><ul><li><strong>Normal distribution has a kurtosis of 3</strong></li><li>Excess kurtosis = kurtosis -3</li><li>Leptokurtic: kurtosis&gt;3, more peaked, fatter tail(高尖肥尾)</li><li>Mesokurtic: kurtosis=3, identical to normal distribution</li><li>Platykurtic: kurtosis&lt;3, less peaked, thinner tail(低尖瘦尾)</li></ul></li></ul></li></ol><h2 id="Basic-probability"><a href="#Basic-probability" class="headerlink" title="Basic probability"></a>Basic probability</h2><ol><li><p>Random variable: a quantity whose possible values are uncertain</p></li><li><p>Outcome: a result of a random experiment </p></li><li><p>Event: A set of outcomes</p></li><li><p>Exhaustive events(遍历的): events cover all possible outcomes so P(A)=1</p></li><li><p>Types of probability:</p><ul><li>Empirical probability: estimate probability based on <strong>historical data</strong></li><li>Priori probability: estimate probability based on <strong>logical analysis</strong></li><li>subjective probability: estimate probability without referencing any data</li></ul></li><li><p>Odds(赔率):</p><ul><li>Odds for a event E = $\frac{P(E)}{1-P(E)}$</li><li>Odds against a event E = $\frac{1-P(E)}{P(E)}$</li></ul></li><li><p>Multiplication rule:</p><ul><li>P(A and B)=$P(AB) = P(A|B)P(B)$</li><li>If A and B are independent, $P(AB) = P(A)P(B)$</li></ul></li><li><p>Addition rule:</p><ul><li>P(A or B) = $P(A+B)=P(A)+P(B)-P(AB)$</li><li>If A and B are independent, P(A+B) = P(A)+P(B)-P(A)P(B)</li></ul></li><li><p>Total probability rule: $P(A) = P(A|S_{1})P(S_{1})+P(A|S_{2})P(S_{2})+……P(A|S_{n})P(S_{n})$</p><p>where $S_{i}$ must be mutually exclusive and exhaustive so $\sum_{i=1}^{n} s_{i}=1$</p></li><li><p>Bayes’ Formula: $P(A|B)P(B)=P(B|A)P(A)$</p></li><li><p>Probability weighted variance: </p><p>$\sigma ^{2} = P(x_{1})(x_{1}-E(x))^{2}+P(x_{2})(x_{2}-E(x))^{2}……P(x_{n})(x_{n}-E(x))^{2} = E([x-E(x)]^{2}) = E(x^{2})-E(x)^{2}$</p></li><li><p>Covariance:</p><ul><li>$Cov(X,Y)=E[(X-E(X))(Y-E(Y)]$</li><li>X and Y must appear in pairs</li><li>Measure the linear relationship between two variables</li><li>Positive covariance: two variables tend to increase or decrease at the same time</li><li>Negative covariance: one variable increases when the other decreases Vice versa</li><li>Zero covariance: no linear relationship between two variables</li></ul></li><li><p>Correlation:</p><ul><li>Population correlation= $\rho = \frac{Cov(x,y)}{\sigma_{x}\sigma_{y}}$</li><li>Sample correlation= r = $\frac{Cov(x,y)}{s_{x}s_{y}}$</li><li>Correlation removes the influence of order of magnitude compared to covariance</li><li>Correlation = 1, perfect positive linear relationship, Correlation = -1, perfect negative linear relationship</li></ul></li></ol><h2 id="Probability-distribution"><a href="#Probability-distribution" class="headerlink" title="Probability distribution"></a>Probability distribution</h2><ol><li>Discrete distribution:<ul><li>A countable number of outcomes</li><li>Probability function:  穷举每个outcome的概率 e.g. P(X=1)=0.1,P(X=2)=0.1 etc.</li><li>Bernoulli random variable: only two outcomes 1 or 0<ul><li>1 represents success i.e. P(Y=1) = P</li><li>0 represents failure i.e. P(Y=0) = 1-P</li><li>E(Y) = P</li><li>$\sigma_{Y}$=P(1-P)</li></ul></li><li>Binomial distribution:<ul><li>Random variable(X): <strong>number of success in Bernoulli trials</strong></li><li>X <strong>~</strong> B(n,p), Binomial distribution takes two parameters where n is total number of trials and P is success rate</li><li>$P(X=x)= (nCx)P^{x}(1-P)^{n-x}$</li><li>E(X)=nP</li><li>$\sigma_{X}=nP(1-P)$</li></ul></li></ul></li><li>Continuous distribution:<ul><li>Outcome is usually a range</li><li>Probability density function <strong>f(x)</strong>:<ul><li>$P(x_{1}&lt;X&lt;x_{2})=\int ^{x_{2}}<em>{x</em>{1}}f(x)dx$</li><li>$P(X=x_{1})=0$</li></ul></li><li>Cumulative probability function <strong>F(x)</strong>:<ul><li>$F(x_{1})=P(X\leq x_{1})=\int ^{x_{1}}_{-\infty}f(x)dx$</li><li>Gives the probability of a random variable less or equal to $x_{1}$</li></ul></li><li>Normal distribution:<ul><li>X <strong>~</strong> N($\mu,\sigma$), probability density function is described by two parameters  </li><li>Skewness = 0</li><li>Kurtosis = 3</li></ul></li><li>Standard normal distribution(z distribution):<ul><li>$Z = \frac{X-\mu}{\sigma}$ so Z is a random variable as $\mu,\sigma$ are fixed and X is a random variable</li><li>Z <strong>~</strong> N(0,1) i.e. a normal distribution with zero mean and standard deviation of 1</li></ul></li><li>Lognormal distribution:<ul><li>If X<strong>~</strong> N($\mu,\sigma$), $e^{X}$<strong>~</strong>  lognormal</li><li>If X​<strong>~</strong>  lognormal, $ln(X)$ <strong>~</strong> N($\mu,\sigma$)</li><li>positive skewed</li></ul></li><li>Student t distribution(t distribution):<ul><li>X <strong>~</strong> t(n-1) defined by a single parameter <strong>n-1(degree of freedom) where n is the sample size</strong></li><li>Less peaked and fat tail(低峰肥尾)</li><li>As n increase, t distribution is approaching normal distribution</li><li>For a given degree of confidence, t distribution has a wider confidence interval than z distribution</li></ul></li></ul></li><li>Shortfall risk: the possibility the portfolio return will be less than $R_{L}$ i.e. P(X&lt;$R_{L}$)=F($R_{L}$)</li><li>Safety first ratio: <ul><li>distance from the mean return to shortfall level($R_{L}$) in units of standard deviation</li><li>SF ratio = $\frac{E(R_{P})-R_{L}}{\sigma}$</li><li>Sharpe ratio is a special case of SF ratio(when risk free return equals $R_{L}$)</li></ul></li><li>Monte Carlo simulation: use randomly generated values without the use of historical data</li><li>Historical simulation: use randomly selected past data</li></ol><h2 id="Sampling"><a href="#Sampling" class="headerlink" title="Sampling"></a>Sampling</h2><ol><li><p>Types of data:</p><ul><li>Time-series: same object at different time</li><li>Cross-sectional: different object at same time</li></ul></li><li><p>Types of sampling:</p><ul><li>Simple random sampling(简单随机抽样)</li><li>Stratified random sampling(分层抽样)</li></ul></li><li><p>Sampling error: difference between sample statistics and the actual population parameter</p></li><li><p><strong>Sampling distribution: the distribution of sample statistics</strong>(A sample statistics is a random variable so we can draw a probability density function of it)</p></li><li><p>Sampling biases:</p><ul><li>Data-mining bias: 强行找统计上的关系尽管事实上没有关系,所谓的统计关系只是巧合</li><li>Sample selection bias</li><li>Survivorship bias</li><li>Look-ahead bias: use data that was not available on the test date</li><li>Time-period bias: only take samples within a time period will make the result time-period specific</li></ul></li><li><p>Estimator and its properties:</p><ul><li>Estimator: A random variable that generates estimation of a population parameter For example: sample mean($\bar{X}$) is used to estimate population mean($\mu$)</li><li>Unbiasedness: expected value of the estimator equals the population parameter</li><li>Consistency: probability of estimator gets close to the population parameter increases with sample size</li><li>Efficiency: the unbiased distribution of the estimator with the smallest variance(多次抽样可以产生许多个estimator的distribution,方差最小的distribution我们说它具有efficiency)</li></ul></li><li><p>Central limit theorem: </p><ul><li><p>given a population described by any probability distribution with a population mean($\mu$) and variance($\sigma ^{2}$), the <strong>sampling distribution</strong> of sample mean($\bar{X}$)  with a sample size <strong>n&gt;30</strong> will be approximately normal with mean=$\mu$ and variance=$\frac{\sigma ^{2}}{n}$ </p></li><li><p>Standard error(standard deviation of the sampling distribution):</p><ul><li><p>when population standard deviation($\sigma$) is known:</p><p>$$\sigma_{x}=\frac{\sigma}{\sqrt{n}}$$</p></li><li><p>when population standard deviation($\sigma$) is <strong>not</strong> known, we use sample standard deviation($s$) instead:</p><p>$$s_{x}=\frac{s}{\sqrt{n}}$$</p></li></ul></li><li><p>Change normal distribution into standard normal distribution: $\bar{X}$ <strong>~</strong> N($\mu,\frac{\sigma ^{2}}{n}$) so $\frac{\bar{X}-\mu}{\frac{\sigma}{\sqrt{n}}}$ <strong>~</strong> N(0,1)</p></li><li><p>A very important table:</p><table><thead><tr><th>Population distribution</th><th>Variance of  population</th><th>Small sample size(n&lt;30)</th><th>Large sample size(n&gt;30)</th></tr></thead><tbody><tr><td>Normal distribution</td><td>known</td><td>Normal distribution</td><td>Normal distribution</td></tr><tr><td>Normal distribution</td><td>not known</td><td>T distribution</td><td>T distribution</td></tr><tr><td>Non-normal</td><td>known</td><td>Can’t do</td><td>Normal distribution</td></tr><tr><td>Non-normal</td><td>not known</td><td>Can’t do</td><td>T distribution</td></tr></tbody></table></li></ul></li><li><p>Point estimate: used a sample statistics to estimate population parameter directly</p></li><li><p>Confidence interval:</p><ul><li>Significance level($\alpha$): probability of sample statistics <strong>not</strong> fall in the confidence interval</li><li>Degree of confidence(1-$\alpha$): probability of sample statistics will fall in the confidence interval</li><li>Confidence interval = point estimate $\pm$ reliability factor$\times$ standard error</li></ul></li></ol><h2 id="Hypothesis-testing"><a href="#Hypothesis-testing" class="headerlink" title="Hypothesis testing"></a>Hypothesis testing</h2><ol><li><p>Hypothesis testing:</p><ul><li>An act to test an assumption regarding a <strong>population parameter</strong></li><li>Null hypothesis($H_{0}$): hypothesis to be tested</li><li>Alternative hypothesis($H_{a}$): the opposite side of null hypothesis so they must be mutually exclusive and exhaustive</li><li>The ‘<strong>=</strong>‘ sign must be in null hypothesis and null hypothesis is the assumption we wish to reject</li></ul></li><li><p>Two tailed test: used to test if the population parameter is different from a specific value</p><p>Example: $H_{0}:\mu = \mu_{0}$, $H_{a}: \mu \not= \mu_{0}$</p></li><li><p>One tailed test: used to test if the population parameter is greater or less than a specific value</p><p>Example: $H_{0}:\mu &gt; \mu_{0}$, $H_{a}: \mu \leq \mu_{0}$ <strong>rejection region is on the left</strong></p><p>Example: $H_{0}:\mu &lt; \mu_{0}$, $H_{a}: \mu \geq \mu_{0}$ <strong>rejection region is on the right</strong></p></li><li><p>Test statistic: <strong>A value calculated to test the null hypothesis</strong></p><ul><li><p>Mean of a single population:</p><ul><li><p>假设null hypothesis是正确的,以此为mean构建sample distribution(应用central limit theorem),看实际抽样的sample statistics是否落在significance level($\alpha$)对应的confidence interval以内,若在外面则可以作为依据来reject </p></li><li><p>When population variance is known(Z distribution):</p><p>$z=\frac{\bar{x}-\mu_{0}}{\frac{\sigma}{\sqrt{n}}}$</p></li><li><p>When population variance is not known(T distribution):</p><p>$t_{n-1}=\frac{\bar{X}-\mu_{0}}{\frac{S}{\sqrt{n}}}$</p></li></ul></li><li><p>Difference of mean of two independent population(两组数平均数的差为随机变量):</p><ul><li>T distribution</li><li>Assume variance of two population are unknow but equal, <strong>degree of freedom</strong> = $n_{1}+n_{2}-2$</li></ul></li><li><p>Mean difference of two independent population(两组数中每一对求差,差的平均数为随机变量):</p><ul><li>T distribution</li><li><strong>degree of freedom</strong> = n-1</li></ul></li><li><p>Variance of a single population:</p><ul><li>Chi-square distribution($X^{2}$ distribution)</li><li>degree of freedom = n-1</li></ul></li><li><p>Whether variance of two independent population are equal:</p><ul><li>Fisher distribution($F$ distribution)</li><li>Test statistics = $\frac{S_{1}^{2}}{S_{2}^{2}}$,  $S_{1}$ 和 $S_{2}$ 中大的放在分子以确保test statistics is greater than 1</li><li>Degrees of freedom:($n_{1}-1$) and ($n_{2}-1$)</li></ul></li><li><p>Correlation of two independent population</p><ul><li>sample size must be equal</li><li>T distribution</li><li>Test statistics = $\frac{r\sqrt{n-2}}{\sqrt{1-r^{2}}}$ where $r$ is the correlation of the samples</li><li>degree of freedom = n-2</li></ul></li></ul></li><li><p>Decision rule:</p><ul><li>We <strong>assume null hypothesis is true</strong> to calculate test statistics</li><li>If Test statistics is outside the range of critical value, we reject null hypothesis</li><li>P-value is less than the significance level($\alpha$), we reject null hypothesis</li></ul></li><li><p>Types of result of hypothesis test:</p><ul><li><p>Type I error: </p><ul><li>rejecting null hypothesis when it is true</li><li>P(Type I error) = significance level($\alpha$)</li></ul></li><li><p>Type II error:</p><ul><li>fail to reject null hypothesis when it is false</li><li>p(Type II error) = $\beta$</li></ul></li><li><p>Correct decision: fail to reject null hypothesis when it is true</p></li><li><p>Power of test: reject the null hypothesis when it is false</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Time-value-of-money&quot;&gt;&lt;a href=&quot;#Time-value-of-money&quot; class=&quot;headerlink&quot; title=&quot;Time value of money&quot;&gt;&lt;/a&gt;Time value of money&lt;/h2&gt;&lt;ol&gt;

      
    
    </summary>
    
    
      <category term="Finance" scheme="https://yuxuanliu.tech/categories/Finance/"/>
    
    
      <category term="CFA" scheme="https://yuxuanliu.tech/tags/CFA/"/>
    
      <category term="Finance" scheme="https://yuxuanliu.tech/tags/Finance/"/>
    
  </entry>
  
  <entry>
    <title>IB Linear Systems and Control notes</title>
    <link href="https://yuxuanliu.tech/IB_Linear_System_and_Control/"/>
    <id>https://yuxuanliu.tech/IB_Linear_System_and_Control/</id>
    <published>2020-05-15T23:28:07.000Z</published>
    <updated>2020-05-15T16:37:39.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IB-Paper-6-Linear-Systems-amp-Control-Notes"><a href="#IB-Paper-6-Linear-Systems-amp-Control-Notes" class="headerlink" title="IB Paper 6 Linear Systems &amp; Control Notes"></a>IB Paper 6 Linear Systems &amp; Control Notes</h1><p>This is my personal notes abstract from the Linear Systems and Control course given by the Department of Engineering, University of Cambridge. This course introduces basic ideas in Linear System and Control Theory. It includes the following topics: Signal &amp; System, Laplace Transform, Impulse Response, Step Response, Transfer Function, Stability &amp; Poles, Frequency Response &amp; Steady State Response, Feedback Control System, Bold Diagram, PID Control, Nyquist Diagram and Feedback Stability.</p><p>Lectures are given by Dr. Lestas. If you spot any mistake or have any questions, please don’t hesitate to contact me. Many thanks</p><a id="more"></a><p><img src="https://i.loli.net/2020/05/16/6xt2JS75wRiHuX8.jpg" alt="1.jpg"></p><p><img src="https://i.loli.net/2020/05/16/9JY4pjqMTcWHmvZ.jpg" alt="2.jpg"></p><p><img src="https://i.loli.net/2020/05/16/o5GQXebPmy2JTIs.jpg" alt="3.jpg"></p><p><img src="https://i.loli.net/2020/05/16/UHIopQGaVXuCT8w.jpg" alt="4.jpg"></p><p><img src="https://i.loli.net/2020/05/16/KXqvh2QcDCaAulz.jpg" alt="5.jpg"></p><p><img src="https://i.loli.net/2020/05/16/cWGPng5whAQDxqp.jpg" alt="6.jpg"></p><p><img src="https://i.loli.net/2020/05/16/7BYnXLU6oCsclKf.jpg" alt="7.jpg"></p><p><img src="https://i.loli.net/2020/05/16/FepRbgtmiIEfTxz.jpg" alt="8.jpg"></p><p><img src="https://i.loli.net/2020/05/16/8zQdxZK3UCPoeuc.jpg" alt="9.jpg"></p><p><img src="https://i.loli.net/2020/05/16/SLaqnhtrjFcDeMw.jpg" alt="10.jpg"></p><p><img src="https://i.loli.net/2020/05/16/BHpfiCxQ61bAITE.jpg" alt="11.jpg"></p><p><img src="https://i.loli.net/2020/05/16/qtucK74jXgnWISf.jpg" alt="12.jpg"></p><p><img src="https://i.loli.net/2020/05/16/rxUL8ak1cMXG96C.jpg" alt="13.jpg"></p><p><img src="https://i.loli.net/2020/05/16/fdPCiDsHB4FulQ5.jpg" alt="14.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IB-Paper-6-Linear-Systems-amp-Control-Notes&quot;&gt;&lt;a href=&quot;#IB-Paper-6-Linear-Systems-amp-Control-Notes&quot; class=&quot;headerlink&quot; title=&quot;IB Paper 6 Linear Systems &amp;amp; Control Notes&quot;&gt;&lt;/a&gt;IB Paper 6 Linear Systems &amp;amp; Control Notes&lt;/h1&gt;&lt;p&gt;This is my personal notes abstract from the Linear Systems and Control course given by the Department of Engineering, University of Cambridge. This course introduces basic ideas in Linear System and Control Theory. It includes the following topics: Signal &amp;amp; System, Laplace Transform, Impulse Response, Step Response, Transfer Function, Stability &amp;amp; Poles, Frequency Response &amp;amp; Steady State Response, Feedback Control System, Bold Diagram, PID Control, Nyquist Diagram and Feedback Stability.&lt;/p&gt;
&lt;p&gt;Lectures are given by Dr. Lestas. If you spot any mistake or have any questions, please don’t hesitate to contact me. Many thanks&lt;/p&gt;
    
    </summary>
    
    
      <category term="University notes" scheme="https://yuxuanliu.tech/categories/University-notes/"/>
    
    
      <category term="Information" scheme="https://yuxuanliu.tech/tags/Information/"/>
    
      <category term="Engineering" scheme="https://yuxuanliu.tech/tags/Engineering/"/>
    
  </entry>
  
  <entry>
    <title>IB Signal and Data Analysis notes</title>
    <link href="https://yuxuanliu.tech/IB_Signal_and_Data_Analysis/"/>
    <id>https://yuxuanliu.tech/IB_Signal_and_Data_Analysis/</id>
    <published>2020-05-13T20:52:47.000Z</published>
    <updated>2020-05-13T14:00:02.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IB-Paper-6-Signal-and-Data-Analysis-Notes"><a href="#IB-Paper-6-Signal-and-Data-Analysis-Notes" class="headerlink" title="IB Paper 6 Signal and Data Analysis Notes"></a>IB Paper 6 Signal and Data Analysis Notes</h1><p>This is my personal notes abstract from the Signal and Data Analysis course given by the Department of Engineering, University of Cambridge. This course introduces basic tools in data analysis including: Fourier’s Series, Fourier’s Transform and Sampling theory.</p><p>Lectures are given by Dr. Godsill. If you spot any mistake or have any questions, please don’t hesitate to contact me. Many thanks</p><a id="more"></a><p><img src="https://i.loli.net/2020/05/13/asVO7Ze6DhWNoil.jpg" alt="1.jpg"></p><p><img src="https://i.loli.net/2020/05/13/mCM1G6g5QlJoSzW.jpg" alt="2.jpg"></p><p><img src="https://i.loli.net/2020/05/13/ijcCpuJhx3Xl2E5.jpg" alt="3.jpg"></p><p><img src="https://i.loli.net/2020/05/13/nIG6rzQZeC1kwLp.jpg" alt="4.jpg"></p><p><img src="https://i.loli.net/2020/05/13/JCfbSiEUsxpt6XZ.jpg" alt="5.jpg"></p><p><img src="https://i.loli.net/2020/05/13/H8cvN1SLiJKgudU.jpg" alt="6.jpg"></p><p><img src="https://i.loli.net/2020/05/13/BtPwGSQIY1L7zeu.jpg" alt="7.jpg"></p><p><img src="https://i.loli.net/2020/05/13/rHQmw1Ti5zjvIy3.jpg" alt="8.jpg"></p><p><img src="https://i.loli.net/2020/05/13/JbM9CklFx6AnHZ8.jpg" alt="9.jpg"></p><p><img src="https://i.loli.net/2020/05/13/QIA6Rd5G7SrNb2P.jpg" alt="10.jpg"></p><p><img src="https://i.loli.net/2020/05/13/5SHLogNmelCnqU1.jpg" alt="11.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IB-Paper-6-Signal-and-Data-Analysis-Notes&quot;&gt;&lt;a href=&quot;#IB-Paper-6-Signal-and-Data-Analysis-Notes&quot; class=&quot;headerlink&quot; title=&quot;IB Paper 6 Signal and Data Analysis Notes&quot;&gt;&lt;/a&gt;IB Paper 6 Signal and Data Analysis Notes&lt;/h1&gt;&lt;p&gt;This is my personal notes abstract from the Signal and Data Analysis course given by the Department of Engineering, University of Cambridge. This course introduces basic tools in data analysis including: Fourier’s Series, Fourier’s Transform and Sampling theory.&lt;/p&gt;
&lt;p&gt;Lectures are given by Dr. Godsill. If you spot any mistake or have any questions, please don’t hesitate to contact me. Many thanks&lt;/p&gt;
    
    </summary>
    
    
      <category term="University notes" scheme="https://yuxuanliu.tech/categories/University-notes/"/>
    
    
      <category term="Information" scheme="https://yuxuanliu.tech/tags/Information/"/>
    
      <category term="Engineering" scheme="https://yuxuanliu.tech/tags/Engineering/"/>
    
  </entry>
  
  <entry>
    <title>IB Electromagnetism Waves and Fields notes</title>
    <link href="https://yuxuanliu.tech/IB_EM_waves_and_field/"/>
    <id>https://yuxuanliu.tech/IB_EM_waves_and_field/</id>
    <published>2020-05-10T23:09:11.000Z</published>
    <updated>2020-05-10T16:29:29.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IB-Paper-5-EM-Waves-and-Fields-Notes"><a href="#IB-Paper-5-EM-Waves-and-Fields-Notes" class="headerlink" title="IB Paper 5 EM Waves and Fields Notes"></a>IB Paper 5 EM Waves and Fields Notes</h1><p>This is my personal notes abstract from the EM waves &amp; fields course given by the Department of Engineering, University of Cambridge. This course introduces some concepts on top of the course in IA, it includes the following topics: Transmission lines, Maxwell Equations, EM waves in dielectric, Antennas, Reflection and refraction of EM waves, EM waves in conducting medium.</p><p>Lectures are given by Dr. Flewitt. If you spot any mistake or have any questions, please don’t hesitate to contact me. Many thanks</p><a id="more"></a><p><img src="https://i.loli.net/2020/05/11/Kh1mzksf9awOj57.jpg" alt="1.jpg"></p><p><img src="https://i.loli.net/2020/05/11/T7BIJWuwPdo6QtD.jpg" alt="2.jpg"></p><p><img src="https://i.loli.net/2020/05/11/61yUnAGoJTbsp9k.jpg" alt="3.jpg"></p><p><img src="https://i.loli.net/2020/05/11/IxjoW8LlGOnzmEd.jpg" alt="4.jpg"></p><p><img src="https://i.loli.net/2020/05/11/hZfDFKOXRqi5k68.jpg" alt="5.jpg"></p><p><img src="https://i.loli.net/2020/05/11/lf1gMw4WCoReZOP.jpg" alt="6.jpg"></p><p><img src="https://i.loli.net/2020/05/11/nKY395ZbOvRXBUx.jpg" alt="7.jpg"></p><p><img src="https://i.loli.net/2020/05/11/O8lBRbSCvJY5zuH.jpg" alt="8.jpg"></p><p><img src="https://i.loli.net/2020/05/11/XqLydnVBtwso3eb.jpg" alt="9.jpg"></p><p><img src="https://i.loli.net/2020/05/11/YiSM2wlKzBUhfW5.jpg" alt="10.jpg"></p><p><img src="https://i.loli.net/2020/05/11/LUBMbEPkhozlqxJ.jpg" alt="11.jpg"></p><p><img src="https://i.loli.net/2020/05/11/xvyZOXnFR1CiklA.jpg" alt="12.jpg"></p><p><img src="https://i.loli.net/2020/05/11/PzFYDLTrEQ8yb97.jpg" alt="13.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IB-Paper-5-EM-Waves-and-Fields-Notes&quot;&gt;&lt;a href=&quot;#IB-Paper-5-EM-Waves-and-Fields-Notes&quot; class=&quot;headerlink&quot; title=&quot;IB Paper 5 EM Waves and Fields Notes&quot;&gt;&lt;/a&gt;IB Paper 5 EM Waves and Fields Notes&lt;/h1&gt;&lt;p&gt;This is my personal notes abstract from the EM waves &amp;amp; fields course given by the Department of Engineering, University of Cambridge. This course introduces some concepts on top of the course in IA, it includes the following topics: Transmission lines, Maxwell Equations, EM waves in dielectric, Antennas, Reflection and refraction of EM waves, EM waves in conducting medium.&lt;/p&gt;
&lt;p&gt;Lectures are given by Dr. Flewitt. If you spot any mistake or have any questions, please don’t hesitate to contact me. Many thanks&lt;/p&gt;
    
    </summary>
    
    
      <category term="University notes" scheme="https://yuxuanliu.tech/categories/University-notes/"/>
    
    
      <category term="Engineering" scheme="https://yuxuanliu.tech/tags/Engineering/"/>
    
      <category term="Electricity" scheme="https://yuxuanliu.tech/tags/Electricity/"/>
    
  </entry>
  
  <entry>
    <title>IB Electrical Power notes</title>
    <link href="https://yuxuanliu.tech/IB_Electrical_Power/"/>
    <id>https://yuxuanliu.tech/IB_Electrical_Power/</id>
    <published>2020-04-26T22:55:20.000Z</published>
    <updated>2020-04-26T16:10:47.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IB-Paper-5-Electrical-Power-Notes"><a href="#IB-Paper-5-Electrical-Power-Notes" class="headerlink" title="IB Paper 5 Electrical Power Notes"></a>IB Paper 5 Electrical Power Notes</h1><p>This is my personal notes abstract from the Electrical Power course given by the Department of Engineering, University of Cambridge. This course introduces Electrical Power System includes: Three Phase Power Supply, AC Generator(Synchronous Machine), Transmission Line and Induction Motor(Asynchronous Machine).</p><p>Lectures are given by Dr. Flack. If you spot any mistake or have any questions, please don’t hesitate to contact me. Many thanks</p><a id="more"></a><p><img src="https://i.loli.net/2020/04/27/wduVo3CBMxezv9T.jpg" alt="1.jpg"></p><p><img src="https://i.loli.net/2020/04/27/qaANV5x9nrzDFOi.jpg" alt="2.jpg"></p><p><img src="https://i.loli.net/2020/04/27/HyvPhjZkxeOCX6n.jpg" alt="3.jpg"></p><p><img src="https://i.loli.net/2020/04/27/AIO4hBPGo6Czklx.jpg" alt="4.jpg"></p><p><img src="https://i.loli.net/2020/04/27/me8VoqhTz7bG6pS.jpg" alt="5.jpg"></p><p><img src="https://i.loli.net/2020/04/27/pjT1ABk3FDtOEW2.jpg" alt="6.jpg"></p><p><img src="https://i.loli.net/2020/04/27/PaZOphYXVx6QwBz.jpg" alt="7.jpg"></p><p><img src="https://i.loli.net/2020/04/27/T7bjNfZW4cYsCh2.jpg" alt="8.jpg"></p><p><img src="https://i.loli.net/2020/04/27/SZNgz48Het6Uoc9.jpg" alt="9.jpg"></p><p><img src="https://i.loli.net/2020/04/27/8JlQfYKRozISZqE.jpg" alt="10.jpg"></p><p><img src="https://i.loli.net/2020/04/27/v8ibScFlQTG2KjE.jpg" alt="11.jpg"></p><p><img src="https://i.loli.net/2020/04/27/F85cNRrbXOk37eL.jpg" alt="12.jpg"></p><p><img src="https://i.loli.net/2020/04/27/PpcYgiCU2emxLHT.jpg" alt="13.jpg"></p><p><img src="https://i.loli.net/2020/04/27/mvD86fOwJXzGbNU.jpg" alt="14.jpg"></p><p><img src="https://i.loli.net/2020/04/27/JQHcbLf2R9wgMSi.jpg" alt="15.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IB-Paper-5-Electrical-Power-Notes&quot;&gt;&lt;a href=&quot;#IB-Paper-5-Electrical-Power-Notes&quot; class=&quot;headerlink&quot; title=&quot;IB Paper 5 Electrical Power Notes&quot;&gt;&lt;/a&gt;IB Paper 5 Electrical Power Notes&lt;/h1&gt;&lt;p&gt;This is my personal notes abstract from the Electrical Power course given by the Department of Engineering, University of Cambridge. This course introduces Electrical Power System includes: Three Phase Power Supply, AC Generator(Synchronous Machine), Transmission Line and Induction Motor(Asynchronous Machine).&lt;/p&gt;
&lt;p&gt;Lectures are given by Dr. Flack. If you spot any mistake or have any questions, please don’t hesitate to contact me. Many thanks&lt;/p&gt;
    
    </summary>
    
    
      <category term="University notes" scheme="https://yuxuanliu.tech/categories/University-notes/"/>
    
    
      <category term="Engineering" scheme="https://yuxuanliu.tech/tags/Engineering/"/>
    
      <category term="Electricity" scheme="https://yuxuanliu.tech/tags/Electricity/"/>
    
  </entry>
  
  <entry>
    <title>IB Communication Notes</title>
    <link href="https://yuxuanliu.tech/IB_Communication/"/>
    <id>https://yuxuanliu.tech/IB_Communication/</id>
    <published>2020-04-20T23:53:24.000Z</published>
    <updated>2020-04-26T16:10:41.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IB-Paper-6-Communication-Notes"><a href="#IB-Paper-6-Communication-Notes" class="headerlink" title="IB Paper 6 Communication Notes"></a>IB Paper 6 Communication Notes</h1><p>This is my personal notes abstract from the Communication course given by the Department of Engineering, University of Cambridge. This course introduces some basic ideas in Information Engineering includes: Analogue modulation, Frequency modulation, ADC, Baseband modulation &amp; demodulation, Passband modulation &amp; demodulation, Channel coding and Multiple Access.</p><p>Lectures are given by Dr. Venkataramanan. If you spot any mistake or have any questions, please don’t hesitate to contact me. Many thanks</p><a id="more"></a><p><img src="https://i.loli.net/2020/04/21/GSJKudTzkbI49gw.jpg" alt="1"></p><p><img src="https://i.loli.net/2020/04/21/D3R6XrBQa4ikzcx.jpg" alt="2.jpg"></p><p><img src="https://i.loli.net/2020/04/21/mgfa4UxBb3oSDPQ.jpg" alt="3.jpg"></p><p><img src="https://i.loli.net/2020/04/21/EI6vU4ysxFJe3kD.jpg" alt="4.jpg"></p><p><img src="https://i.loli.net/2020/04/21/5Rc6lEXwmdOBHgW.jpg" alt="5.jpg"></p><p><img src="https://i.loli.net/2020/04/21/NtYegnuPZ2TGXV8.jpg" alt="6.jpg"></p><p><img src="https://i.loli.net/2020/04/21/OQKAgFI56ECH8BZ.jpg" alt="7.jpg"></p><p><img src="https://i.loli.net/2020/04/21/SI2YGTPDoUp9WwV.jpg" alt="8.jpg"></p><p><img src="https://i.loli.net/2020/04/21/pES73KaJLDIo8eH.jpg" alt="9.jpg"></p><p><img src="https://i.loli.net/2020/04/21/Fy69bCkSDsQW45U.jpg" alt="10.jpg"></p><p><img src="https://i.loli.net/2020/04/21/R8AvZlrN2IP1yLm.jpg" alt="11.jpg"></p><p><img src="https://i.loli.net/2020/04/21/sY3CGnczqINASFE.jpg" alt="12.jpg"></p><p><img src="https://i.loli.net/2020/04/21/6z4Yscw5SIbTJVl.jpg" alt="13.jpg"></p><p><img src="https://i.loli.net/2020/04/21/AfWGNsuC7D2eicb.jpg" alt="14.jpg"></p><p><img src="https://i.loli.net/2020/04/21/qaHLbFT4ckdzfCn.jpg" alt="15.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IB-Paper-6-Communication-Notes&quot;&gt;&lt;a href=&quot;#IB-Paper-6-Communication-Notes&quot; class=&quot;headerlink&quot; title=&quot;IB Paper 6 Communication Notes&quot;&gt;&lt;/a&gt;IB Paper 6 Communication Notes&lt;/h1&gt;&lt;p&gt;This is my personal notes abstract from the Communication course given by the Department of Engineering, University of Cambridge. This course introduces some basic ideas in Information Engineering includes: Analogue modulation, Frequency modulation, ADC, Baseband modulation &amp;amp; demodulation, Passband modulation &amp;amp; demodulation, Channel coding and Multiple Access.&lt;/p&gt;
&lt;p&gt;Lectures are given by Dr. Venkataramanan. If you spot any mistake or have any questions, please don’t hesitate to contact me. Many thanks&lt;/p&gt;
    
    </summary>
    
    
      <category term="University notes" scheme="https://yuxuanliu.tech/categories/University-notes/"/>
    
    
      <category term="Information" scheme="https://yuxuanliu.tech/tags/Information/"/>
    
      <category term="Engineering" scheme="https://yuxuanliu.tech/tags/Engineering/"/>
    
  </entry>
  
  <entry>
    <title>IB Analogue circuit and devices notes part 1</title>
    <link href="https://yuxuanliu.tech/IB_Analogue_circuit_and_devices_part_1/"/>
    <id>https://yuxuanliu.tech/IB_Analogue_circuit_and_devices_part_1/</id>
    <published>2019-12-17T22:32:03.000Z</published>
    <updated>2019-12-17T14:44:43.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Bipolar-transistor-DC-properties"><a href="#1-Bipolar-transistor-DC-properties" class="headerlink" title="1. Bipolar transistor DC properties"></a>1. Bipolar transistor DC properties</h1><ol><li><p>p-n junction:</p><ul><li>p-type silicon: substitute silicon by Group Ⅲ element. Majority charge carrier: holes; minority change carrier: electrons.</li><li>n-type silicon: substitute silicon by Group Ⅴ element. Majority charge carrier: electrons; minority change carrier: holes.</li><li>If we put a p-type and a n-type together, a depletion region is formed due to electrons and holes join together. </li></ul></li><li><p>FET(Field effect transistor): </p><ul><li>Unipolar(either electrons or holes as charge carrier)</li><li>Gate, drain and source</li><li>Voltage at gate controls conductivity and can’t sustain large current</li><li>Operating at low current to amplify voltage</li></ul><a id="more"></a></li><li><p>Bipolar transistor(三极管):</p><ul><li><p>Bipolar(both electrons and holes as charge carrier)</p></li><li><p>Amplify current</p></li><li><p>Base, collector and emitter.</p></li><li><p>Two diodes(n-p &amp; p-n) attached together to form a npn.</p></li><li><p>$I_{B}$ is used to control $I_{C}$ but $I_{B}$ is way smaller than $I_{C}$.</p></li><li><p>Detailed theory for operation:</p><ul><li>Base voltage is positive with respect to emitter so base-emitter diode is forward biased.</li><li>Collector-base diode is reversed biased. Electrons can fill up the depletion layer(may be neglected) as base(p type) is very thin. As a result, electrons can flow between collector and emitter.</li><li>In summary: <strong>a small change in base current causes a large change in collector current. The collector current is nearly equal to emitter current.</strong></li></ul></li><li><p>A bit math:<br>$$<br>I_{C}=\alpha I_{E}\<br>I_{E}=I_{C}+I_{B}\<br>I_{C}=\frac {\alpha}{1-\alpha}I_{B}=\beta I_{B}=h_{FE}\cdot I_{B}<br>$$</p><ul><li>$\alpha$ is called the common base current gain and ranges from 0.9 to 0.99.</li><li>$h_{FE}$ is called the current gain and usually range from 20 to 500.</li></ul></li></ul></li></ol><h1 id="2-Bipolar-transistor-AC-properties"><a href="#2-Bipolar-transistor-AC-properties" class="headerlink" title="2. Bipolar transistor AC properties"></a>2. Bipolar transistor AC properties</h1><ol><li><p>DC analysis on BJT:</p><ul><li><img src="https://i.loli.net/2019/12/17/TxUGDOJjmt59RdZ.png" alt="1571179715877"></li><li>$R_{1}$ is used to set $I_{B}$. $R_{1}=\frac {V_{CC}-V_{BE}}{I_{B}}$</li><li>$R_{2}$ is used to set $I_{C}$ and $V_{CE}$. $R_{2}=\frac {V_{CC}-V_{CE}}{I_{C}}$</li><li>$V_{CE}$ is normally set to be half of $V_{CC}$.</li><li>Picking an operating point is in fact selecting $V_{CE}$, $I_{C}$ and $I_{B}$. </li><li>We can find $V_{BE}$ in a graph after $V_{CE}$ and $I_{C}$ are determined. </li><li>Values of relevant resistances can be determined after setting $V_{CE}$, $I_{C}$, $I_{B}$ and $V_{BE}$.</li><li>$V_{CE}$ is the output voltage while $V_{BE}$ is the input voltage.</li></ul></li><li><p>Small signal model(ssm) for BJT:</p><ul><li><p>We assume the operating point is already set.</p></li><li><p>For the ssm model, we are not wondering what is actually happening when AC is applied. Instead we’re just modelling the problem using a few parameters.</p></li><li><p>How $I_{C}$ will change if we change $V_{CE}$ and $I_{B}$ slightly. </p></li><li><p>$$<br>\because i_{c}=\left.\frac{\partial I_{c}}{\partial I_{B}}\right|<em>{V</em>{CE}}i_{b}+\left.\frac{\partial I_{c}}{\partial V_{C E}}\right|<em>{I</em>{B}} V_{ce}\<br>$$</p><p>$$<br>\frac{\partial I_{c}}{\partial I_{B}}=h_{fe}\<br>$$</p><p>$$<br>\frac{\partial I_{c}}{\partial V_{C E}}=h_{oe}\<br>$$</p><p>$$<br>\therefore i_{c}=h_{f e} i_{b}+h_{o e} v_{c e}<br>$$</p></li></ul></li></ol><ul><li><p>How $V_{BE}$ will change if we change $I_{B}$ and $V_{CE}$ slightly.</p></li><li><p>$$<br>\because v_{be}=\left.\frac{\partial V_{BE}}{\partial I_{B}}\right|<em>{V</em>{CE}}i_{b}+\left.\frac{\partial V_{BE}}{\partial V_{C E}}\right|<em>{I</em>{B}} V_{ce}\<br>$$</p><p>$$<br>\frac{\partial V_{BE}}{\partial I_{B}}=h_{ie}\<br>$$</p><p>$$<br>\frac{\partial V_{BE}}{\partial V_{CE}}=h_{re}\<br>$$</p><p>$$<br>\therefore v_{be}=h_{ie} i_{b}+h_{re} v_{ce}<br>$$</p><p>$h_{re}$ can be neglected in most cases.</p></li><li><p>Full ssm diagram:</p><p><img src="https://i.loli.net/2019/12/17/xXe3suD6V9NZfo5.png" alt="1571182027668"></p></li></ul><ol start="3"><li>Some tips:<ul><li>All dc parameters are grounded in ssm.</li><li>$i_{b}$ by defemination is the current flow into $h_{ie}$ rather than the current in base.</li><li>$i_{b}$ and $i_{c}$ are current so they just flow into the ground. However, $h_{fe}i_{b}$ is a current source so current must flow back.</li><li>To find input resistance, we must apply a test current at the input terminal with the output terminal open circuited.</li><li>To find output resistance, we must apply a test current at the output terminal with the input terminal short circuited.</li><li>We can check if $h_{fe}i_{b}=0$. If so, it means output resistance is simply resistances in parallel. This is because test current $i_{x}$ only comes from $v_{x}$. No other voltage contributes to $i_{x}$.</li></ul></li></ol><h1 id="3-Bipolar-transistor-circuits-design"><a href="#3-Bipolar-transistor-circuits-design" class="headerlink" title="3. Bipolar transistor circuits design"></a>3. Bipolar transistor circuits design</h1><ol><li><p>Common emitter amplifier:</p><ul><li><p><img src="https://i.loli.net/2019/12/17/OsEW23UlZKmR8Da.png" alt="1576589230987"></p></li><li><p>We may connect $R_{1}$ to collector rather than $V_{CC}$ to improve stability but we are losing some ssm input resistance(a bad thing).</p></li></ul></li><li><p>Common emitter circuit with an emitter resistance:</p><ul><li><p><img src="https://i.loli.net/2019/12/17/GjO78tT6YeJFhPg.png" alt="1576589937199"></p></li><li><p>Use Thevenin theory to find the equivalent circuit of the potential divider $R_{1}$ and $R_{2}$.</p></li><li><p>The emitter resistance $R_{4}$ improve the stability of the circuit but we are losing some gain. A possible way to fix this problem is to add a bypass capacitor across $R_{4}$</p></li></ul></li><li><p>Emitter follower:</p><ul><li><p><img src="https://i.loli.net/2019/12/17/nKDsRyCoEANdpge.png" alt="1576590374329"></p></li><li><p>Has a gain of almost unity so can act as a buffer</p></li><li><p>Has large input resistance and small output resistance</p></li></ul></li><li><p>Source follower(using FET included for completeness):</p><ul><li><p><img src="https://i.loli.net/2019/12/17/IsAxXo3ZPTa5Nd1.png" alt="1576590601262"></p></li><li><p>Also has a gain of nearly unity</p></li><li><p>Input resistance and output resistance of source follower are both greater compared to emitter follower</p></li></ul></li></ol><h1 id="4-Circuit-elements-of-Op-amp"><a href="#4-Circuit-elements-of-Op-amp" class="headerlink" title="4. Circuit elements of Op-amp"></a>4. Circuit elements of Op-amp</h1><ol><li><p>Differential amplifier(Long tail pair):</p><ul><li><p><img src="https://i.loli.net/2019/12/17/wxsB51IQ3YuohKG.png" alt="1576591592558"></p></li><li><p>Act as the input circuit of the Op-amp and can amplify the difference between voltage sources $v_{1}$ and $v_{2}$.</p></li><li><p>Output voltages are $v_{3}$ and $v_{4}$</p></li><li><p>The circuit is perfect symmetrical so everything happens on one side also happens on the other side. We can treat $R_{s}$ into two resistors with resistance of $2R_{s}$ in parallel to simplify analysis.</p></li><li><p>Common mode: $v_{1}=v_{2}$</p><ul><li>If we increase $v_{1}$ and $v_{2}$ together by the same amount, $I_{bias}$ will also increase so current flows into $R_{S}$ increases.</li></ul></li><li><p>Differential mode: $v_{1}$=$-v_{2}$ </p><ul><li>If we increase $v_{1}$ and drop $v_{2}$ by the same amount, change of current in each loop cancel out each other so current flow into $R_{S}$ stays unchanged. As a result, $R_{S}$ can be removed in ssm analysis of the differential mode.</li></ul></li></ul></li><li><p>Common Mode Rejection Ratio(CMRR):</p><ul><li><p>$$<br>CMRR = \frac{G_{diff}}{G_{comm}}<br>$$</p><ul><li>$G_{diff}$: gain for differential mode signals</li><li>$G_{comm}$: gain for common mode signals</li></ul></li><li><p>We want CMRR to be as large as possible.</p></li></ul></li></ol><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>These notes are summarized from handouts and lectures of Cambridge University Engineering Tripos part IB Analogue circuit and devices course given by <a href="cd299@cam.ac.uk">Dr Colm Durkan</a>. If you spot any mistake or have any question, please feel free to get in touch. Many thanks.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Bipolar-transistor-DC-properties&quot;&gt;&lt;a href=&quot;#1-Bipolar-transistor-DC-properties&quot; class=&quot;headerlink&quot; title=&quot;1. Bipolar transistor DC properties&quot;&gt;&lt;/a&gt;1. Bipolar transistor DC properties&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;p-n junction:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p-type silicon: substitute silicon by Group Ⅲ element. Majority charge carrier: holes; minority change carrier: electrons.&lt;/li&gt;
&lt;li&gt;n-type silicon: substitute silicon by Group Ⅴ element. Majority charge carrier: electrons; minority change carrier: holes.&lt;/li&gt;
&lt;li&gt;If we put a p-type and a n-type together, a depletion region is formed due to electrons and holes join together. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FET(Field effect transistor): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unipolar(either electrons or holes as charge carrier)&lt;/li&gt;
&lt;li&gt;Gate, drain and source&lt;/li&gt;
&lt;li&gt;Voltage at gate controls conductivity and can’t sustain large current&lt;/li&gt;
&lt;li&gt;Operating at low current to amplify voltage&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="University notes" scheme="https://yuxuanliu.tech/categories/University-notes/"/>
    
    
      <category term="Engineering" scheme="https://yuxuanliu.tech/tags/Engineering/"/>
    
      <category term="Electricity" scheme="https://yuxuanliu.tech/tags/Electricity/"/>
    
  </entry>
  
  <entry>
    <title>Python for Finance part 3</title>
    <link href="https://yuxuanliu.tech/Python_for_Finance_3/"/>
    <id>https://yuxuanliu.tech/Python_for_Finance_3/</id>
    <published>2019-09-30T09:59:42.000Z</published>
    <updated>2019-09-30T03:33:04.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="11-Portfolio-optimization"><a href="#11-Portfolio-optimization" class="headerlink" title="11. Portfolio optimization"></a>11. Portfolio optimization</h2><ol><li><p>Monte Carlo Simulation: randomly assign a weight to each security in our portfolio, then calculate the mean daily return, daily return std and Sharp ratio</p></li><li><p>Plot results on a chart showing <strong>Return against Volatility and colored by Sharp Ratio</strong>.</p></li><li><p>Full code for Monte Carlo:</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="comment">#Load data</span></span><br><span class="line">TESLA = pd.read_csv(<span class="string">"Tesla_data.csv"</span>,index_col=<span class="string">"Date"</span>,parse_dates=<span class="literal">True</span>)</span><br><span class="line">GOOGLE = pd.read_csv(<span class="string">"Google_data.csv"</span>,index_col=<span class="string">"Date"</span>,parse_dates=<span class="literal">True</span>)</span><br><span class="line">GM = pd.read_csv(<span class="string">"GM_data.csv"</span>,index_col=<span class="string">"Date"</span>,parse_dates=<span class="literal">True</span>)</span><br><span class="line">APPLE = pd.read_csv(<span class="string">"Apple_data.csv"</span>,index_col=<span class="string">"Date"</span>,parse_dates=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Create a new dataframe with adjusted close prices only</span></span><br><span class="line">df_close = pd.concat([TESLA[<span class="string">"Adj Close"</span>],GOOGLE[<span class="string">"Adj Close"</span>],GM[<span class="string">"Adj Close"</span>],APPLE[<span class="string">"Adj Close"</span>]],axis = <span class="number">1</span>)</span><br><span class="line">df_close.columns = [<span class="string">"TESLA"</span>,<span class="string">"GOOGLE"</span>,<span class="string">"GM"</span>,<span class="string">"APPLE"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Find daily return in the log scale</span></span><br><span class="line">df_daily_return = np.log(df_close/df_close.shift(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Create several arries to store data</span></span><br><span class="line">array_return = np.zeros(<span class="number">5000</span>)</span><br><span class="line">array_variance = np.zeros(<span class="number">5000</span>)</span><br><span class="line">array_sharp = np.zeros(<span class="number">5000</span>)</span><br><span class="line">array_allocation = np.zeros((<span class="number">5000</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#5000 iteration(Monte Carlo method)</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">5000</span>):</span><br><span class="line">    <span class="comment">#Create a random allocation and normalise it.</span></span><br><span class="line">    allocation = np.random.random(<span class="number">4</span>)</span><br><span class="line">    allocation = allocation/np.sum(allocation)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Find the total daily return which has taken into account allocation</span></span><br><span class="line">    allo_ret = (df_daily_return*allocation).sum(axis = <span class="number">1</span>)</span><br><span class="line">    <span class="comment">#Change daily average return to yearly</span></span><br><span class="line">    exp_ret = allo_ret.mean()*<span class="number">252</span></span><br><span class="line">    <span class="comment">#Find the expected volatility(standard deviation)</span></span><br><span class="line">    exp_vol = allo_ret.std()*sqrt(<span class="number">252</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#We may also use the line of code below to make calculations faster.</span></span><br><span class="line">    <span class="comment">#exp_vol = np.sqrt(np.dot(allocation.T, np.dot(df_daily_return.cov() * 252, allocation)))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Store data</span></span><br><span class="line">    array_return[m] = exp_ret</span><br><span class="line">    array_variance[m] = exp_vol</span><br><span class="line">    array_sharp[m] = exp_ret/exp_vol</span><br><span class="line">    array_allocation[m] = allocation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Plot data</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">plt.scatter(array_variance,array_return,c=array_sharp,cmap=<span class="string">'plasma'</span>)</span><br><span class="line">position = array_sharp.argmax()</span><br><span class="line">print(array_allocation[position])</span><br><span class="line">plt.colorbar(label=<span class="string">'Sharpe Ratio'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Volatility(standard deviation)'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Return'</span>) </span><br><span class="line">plt.scatter(array_variance[position],array_return[position],c=<span class="string">'blue'</span>,s=<span class="number">40</span>,edgecolors=<span class="string">'black'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>We can either use arithmetic daily return = $\frac {P_{t}}{P_{t-1}}-1$ or logarithm daily return = $\lg \frac{P_{t}}{P_{t-1}}$ for portfolio optimization. However, logarithm daily return is recommended as it has better performance.</p></li><li><p>Random guessing is not really efficient, we can also use math to find the optimal Sharp Ratio for any given portfolio.</p></li><li><p>The idea of using math is to build a minimizer to find:<br>$$<br>S’ = -\frac{R_{p}-R_{f}}{\sigma_{p}}<br>$$<br>the minimum of the <strong>negative</strong> of the Sharpe ratio leaving us the maximum of the Sharpe ratio.</p></li><li><p>Full code for minimizer(Scipy):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="comment">#Load data</span></span><br><span class="line">TESLA = pd.read_csv(<span class="string">"Tesla_data.csv"</span>,index_col=<span class="string">"Date"</span>,parse_dates=<span class="literal">True</span>)</span><br><span class="line">GOOGLE = pd.read_csv(<span class="string">"Google_data.csv"</span>,index_col=<span class="string">"Date"</span>,parse_dates=<span class="literal">True</span>)</span><br><span class="line">GM = pd.read_csv(<span class="string">"GM_data.csv"</span>,index_col=<span class="string">"Date"</span>,parse_dates=<span class="literal">True</span>)</span><br><span class="line">APPLE = pd.read_csv(<span class="string">"Apple_data.csv"</span>,index_col=<span class="string">"Date"</span>,parse_dates=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Create a new dataframe with adjusted close prices only</span></span><br><span class="line">df_close = pd.concat([TESLA[<span class="string">"Adj Close"</span>],GOOGLE[<span class="string">"Adj Close"</span>],GM[<span class="string">"Adj Close"</span>],APPLE[<span class="string">"Adj Close"</span>]],axis = <span class="number">1</span>)</span><br><span class="line">df_close.columns = [<span class="string">"TESLA"</span>,<span class="string">"GOOGLE"</span>,<span class="string">"GM"</span>,<span class="string">"APPLE"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Find daily return</span></span><br><span class="line">df_daily_return = np.log(df_close/df_close.shift(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#A function returns sharpe ratio</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_return_vol_sharp</span><span class="params">(allocation)</span>:</span></span><br><span class="line">    allocation = allocation/np.sum(allocation)</span><br><span class="line">    allo_ret = (df_daily_return*allocation).sum(axis = <span class="number">1</span>)</span><br><span class="line">    exp_ret = allo_ret.mean()*<span class="number">252</span></span><br><span class="line">    exp_vol = allo_ret.std()*sqrt(<span class="number">252</span>)</span><br><span class="line">    exp_sharpe = exp_ret/exp_vol</span><br><span class="line">    <span class="keyword">return</span> np.array([exp_ret,exp_vol,exp_sharpe])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Another function returns negaive sharpe ratio so we want to minimise it to maximise sharpe ratio</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">neg_sharpe</span><span class="params">(allocation)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  get_return_vol_sharp(allocation)[<span class="number">2</span>] * <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_sum</span><span class="params">(allocation)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Returns 0 if sum of weights is 1.0</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> np.sum(allocaiton) - <span class="number">1</span></span><br><span class="line">cons = (&#123;<span class="string">'type'</span>:<span class="string">'eq'</span>,<span class="string">'fun'</span>: check_sum&#125;)</span><br><span class="line"></span><br><span class="line">bounds = ((<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">init_guess = [<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>]</span><br><span class="line"><span class="comment">#opt_results = minimize(neg_sharpe, init_guess, method='SLSQP', bounds=bounds, constraints=cons)</span></span><br><span class="line">opt_results = minimize(neg_sharpe, init_guess, method=<span class="string">'SLSQP'</span>, bounds=bounds)</span><br><span class="line">print(opt_results)</span><br><span class="line">print(get_return_vol_sharp(opt_results.x))</span><br></pre></td></tr></table></figure><ul><li>Firstly, we need to create a function we wish to maximize. Then create another function returning the negative. This second function is what we want to minimize.</li><li><code>constraints = cons</code> is a parameter of the constraint. This means that the value returned from the function must equal to 0 otherwise it will be filtered.</li><li>We need to set <code>bonds</code>(boundaries) for each input. It is quite helpful and easy to understand as the sum for <code>allocation</code> is 1.</li><li>Set an initial guess, often we do even allocation.</li></ul></li><li><p>Full code for efficient frontier:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment">#Load data</span></span><br><span class="line">TESLA = pd.read_csv(<span class="string">"Tesla_data.csv"</span>,index_col=<span class="string">"Date"</span>,parse_dates=<span class="literal">True</span>)</span><br><span class="line">GOOGLE = pd.read_csv(<span class="string">"Google_data.csv"</span>,index_col=<span class="string">"Date"</span>,parse_dates=<span class="literal">True</span>)</span><br><span class="line">GM = pd.read_csv(<span class="string">"GM_data.csv"</span>,index_col=<span class="string">"Date"</span>,parse_dates=<span class="literal">True</span>)</span><br><span class="line">APPLE = pd.read_csv(<span class="string">"Apple_data.csv"</span>,index_col=<span class="string">"Date"</span>,parse_dates=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Create a new dataframe with adjusted close prices only</span></span><br><span class="line">df_close = pd.concat([TESLA[<span class="string">"Adj Close"</span>],GOOGLE[<span class="string">"Adj Close"</span>],GM[<span class="string">"Adj Close"</span>],APPLE[<span class="string">"Adj Close"</span>]],axis = <span class="number">1</span>)</span><br><span class="line">df_close.columns = [<span class="string">"TESLA"</span>,<span class="string">"GOOGLE"</span>,<span class="string">"GM"</span>,<span class="string">"APPLE"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Find daily return</span></span><br><span class="line">df_daily_return = np.log(df_close/df_close.shift(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#A function returns sharpe ratio</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_return_vol_sharp</span><span class="params">(allocation)</span>:</span></span><br><span class="line">    allocation = allocation/np.sum(allocation)</span><br><span class="line">    allo_ret = (df_daily_return*allocation).sum(axis = <span class="number">1</span>)</span><br><span class="line">    exp_ret = allo_ret.mean()*<span class="number">252</span></span><br><span class="line">    exp_vol = allo_ret.std()*sqrt(<span class="number">252</span>)</span><br><span class="line">    <span class="keyword">return</span> np.array([exp_ret,exp_vol])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">volati</span><span class="params">(allocation)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> get_return_vol_sharp(allocation)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_sum</span><span class="params">(allocation)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Returns 0 if sum of weights is 1.0</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> np.sum(allocation) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bounds = ((<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">init_guess = [<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>]</span><br><span class="line">y_axis = np.linspace(<span class="number">0</span>,<span class="number">0.4</span>,<span class="number">30</span>)</span><br><span class="line">list_x = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> y_axis:</span><br><span class="line">    cons = (&#123;<span class="string">'type'</span>:<span class="string">'eq'</span>,<span class="string">'fun'</span>: check_sum&#125;,&#123;<span class="string">'type'</span>:<span class="string">'eq'</span>,<span class="string">'fun'</span>: <span class="keyword">lambda</span> w: get_return_vol_sharp(w)[<span class="number">0</span>] - i&#125;)</span><br><span class="line">    opt_results = minimize(volati, init_guess, method=<span class="string">'SLSQP'</span>, bounds=bounds, constraints=cons)</span><br><span class="line">    list_x.append(opt_results[<span class="string">"fun"</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Create several arries to store data</span></span><br><span class="line">array_return = np.zeros(<span class="number">3000</span>)</span><br><span class="line">array_variance = np.zeros(<span class="number">3000</span>)</span><br><span class="line">array_sharp = np.zeros(<span class="number">3000</span>)</span><br><span class="line">array_allocation = np.zeros((<span class="number">3000</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#3000 iteration(Monte Carlo method)</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">3000</span>):</span><br><span class="line">    <span class="comment">#Create a random allocation and normalise it.</span></span><br><span class="line">    allocation = np.random.random(<span class="number">4</span>)</span><br><span class="line">    allocation = allocation/np.sum(allocation)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Find the total daily return which has taken into account allocation</span></span><br><span class="line">    allo_ret = (df_daily_return*allocation).sum(axis = <span class="number">1</span>)</span><br><span class="line">    <span class="comment">#Change daily average return to yearly</span></span><br><span class="line">    exp_ret = allo_ret.mean()*<span class="number">252</span></span><br><span class="line">    <span class="comment">#Find the expected volatility(standard deviation)</span></span><br><span class="line">    exp_vol = allo_ret.std()*sqrt(<span class="number">252</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#We may also use the line of code below to make calculations faster.</span></span><br><span class="line">    <span class="comment">#exp_vol = np.sqrt(np.dot(allocation.T, np.dot(df_daily_return.cov() * 252, allocation)))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Store data</span></span><br><span class="line">    array_return[m] = exp_ret</span><br><span class="line">    array_variance[m] = exp_vol</span><br><span class="line">    array_sharp[m] = exp_ret/exp_vol</span><br><span class="line">    array_allocation[m] = allocation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Plot data</span></span><br><span class="line">plt.scatter(array_variance,array_return,c=array_sharp,cmap=<span class="string">'plasma'</span>)</span><br><span class="line">position = array_sharp.argmax()</span><br><span class="line">print(array_allocation[position])</span><br><span class="line">plt.colorbar(label=<span class="string">'Sharpe Ratio'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Volatility(standard deviation)'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Return'</span>) </span><br><span class="line">plt.scatter(array_variance[position],array_return[position],c=<span class="string">'blue'</span>,s=<span class="number">40</span>,edgecolors=<span class="string">'black'</span>)</span><br><span class="line">plt.plot(list_x,y_axis,<span class="string">'g--'</span>,linewidth=<span class="number">3</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>Find the range of y and minimise x within this range to find efficient frontier.</p></li></ol><h2 id="12-Finance-concepts"><a href="#12-Finance-concepts" class="headerlink" title="12. Finance concepts"></a>12. Finance concepts</h2><ol><li><p>Types of funds:</p><ul><li>ETF(Exchange Traded Funds):<ul><li>Holdings are transparent and public</li><li>Individuals can trade ETF just like stocks(Liquidity)</li><li>Expense ratio: 0.01%-0.1% asset under management(<strong>AUM</strong>)</li></ul></li><li>Mutual Funds(公募基金):<ul><li>A pool of funds collected from investors for the purpose of investing in securities</li><li>Operated by fund managers</li><li>Normally disclose their holdings once a quarter(may vary)</li><li>Individuals can trade at the end of the day through broker(掮客)</li><li>Expense ratio: 0.5%-3% AUM</li></ul></li><li>Hedge funds(对冲基金):<ul><li>Alternative investments using pooled funds</li><li>Less regulation and only open to accredited investors</li><li>No need to disclose strategy</li><li>Trading of hedge funds depends on agreements.</li><li>Expense ratio: 2% of AUM and 20% of the profit</li></ul></li></ul></li><li><p>Order books:</p><ul><li>An order is created when you click <strong>BUY</strong> on your stock trading APP(broker).</li><li>An order includes the following information:<ul><li>Buy or sell</li><li>Symbol(sticker) of the stock</li><li>Number of shares</li><li>Limit(only buy share under certain price) or market(buy share at the current market price)</li><li>Price(only required if it is an limit order)</li></ul></li><li>The order is sent to exchanges and goes into an order book.</li><li>Your order may not actually be sent to the exchange due to the reasons below:<ul><li>Order can be done within the broker</li><li>Order is done within the darkpool(private exchanges between brokers)</li></ul></li></ul></li><li><p>High frequency trading(HFT):</p><ul><li>HFT firms make profit using the latency(潜在) differences due to geographical distance.</li><li>Latency arbitrage: A bank purchases a large amount of share. It needs to send orders to multiple exchanges, it takes some time(2ms) for the order to travel between exchanges. HFT firm builds colocated server to detect this large order so they can send orders to other exchanges faster than the bank. The price is almost guaranteed to go up due to the large buy-in so HFT makes money. </li></ul></li><li><p>Short-selling(抛空):</p><ul><li>If you believe the price for a share will go down, you can go to the broker and borrow someone else’s share.</li><li>Sell these shares and buy back when it goes down. You end up making money.</li><li>However, you will end up losing money if the price goes up.</li></ul></li><li><p>Capital asset pricing model(CAPM):</p><ul><li><p>Return of the portfolio:  $r_{p}(t) = cw_{i}r_{i}(t)$ </p></li><li><p>We can also image the whole market as a portfolio to find the <strong>return of market</strong>: $r_{m}(t) = \sum_{i}^{n}w_{m}r_{i}(t)$ where $w_{m}$ is the market capital of a company over the market capital of the market.</p></li><li><p>CAPM equation for a stock: $r_{i}(t) = \beta_{i}r_{m}(t)+\alpha_{i}(t)$</p><ul><li>Return of any share is just a weight of the return of market plus $\alpha_{i}$ which is the residual term.</li><li>We are expecting $\alpha_{i}$ to be zero and we are trying to predict $\alpha_{i}$</li></ul></li><li><p>CAPM equation for a portfolio: $r_{p}(t) = \beta_{p}r_{m}(t)+\sum_{i}^{n}w_{i}\alpha_{i}(t)$</p></li><li><p>Full code for CAPM demo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line"><span class="keyword">import</span> pandas_datareader <span class="keyword">as</span> pdr</span><br><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">yf.pdr_override()</span><br><span class="line">start = datetime.date(<span class="number">2015</span>,<span class="number">9</span>,<span class="number">30</span>)</span><br><span class="line">end = datetime.date(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">30</span>)</span><br><span class="line">GM = pdr.get_data_yahoo(<span class="string">"GM"</span>,start,end)</span><br><span class="line">spy = pdr.get_data_yahoo(<span class="string">"SPY"</span>,start,end)</span><br><span class="line">GM[<span class="string">"Daily return"</span>] = (GM[<span class="string">"Close"</span>]/GM.shift(<span class="number">1</span>)[<span class="string">"Close"</span>])<span class="number">-1</span></span><br><span class="line">spy[<span class="string">"Daily return"</span>] = (spy[<span class="string">"Close"</span>]/spy.shift(<span class="number">1</span>)[<span class="string">"Close"</span>])<span class="number">-1</span></span><br><span class="line">beta,alpha,r_value,p_value,std_err = stats.linregress(GM[<span class="string">'Daily return'</span>].iloc[<span class="number">1</span>:],spy[<span class="string">'Daily return'</span>].iloc[<span class="number">1</span>:])</span><br><span class="line">print(beta)</span><br><span class="line">print(alpha)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>A few notes</p><ul><li>When the price for a share is extremely high, the company may split up a share in to two or three. This will cause a big jump in the share price which will affect our trading algorithm.</li><li>The price for a stock will go up before dividends pay-out being announced and go down afterwards. This will affect our trading algorithm as well.</li><li>Adjusted close will remove the influence above. You should use the adjusted close where possible.</li><li>Survivorship bias: companies with poor performance are removed from S&amp;P 500 as time move on. Leaving only companies with good performance. This will cause bias, making us too optimistic about our strategy. In other words, companies in S&amp;P 500 in 2006 are different from today.</li><li>EMH(Efficient Market Hypothesis):<ul><li>stocks always trade at their fair value on stock exchanges, making it impossible for investors to either purchase undervalued stocks or sell stocks for inflated prices.</li><li>The only way to gain higher return is by purchasing riskier investments.</li><li>We believe EMH is NOT true and market is not 100% efficient otherwise there is no point doing analysis. Besides, large hedge funds keep making money is also evidence that the market is not 100% efficient.</li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;11-Portfolio-optimization&quot;&gt;&lt;a href=&quot;#11-Portfolio-optimization&quot; class=&quot;headerlink&quot; title=&quot;11. Portfolio optimization&quot;&gt;&lt;/a&gt;11. Portfolio optimization&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Monte Carlo Simulation: randomly assign a weight to each security in our portfolio, then calculate the mean daily return, daily return std and Sharp ratio&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plot results on a chart showing &lt;strong&gt;Return against Volatility and colored by Sharp Ratio&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Full code for Monte Carlo:&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
      <category term="Finance" scheme="https://yuxuanliu.tech/categories/Finance/"/>
    
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
      <category term="Finance" scheme="https://yuxuanliu.tech/tags/Finance/"/>
    
  </entry>
  
  <entry>
    <title>Python for Finance part 2</title>
    <link href="https://yuxuanliu.tech/Python_for_Finance_2/"/>
    <id>https://yuxuanliu.tech/Python_for_Finance_2/</id>
    <published>2019-09-19T21:11:11.000Z</published>
    <updated>2019-09-30T03:32:52.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="9-Time-series-analysis"><a href="#9-Time-series-analysis" class="headerlink" title="9. Time series analysis"></a>9. Time series analysis</h2><ol><li><p>Key words related to time series:</p><ul><li>Trend: Upward, Horizontal/Stationary and Downward.</li><li>Seasonality(季节性): repeated trends</li><li>Cyclical(周期性): trends with no set repetition</li></ul></li><li><p>Statsmodels:</p><ul><li><p><code>import statsmodels.api as sm</code></p></li><li><p>Demo: Hodrick-Prescott filter: $\min_{\{ \tau_{t}\} }\sum_{t}^{T}\zeta_{t}^{2}+\lambda\sum_{t=1}^{T}\left[\left(\tau_{t}-\tau_{t-1}\right)-\left(\tau_{t-1}-\tau_{t-2}\right)\right]^{2}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Fetching data</span></span><br><span class="line">yf.pdr_override()</span><br><span class="line">start = datetime.date(<span class="number">2018</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">end = datetime.date(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">16</span>)</span><br><span class="line">data = pdr.get_data_yahoo(<span class="string">"TSLA"</span>,start,end)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Applying Hodrick-Prescott filter, We get back a tuple with two elements, the first is the cycle pandas series and the second is the trend pandas series.</span></span><br><span class="line">close_cycle, close_trend = sm.tsa.filters.hpfilter(data[<span class="string">"Close"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Plotting</span></span><br><span class="line">fig,axe = plt.subplots(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">#data["Close"].plot(label = "Raw data")</span></span><br><span class="line"><span class="comment">#close_cycle.plot(label = "Cycle")</span></span><br><span class="line">close_trend.plot(label = <span class="string">"Trend"</span>)</span><br><span class="line">data[<span class="string">"Close"</span>].rolling(<span class="number">20</span>).mean().plot(label = <span class="string">"20MA"</span>)</span><br><span class="line">axe.set_xlabel(<span class="string">"Price"</span>)</span><br><span class="line">axe.set_ylabel(<span class="string">"Time"</span>)</span><br><span class="line">axe.set_title(<span class="string">"Hodrick-Prescott filter analysis on Tesla"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>Splitting data into two components: <strong>trend</strong> and <strong>cycle</strong>.</li><li>We can find some similarities between the 20MA plot and the trend plot.</li></ul></li></ul></li><li><p>ETS model(Error-Trend-Seasonality):</p><ul><li><p>ETS decomposition: decompose the time series data into those three main factors:</p><ul><li>Seasonal patterns</li><li>General trends</li><li>Error</li></ul></li><li><p>Demo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas_datareader <span class="keyword">as</span> pdr</span><br><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.seasonal <span class="keyword">import</span> seasonal_decompose</span><br><span class="line"></span><br><span class="line"><span class="comment">#Fetching data</span></span><br><span class="line">start = datetime.date(<span class="number">2013</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">end = datetime.date(<span class="number">2019</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">yf.pdr_override()</span><br><span class="line">data = pdr.get_data_yahoo(<span class="string">"TSLA"</span>,start,end)</span><br><span class="line"><span class="comment">#Choose whether to use EWMA values</span></span><br><span class="line"><span class="comment">#data1["Close"] = data1["Close"].ewm(span = 7).mean()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Filter dates</span></span><br><span class="line">data1 = data.reset_index()</span><br><span class="line">data1 = data1[(data1[<span class="string">"Date"</span>].apply(<span class="keyword">lambda</span> x:x.day == <span class="number">10</span>))|(data1[<span class="string">"Date"</span>].apply(<span class="keyword">lambda</span> x:x.day == <span class="number">20</span>)) | (data1[<span class="string">"Date"</span>].apply(<span class="keyword">lambda</span> x:x.day == <span class="number">30</span>))]</span><br><span class="line">data1 = data1.set_index(<span class="string">"Date"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Plotting data</span></span><br><span class="line">seasonal_decompose(data1[<span class="string">"Close"</span>],freq = <span class="number">36</span>,model=<span class="string">'multiplicative'</span>).plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ul><li><code>seasonal_decompose()</code> has two main parameters. <code>freq</code> equals 52 for weekly data, equals 12 for monthly data etc. <code>model</code> has two options, by default it is <strong>additive</strong> and we can also choose to use <strong>multiplicative</strong>.</li><li>I use two sets of data(raw and EWMA) and set frequencies to be every 5 days or every 10 days for comparison purpose.</li><li>Result: <a href="https://i.loli.net/2019/09/19/ayBLv3FfcD9RhPl.png" target="_blank" rel="noopener">raw data every 5 days</a>, <a href="https://i.loli.net/2019/09/19/8BtjGodQwYuElAx.png" target="_blank" rel="noopener">raw data every 10 days</a>, <a href="https://i.loli.net/2019/09/19/UzK1M7hDQsIVrv6.png" target="_blank" rel="noopener">EWMA data every 5 days</a>, <a href="https://i.loli.net/2019/09/19/O2E69k3nVxj1CaX.png" target="_blank" rel="noopener">EWMA data every 10 days</a>.</li></ul></li></ul></li><li><p>EWMA model(Exponentially Weighted Moving Average):</p><ul><li><p>We have Simple Moving average by using <code>.rolling()</code> in Pandas but it has some cons:</p><ul><li>Smaller window will still lead to noise.</li><li>Always lag by the size of the window(missing data at the beginning).</li><li>Never reach the full peak or valley due to the averaging nature.</li><li>Can’t estimate future behavior as all SMA does is describing the trend in the past.</li></ul></li><li><p>Key nature about EWMA:</p><ul><li>Overcome the cons of SMA.</li><li>Put more weight on values that occurred more recently.</li><li>The weight applied depends on the actual parameters used and the window size.</li></ul></li><li><p><code>.ewm()</code> has parameters: <code>com</code>(center of mass); <code>span</code>, <code>halflife</code> and <code>adjust</code>.</p></li><li><p>Formula for the EWMA:<br>$$<br>y_t =   \frac{\sum\limits_{i=0}^t w_i x_{t-i}}{\sum\limits_{i=0}^t w_i}<br>$$</p><ul><li>$y_{t}$ is the output value at time t</li><li>$x_{t}$ is the input value at time t</li><li>All we need to define is $\omega _{i}$ and it depends on the <strong>adjust</strong> parameter you provided.</li></ul></li><li><p>If <code>adjust = True</code>:<br>$$<br>y_t = \frac{x_t + (1 - \alpha)x_{t-1} + (1 - \alpha)^2 x_{t-2} + … + (1 - \alpha)^t x_{0}}{1 + (1 - \alpha) + (1 - \alpha)^2 + … + (1 - \alpha)^t}<br>$$</p><ul><li>By default, <code>adjust = True</code>.</li><li>$0&lt; \alpha &lt;1$ </li><li>This is basically the same as the first expression.</li><li>We are taking all historical values into account.</li><li>$\omega _{i}= (1-\alpha)^{i}$</li></ul></li><li><p>If <code>adjust = False</code>:<br>$$<br> \begin{split}y_0 &amp;= x_0 \<br> y_t &amp;= (1 - \alpha) y_{t-1} + \alpha x_t,\end{split}<br>$$</p><ul><li>$0&lt; \alpha &lt;1$ </li><li>A bit different</li><li>We only take into account the input at <strong>t</strong> and the output at <strong>t-1</strong></li></ul></li><li><p>From the above expressions, we still need to determine $\alpha$. There are three ways:</p><ul><li><p>Span:<br>$$<br>\alpha = \frac{2}{s + 1},\text{for span}\ s \geq 1<br>$$<br>Span corresponds to what is commonly called an <strong>“N-day EWMA”</strong>.</p></li><li><p>Center of mass:<br>$$<br>\alpha = \frac{1}{1 + c},\text{for center of mass}\ c \geq 0<br>$$<br>Center of mass has more physical interpretation and can be thought of in terms of span: $c=\frac{s−1}{2}$</p></li><li><p>Half-life:<br>$$<br>\alpha = 1 - \exp^{\frac{\log 0.5}{h}},\text{for half-life}\ h &gt; 0<br>$$<br>Half-life is the period of time for the exponential weight to reduce to one half.</p></li></ul></li><li><p>Demo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas_datareader <span class="keyword">as</span> pdr</span><br><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment">#Fetching data</span></span><br><span class="line">yf.pdr_override()</span><br><span class="line">start = datetime.date(<span class="number">2019</span>,<span class="number">8</span>,<span class="number">1</span>)</span><br><span class="line">end = datetime.date(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">16</span>)</span><br><span class="line">data = pdr.get_data_yahoo(<span class="string">"TSLA"</span>,start,end)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Plotting data</span></span><br><span class="line">fig,axe = plt.subplots(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">data[<span class="string">"Close"</span>].plot(label = <span class="string">"Raw data"</span>)</span><br><span class="line"><span class="comment">#data["Close"].rolling(7).mean().plot(label = "7MA")</span></span><br><span class="line">data[<span class="string">"Close"</span>].ewm(span = <span class="number">7</span>).mean().plot(label = <span class="string">"7EWMA"</span>)</span><br><span class="line"></span><br><span class="line">axe.set_xlabel(<span class="string">"Price"</span>)</span><br><span class="line">axe.set_ylabel(<span class="string">"Time"</span>)</span><br><span class="line">axe.set_title(<span class="string">"7 days EWMA analysis on Tesla"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="10-Sharpe-ratio"><a href="#10-Sharpe-ratio" class="headerlink" title="10. Sharpe ratio"></a>10. Sharpe ratio</h2><ol><li><p>Portfolio: </p><ul><li>a set of allocations in a variety of securities(shares).</li><li>Example: 20% Tesla; 50% Apple; 30% GM</li><li>Key values for a portfolio:<ul><li>Daily return</li><li>Cumulative return</li><li>Average daily return</li><li>Standard deviation of daily return(volatility of daily return)</li><li>Sharpe ratio</li></ul></li></ul></li><li><p>Sharpe ratio:</p><ul><li><p>A measure for risk-adjusted return. It quantifies the relationship between return and risk. In other words, how much more risk we are facing for a higher return?</p></li><li><p>Formula:<br>$$<br>S = \frac{R_{p}-R_{f}}{\sigma_{p}}<br>$$<br>$R_{p}$: expected portfolio return mean</p><p>$R_{f}$: Risk-free return</p><p>$\sigma p$: Portfolio standard deviation</p></li><li><p>In this note, we set $R_{f}=0$ leaving $S = \frac{R_{p}}{\sigma{p}}$</p></li><li><p>Conservation to annualized Sharp ratio: $ASR = K\times SR$</p><ul><li>If we have daily data: K =$\sqrt{252}$</li><li>If we have weekly data: K =$\sqrt{52}$</li><li>If we have monthly data: K =$\sqrt{12}$</li></ul></li></ul></li><li><p>Implanting ideas in Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas_datareader <span class="keyword">as</span> pdr</span><br><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="comment">#Fetching data</span></span><br><span class="line">start = datetime.date(<span class="number">2013</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">end = datetime.date(<span class="number">2019</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">yf.pdr_override()</span><br><span class="line">TESLA = pdr.get_data_yahoo(<span class="string">"TSLA"</span>,start,end)</span><br><span class="line">GOOGLE = pdr.get_data_yahoo(<span class="string">"GOOGL"</span>,start,end)</span><br><span class="line">GM = pdr.get_data_yahoo(<span class="string">"GM"</span>,start,end)</span><br><span class="line">APPLE = pdr.get_data_yahoo(<span class="string">"AAPL"</span>,start,end)</span><br><span class="line">allocation = np.array([<span class="number">0.4</span>,<span class="number">0.2</span>,<span class="number">0.1</span>,<span class="number">0.3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Set a new dataframe with close prices only</span></span><br><span class="line">df = pd.concat([TESLA[<span class="string">"Close"</span>],GOOGLE[<span class="string">"Close"</span>],GM[<span class="string">"Close"</span>],APPLE[<span class="string">"Close"</span>]],axis = <span class="number">1</span>)</span><br><span class="line">df.columns = [<span class="string">"TESLA"</span>,<span class="string">"GOOGLE"</span>,<span class="string">"GM"</span>,<span class="string">"APPLE"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Find daily return</span></span><br><span class="line">daily_return = ((df/df.shift(<span class="number">1</span>))<span class="number">-1</span>)*allocation</span><br><span class="line">Total_daily_return = daily_return.sum(axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Find mean and std of daily return</span></span><br><span class="line">daily_return_mean = Total_daily_return.mean()</span><br><span class="line">daily_return_std = Total_daily_return.std()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Find SR and ASR</span></span><br><span class="line">SR = daily_return_mean/daily_return_std</span><br><span class="line">ASR = SR*sqrt(<span class="number">252</span>)</span><br><span class="line">print(ASR)</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;9-Time-series-analysis&quot;&gt;&lt;a href=&quot;#9-Time-series-analysis&quot; class=&quot;headerlink&quot; title=&quot;9. Time series analysis&quot;&gt;&lt;/a&gt;9. Time series analysis&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Key words related to time series:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trend: Upward, Horizontal/Stationary and Downward.&lt;/li&gt;
&lt;li&gt;Seasonality(季节性): repeated trends&lt;/li&gt;
&lt;li&gt;Cyclical(周期性): trends with no set repetition&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Statsmodels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import statsmodels.api as sm&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Demo: Hodrick-Prescott filter: $\min_{\{ \tau_{t}\} }\sum_{t}^{T}\zeta_{t}^{2}+\lambda\sum_{t=1}^{T}\left[\left(\tau_{t}-\tau_{t-1}\right)-\left(\tau_{t-1}-\tau_{t-2}\right)\right]^{2}$&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Fetching data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yf.pdr_override()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start = datetime.date(&lt;span class=&quot;number&quot;&gt;2018&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end = datetime.date(&lt;span class=&quot;number&quot;&gt;2019&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data = pdr.get_data_yahoo(&lt;span class=&quot;string&quot;&gt;&quot;TSLA&quot;&lt;/span&gt;,start,end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Applying Hodrick-Prescott filter, We get back a tuple with two elements, the first is the cycle pandas series and the second is the trend pandas series.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;close_cycle, close_trend = sm.tsa.filters.hpfilter(data[&lt;span class=&quot;string&quot;&gt;&quot;Close&quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Plotting&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fig,axe = plt.subplots(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#data[&quot;Close&quot;].plot(label = &quot;Raw data&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#close_cycle.plot(label = &quot;Cycle&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;close_trend.plot(label = &lt;span class=&quot;string&quot;&gt;&quot;Trend&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data[&lt;span class=&quot;string&quot;&gt;&quot;Close&quot;&lt;/span&gt;].rolling(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;).mean().plot(label = &lt;span class=&quot;string&quot;&gt;&quot;20MA&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;axe.set_xlabel(&lt;span class=&quot;string&quot;&gt;&quot;Price&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;axe.set_ylabel(&lt;span class=&quot;string&quot;&gt;&quot;Time&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;axe.set_title(&lt;span class=&quot;string&quot;&gt;&quot;Hodrick-Prescott filter analysis on Tesla&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.legend()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
      <category term="Finance" scheme="https://yuxuanliu.tech/categories/Finance/"/>
    
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
      <category term="Finance" scheme="https://yuxuanliu.tech/tags/Finance/"/>
    
  </entry>
  
  <entry>
    <title>Python for Finance part 1</title>
    <link href="https://yuxuanliu.tech/Python_for_Finance_1/"/>
    <id>https://yuxuanliu.tech/Python_for_Finance_1/</id>
    <published>2019-09-17T16:43:30.000Z</published>
    <updated>2019-09-30T03:32:37.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><ol><li>First do <code>activate pyfinance</code> to activate the conda environment. Then do <code>jupyter notebook</code> to run the note book</li></ol><h2 id="2-Python-review"><a href="#2-Python-review" class="headerlink" title="2. Python review"></a>2. Python review</h2><ol><li><p><code>0</code> also means <code>False</code> in python. <code>0.1</code> is <code>True</code></p><p><code>[1,2,3]</code> can also means <code>True</code> but <code>[]</code> means <code>False</code></p><p>If you have something, we can say it is <code>True</code>. If there is nothing(empty), we can say it is <code>False</code>.</p></li><li><p><code>.format()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"My name is &#123;x&#125;, I am &#123;y&#125; years old"</span>.format(y=<span class="number">19</span>,x=<span class="string">"Oscar"</span>))</span><br><span class="line">print(<span class="string">"My name is &#123;&#125;, I am &#123;&#125; years old"</span>.format(<span class="string">"Oscar"</span>,<span class="number">19</span>))</span><br></pre></td></tr></table></figure><p>The two methods above are equivalent.</p></li><li><p>Lambda expression: anonymous function, we don’t have to write the whole <code>def</code> structure.</p><ul><li><p>Basics:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line">print(a(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">print(plus(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>These two methods are equivalent.</p><a id="more"></a></li><li><p>Jump table:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jump = [<span class="keyword">lambda</span> x:x+<span class="number">1</span>,<span class="keyword">lambda</span> x:x+<span class="number">2</span>,<span class="keyword">lambda</span> x:x+<span class="number">3</span>]</span><br><span class="line">print(jump[<span class="number">0</span>](<span class="number">1</span>))</span><br><span class="line">print(jump[<span class="number">1</span>](<span class="number">1</span>))</span><br><span class="line">print(jump[<span class="number">2</span>](<span class="number">1</span>))</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>map()</code> : takes two arguments, the first argument is a function, the second argument is an iterable object. Each element within the iterable object will be passed in the function respectively. See example below.</p><ul><li><p>One way:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">2</span></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">list2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    tem = plus(i)</span><br><span class="line">    list2.append(tem)</span><br><span class="line">print(list2)</span><br></pre></td></tr></table></figure><p>As you can see, super tedious.</p></li><li><p>Using lambda expression and map function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(list(map((<span class="keyword">lambda</span> x:x+<span class="number">2</span>),[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])))</span><br></pre></td></tr></table></figure><p>We can simply make it one line of code only(for demo purpose only, can be hard to read).</p><p>Don’t forget to put a <code>list()</code> or something similar functions after using <code>map()</code></p></li></ul></li><li><p><code>filter()</code>: similar to <code>map()</code>takes two arguments, a function(must return a Boolean value) and an iterable object. Elements can only pass the filter if the function returns <code>True</code>. See the demo below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">print(list(filter((<span class="keyword">lambda</span> x:(x%<span class="number">2</span>==<span class="number">0</span>)),list1)))</span><br></pre></td></tr></table></figure><p>Again, for demo purpose only and don’t forget <code>list()</code>.</p></li><li><p><code>zip()</code>: we can combine two list into one. See below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">print(list(zip(list1,list2)))</span><br></pre></td></tr></table></figure><p>This gives <code>[(1,4),(2,5),(3,6)]</code>.</p><p>A useful trick, we can combine two lists of same length into one dictionary. See below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>]</span><br><span class="line">list2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(dict(zip(list1,list2)))</span><br></pre></td></tr></table></figure><p>This gives <code>{&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: 3}</code></p></li><li><p>Please view <a href="https://yuxuanliu.tech/python_basics/">Python basics</a> and <a href="https://yuxuanliu.tech/python_revision/">Python revision notes</a> for more information about Python.</p></li></ol><h2 id="3-Numpy-introduction"><a href="#3-Numpy-introduction" class="headerlink" title="3. Numpy introduction"></a>3. Numpy introduction</h2><p>Please refer to my <a href="https://yuxuanliu.tech/numpy_notes/">Numpy notes</a>.</p><h2 id="4-Pandas-introduction"><a href="#4-Pandas-introduction" class="headerlink" title="4. Pandas introduction"></a>4. Pandas introduction</h2><p>Please refer to my <a href="https://yuxuanliu.tech/pandas_basics/#more">Pandas basics notes</a>, <a href="https://yuxuanliu.tech/pandas_advanced/#more">Pandas advanced notes</a> and <a href="https://yuxuanliu.tech/pandas_visulisation/#more">Pandas visualization notes</a>.</p><h2 id="5-Matplotlib-introduction"><a href="#5-Matplotlib-introduction" class="headerlink" title="5. Matplotlib introduction"></a>5. Matplotlib introduction</h2><p>Please refer to my <a href="https://yuxuanliu.tech/Matplotlib_basics/#more">Matplotlib notes</a>.</p><h2 id="6-Data-sources"><a href="#6-Data-sources" class="headerlink" title="6. Data sources"></a>6. Data sources</h2><ol><li><p>Two ways of obtaining data: Pandas-datareader and <a href="https://www.quandl.com/" target="_blank" rel="noopener">Quandl</a>.</p></li><li><p>Pandas-datareader:</p><ul><li><p>Documentation: <a href="https://pandas-datareader.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">https://pandas-datareader.readthedocs.io/en/latest/index.html</a></p></li><li><p>Using Pandas-datareader to access Yahoo API:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas_datareader.data <span class="keyword">as</span> pdr</span><br><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">yf.pdr_override()</span><br><span class="line">start = datetime.date(<span class="number">2019</span>,<span class="number">1</span>,<span class="number">1</span>).__format__(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">end = datetime.date(<span class="number">2019</span>,<span class="number">6</span>,<span class="number">6</span>).__format__(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">data = pdr.get_data_yahoo(<span class="string">"FB"</span>,start,end)</span><br><span class="line">print(data.head())</span><br></pre></td></tr></table></figure></li><li><p>Using Pandas-datareader to access Quandl:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas_datareader.data <span class="keyword">as</span> pdr</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">api_key= <span class="string">"Fill in your api key"</span></span><br><span class="line">start = datetime.date(<span class="number">2014</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">end = datetime.date(<span class="number">2015</span>,<span class="number">6</span>,<span class="number">6</span>)</span><br><span class="line">data = pdr.DataReader(<span class="string">"WIKI/FB"</span>,<span class="string">"quandl"</span>,start,end,access_key=api_key)</span><br><span class="line">print(data.head())</span><br></pre></td></tr></table></figure><p><code>&quot;WIKI/FB&quot;</code> is the key on Quandl, which is in the format of <code>DB_name/Sticker_name</code>. You can find out these keys on their website. </p></li></ul></li><li><p>Quandl</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> quandl</span><br><span class="line">quandl.ApiConfig.api_key = <span class="string">"Fill in your api key"</span></span><br><span class="line">data = quandl.get(<span class="string">"WIKI/FB"</span>)</span><br><span class="line">print(data.head())</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-Pandas-with-time-series-data"><a href="#7-Pandas-with-time-series-data" class="headerlink" title="7. Pandas with time series data"></a>7. Pandas with time series data</h2><ol><li><p>Python datatime basics: refer to my <a href="https://yuxuanliu.tech/datetime_summary/#more">notes</a>.</p></li><li><p>Creating datetime index:</p><ul><li><p><code>df[&quot;A&quot;]=pd.to_date_time(df[&quot;A&quot;],format = &quot;%d/%m/%Y&quot;)</code> to convert a string date object to <code>datetime.date</code> object so it can be manipulated easily using Pandas. <code>format</code> argument gives the format that the string datetime is in.</p></li><li><p><code>index = pd.DatetimeIndex(list_of_datetime)</code> to convert Python datetime objects to the format that can be used in Pandas as a datetime index.</p></li><li><p>A quick demo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">list1 = [datetime.date(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">12</span>),datetime.date(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">13</span>)]</span><br><span class="line">index1 = pd.DatetimeIndex(list1)</span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">2</span>,<span class="number">3</span>),columns = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>],index = index1)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Methods of datetime index:</p><ul><li><code>df.index.argmax()</code>: return the index of the latest date.</li><li><code>df.index.max()</code>: return the latest date.</li><li><code>df.index.argmin()</code>: return the index of the earliest date.</li><li><code>df.index.min()</code>: return the earliest date.</li></ul></li><li><p>Time resampling(need index to be datetime index):</p><ul><li><p>Similar to the <strong>groupby</strong> method, we can groupby datetime index using year-end frequency etc. In other words, put rows within one year together for aggregate functions.</p></li><li><p><code>df.resample(rule = &quot;A&quot;).sum()</code> perform aggregate functions just like doing groupby</p><p>Another example: <code>df.resample(rule = &quot;W&quot;).apply(lambda x:x[0])</code></p></li><li><p>List of rules:</p><table><thead><tr><th>Alias</th><th>Description</th></tr></thead><tbody><tr><td>B</td><td>Business day frequency</td></tr><tr><td>D</td><td>Calendar day frequency</td></tr><tr><td>W</td><td>Weekly frequency</td></tr><tr><td>SM</td><td>Semi-month end frequency(15th and end of month)</td></tr><tr><td>M</td><td>Month end frequency</td></tr><tr><td>Q</td><td>Quarter end frequency</td></tr><tr><td>A</td><td>Year end frequency</td></tr><tr><td>BA</td><td>Business year end frequency</td></tr><tr><td>AS</td><td>Year start frequency</td></tr><tr><td>H</td><td>Hourly frequency</td></tr><tr><td>T, min</td><td>Minutely frequency</td></tr><tr><td>S</td><td>Secondly frequency</td></tr><tr><td>L, ms</td><td>Millisecond frequency</td></tr><tr><td>U, us</td><td>Microsecond frequency</td></tr><tr><td>N, ns</td><td>Nanosecond frequency</td></tr></tbody></table></li><li><p><code>df.resample(rule = &quot;A&quot;).mean().plot.bar()</code> a quick bar plot</p></li></ul></li><li><p>Time shifts(need the index to be <code>datetime.datetime</code>):</p><ul><li><code>df = df.shift(periods = 1)</code> push data forward by one day, leaving the first row <code>NaN</code>. In other words, data was on <code>2019-01-01</code> is now on <code>2019-01-02</code>. </li><li><code>df = df.shift(periods = -1)</code> push data back by one day, leaving the last row <code>NaN</code>. In other words, data was on <code>2019-01-02</code> is now on <code>2019-01-01</code>. </li><li><code>df = df.tshift(freq = &quot;M&quot;)</code> push dates within each month to the end of the month. For example, <code>2019-01-01</code> becomes <code>2019-01-31</code> and <code>2019-01-02</code> becomes <code>2019-01-31</code> etc. <code>freq</code> arguments also followed the table above.</li></ul></li><li><p>Rolling average(Moving mean): <code>df[&quot;A&quot;].rolling(window = 5).mean()</code> :</p><ul><li><p>This means we are setting the value at row 4 to be the average of row 0 to row 4 and leaving row 0 to row 3 <code>NaN</code>. </p></li><li><p>Similarly, we are setting the value at row 5 to be the average of row 1 to row 5 and keep going.</p></li><li><p>This method can remove <strong>noise</strong> from the graph and help find a general trend.</p></li><li><p>Quick demo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas_datareader.data <span class="keyword">as</span> pdr</span><br><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">yf.pdr_override()</span><br><span class="line">start = datetime.date(<span class="number">2019</span>,<span class="number">1</span>,<span class="number">1</span>).__format__(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">end = datetime.date(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">15</span>).__format__(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">data = pdr.get_data_yahoo(<span class="string">"FB"</span>,start,end)</span><br><span class="line"></span><br><span class="line">fig,axe = plt.subplots(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">axe.plot(data.index,data[<span class="string">"Open"</span>],label = <span class="string">"acutal data"</span>)</span><br><span class="line">axe.plot(data.index,data[<span class="string">"Open"</span>].rolling(<span class="number">14</span>).mean(), label = <span class="string">"rolling data"</span>)</span><br><span class="line">axe.legend(loc = <span class="number">0</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Expanding method: <code>df[&quot;A&quot;].expanding().mean()</code></p><ul><li><p>This means we are setting the value at each row to be the average of all values in <strong>previous rows</strong>.</p></li><li><p>Quick demo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas_datareader.data <span class="keyword">as</span> pdr</span><br><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">yf.pdr_override()</span><br><span class="line">start = datetime.date(<span class="number">2019</span>,<span class="number">1</span>,<span class="number">1</span>).__format__(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">end = datetime.date(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">15</span>).__format__(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">data = pdr.get_data_yahoo(<span class="string">"FB"</span>,start,end)</span><br><span class="line"></span><br><span class="line">fig,axe = plt.subplots(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">axe.plot(data.index,data[<span class="string">"Open"</span>],label = <span class="string">"acutal data"</span>)</span><br><span class="line">axe.plot(data.index,data[<span class="string">"Open"</span>].rolling(<span class="number">30</span>).mean(), label = <span class="string">"rolling data"</span>)</span><br><span class="line">axe.plot(data.index,data[<span class="string">"Open"</span>].expanding().mean(), label = <span class="string">"expanding data"</span>)</span><br><span class="line">axe.legend(loc = <span class="number">0</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>The <code>.rolling()</code> method is more popular than the <code>.expanding()</code> method.</p></li></ul></li><li><p>Bollinger bands(布林线):</p><ul><li><p>General information:</p><ul><li>Bollinger bands are <strong>volatility bands</strong> placed above and below the moving average.</li><li>Volatility is based on the standard deviation.</li><li>Bands <strong>widen</strong> when volatility increases and <strong>narrow</strong> when volatility decreases.</li><li>Bands are used to determine whether a price movement is significant.</li><li>Price is relatively high when it is above the upper band and relatively low under the lower band.</li><li>You shouldn’t use Bollinger bands solely for trading.</li></ul></li><li><p>Full code for plotting:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas_datareader.data <span class="keyword">as</span> pdr</span><br><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">yf.pdr_override()</span><br><span class="line">start = datetime.date(<span class="number">2019</span>,<span class="number">1</span>,<span class="number">1</span>).__format__(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">end = datetime.date(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">15</span>).__format__(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">data = pdr.get_data_yahoo(<span class="string">"FB"</span>,start,end)</span><br><span class="line"></span><br><span class="line">fig,axe = plt.subplots(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">#Source data</span></span><br><span class="line">axe.plot(data.index,data[<span class="string">"Close"</span>],label = <span class="string">"Source data"</span>)</span><br><span class="line"><span class="comment">#20MA</span></span><br><span class="line">axe.plot(data.index,data[<span class="string">"Close"</span>].rolling(<span class="number">20</span>).mean(), label = <span class="string">"20MA"</span>)</span><br><span class="line"><span class="comment">#Upper band</span></span><br><span class="line">axe.plot(data.index,data[<span class="string">"Close"</span>].rolling(<span class="number">20</span>).mean()+<span class="number">2</span>*data[<span class="string">"Close"</span>].rolling(<span class="number">20</span>).std(), label = <span class="string">"Upper band"</span>)</span><br><span class="line"><span class="comment">#Lower band</span></span><br><span class="line">axe.plot(data.index,data[<span class="string">"Close"</span>].rolling(<span class="number">20</span>).mean()<span class="number">-2</span>*data[<span class="string">"Close"</span>].rolling(<span class="number">20</span>).std(), label = <span class="string">"Lower band"</span>)</span><br><span class="line"></span><br><span class="line">axe.set_xlabel(<span class="string">"Time"</span>)</span><br><span class="line">axe.set_ylabel(<span class="string">"Price"</span>)</span><br><span class="line">axe.set_title(<span class="string">"Bollinger bands for Facebook between 1/1/2019 and 15/9/2015"</span>)</span><br><span class="line">axe.legend(loc = <span class="number">0</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ul><li>20 days <strong>closing moving average</strong> is used(20MA)</li><li>Upper band = 20MA + 2$\times$ std(20 days)</li><li>Lower band = 20MA - 2$\times$ std(20 days)</li></ul></li></ul></li></ol><h2 id="8-Notes-on-the-capstone-project"><a href="#8-Notes-on-the-capstone-project" class="headerlink" title="8. Notes on the capstone project"></a>8. Notes on the capstone project</h2><ol><li><p>Two ways of finding the index of the maximum value in a column:</p><ul><li><code>data3.sort_values(&quot;Volume&quot;,ascending= False).iloc[0:1].index</code></li><li><code>data3[&quot;Volume&quot;].argmax()</code></li></ul></li><li><p>Market cap = share price $\times$ total units of stock present</p><p>A company with higher share price does not necessary be more valuable than the other with a lower share price as we also need to take into account the total units of stock present.</p></li><li><p>Plotting scatter matrix:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas.plotting <span class="keyword">import</span> scatter_matrix</span><br><span class="line">scatter_matrix(df1,figsize=(<span class="number">16</span>,<span class="number">8</span>),alpha = <span class="number">0.2</span>,hist_kwds= &#123;<span class="string">'bins'</span>:<span class="number">30</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Candlestick chart(K线图):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas_datareader <span class="keyword">as</span> pdr</span><br><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"><span class="keyword">from</span> mpl_finance <span class="keyword">import</span> candlestick_ohlc</span><br><span class="line"><span class="keyword">from</span> matplotlib.dates <span class="keyword">import</span> DateFormatter, date2num, WeekdayLocator, DayLocator, MONDAY</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Fetching data</span></span><br><span class="line">yf.pdr_override()</span><br><span class="line">start = datetime.date(<span class="number">2019</span>,<span class="number">8</span>,<span class="number">16</span>).__format__(<span class="string">"%d-%m-%Y"</span>)</span><br><span class="line">end = datetime.date(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">16</span>).__format__(<span class="string">"%d-%m-%Y"</span>)</span><br><span class="line">data = pdr.get_data_yahoo(<span class="string">"TSLA"</span>,start,end)</span><br><span class="line"><span class="comment">#Reset index because there is no .apply() method on datetimeindex, we need to change it into a normal column first.</span></span><br><span class="line">df2 = data.reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Change datetime.date into integer days so it can be recognised by Matplotlib</span></span><br><span class="line">df2[<span class="string">"date in num"</span>] = df2[<span class="string">"Date"</span>].apply(<span class="keyword">lambda</span> x:date2num(x))</span><br><span class="line"></span><br><span class="line"><span class="comment">#candlestick_ohlc() is taking a list with tuples(date_num,Open,High,Low,Close) inside</span></span><br><span class="line">list_for_plotting = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(df2[<span class="string">"Date"</span>])):</span><br><span class="line">    info=(float(df2.loc[i,<span class="string">"date in num"</span>]),float(df2.loc[i,<span class="string">"Open"</span>]),float(df2.loc[i,<span class="string">"High"</span>]),float(df2.loc[i,<span class="string">"Low"</span>]),float(df2.loc[i,<span class="string">"Close"</span>]))</span><br><span class="line">    list_for_plotting.append(info)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#Formatting candlestick chart</span></span><br><span class="line">mondays = WeekdayLocator(MONDAY)        <span class="comment"># major ticks on the mondays</span></span><br><span class="line">alldays = DayLocator()              <span class="comment"># minor ticks on the days</span></span><br><span class="line">weekFormatter = DateFormatter(<span class="string">'%b %d'</span>)  <span class="comment"># e.g., Jan 12</span></span><br><span class="line">dayFormatter = DateFormatter(<span class="string">'%d'</span>)      <span class="comment"># e.g., 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Plot it</span></span><br><span class="line">fig, ax = plt.subplots(figsize = (<span class="number">16</span>,<span class="number">8</span>))</span><br><span class="line">fig.subplots_adjust(bottom=<span class="number">0.2</span>)</span><br><span class="line">ax.xaxis.set_major_locator(mondays)</span><br><span class="line">ax.xaxis.set_minor_locator(alldays)</span><br><span class="line">ax.xaxis.set_major_formatter(weekFormatter)</span><br><span class="line">candlestick_ohlc(ax, list_for_plotting, width=<span class="number">0.6</span>, colorup=<span class="string">'g'</span>,colordown=<span class="string">'r'</span>)</span><br><span class="line">ax.set_title(<span class="string">"Candlestick chart for Tesla between 17/8/2019 and 17/9/2015"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>Daily percentage change(Daily return) = $\frac{P_{t}}{P_{t-1}}-1$</p><ul><li><p>$P_{t}$: price at time <strong>t</strong></p></li><li><p>$P_{t-1}$: price at time <strong>t-1</strong></p></li><li><p>Percentage of gain in one day relative to <strong>the price of yesterday</strong>.</p></li><li><p>If you plot daily return in a histogram and it is wide means high volatility</p></li><li><p>Python code:</p><ul><li><p>Method 1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"daily return"</span>] = (df[<span class="string">"Close"</span>]/df.shift(<span class="number">1</span>)[<span class="string">"Close"</span>]) - <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>Method 2”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"daily return"</span>] = df[<span class="string">"Close"</span>].pct_change(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><code>.pct_change(1)</code> means percentage change in a period of 1 day and it is exactly what we do in method 1.</p></li></ul></li></ul></li><li><p>Cumulative daily returns:</p><ul><li><p>The aggregate amount an investment has gained or lost over time, independent of the period of time involved.</p></li><li><p>Daily return is useful but it doesn’t give a insight into how much a investor is actually making. Cumulative return is computed relatively to <strong>the day investment is made</strong>.</p></li><li><p>Formula: $R_{c} = \frac{P_{t}}{P_{0}}-1$</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Introduction&quot;&gt;&lt;a href=&quot;#1-Introduction&quot; class=&quot;headerlink&quot; title=&quot;1. Introduction&quot;&gt;&lt;/a&gt;1. Introduction&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;First do &lt;code&gt;activate pyfinance&lt;/code&gt; to activate the conda environment. Then do &lt;code&gt;jupyter notebook&lt;/code&gt; to run the note book&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-Python-review&quot;&gt;&lt;a href=&quot;#2-Python-review&quot; class=&quot;headerlink&quot; title=&quot;2. Python review&quot;&gt;&lt;/a&gt;2. Python review&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;0&lt;/code&gt; also means &lt;code&gt;False&lt;/code&gt; in python. &lt;code&gt;0.1&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[1,2,3]&lt;/code&gt; can also means &lt;code&gt;True&lt;/code&gt; but &lt;code&gt;[]&lt;/code&gt; means &lt;code&gt;False&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you have something, we can say it is &lt;code&gt;True&lt;/code&gt;. If there is nothing(empty), we can say it is &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.format()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;My name is &amp;#123;x&amp;#125;, I am &amp;#123;y&amp;#125; years old&quot;&lt;/span&gt;.format(y=&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;,x=&lt;span class=&quot;string&quot;&gt;&quot;Oscar&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;My name is &amp;#123;&amp;#125;, I am &amp;#123;&amp;#125; years old&quot;&lt;/span&gt;.format(&lt;span class=&quot;string&quot;&gt;&quot;Oscar&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The two methods above are equivalent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lambda expression: anonymous function, we don’t have to write the whole &lt;code&gt;def&lt;/code&gt; structure.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Basics:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x,y:x+y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(a(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x,y)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x+y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(plus(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;These two methods are equivalent.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
      <category term="Finance" scheme="https://yuxuanliu.tech/categories/Finance/"/>
    
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
      <category term="Finance" scheme="https://yuxuanliu.tech/tags/Finance/"/>
    
  </entry>
  
  <entry>
    <title>Pandas visulisation basics</title>
    <link href="https://yuxuanliu.tech/pandas_visulisation/"/>
    <id>https://yuxuanliu.tech/pandas_visulisation/</id>
    <published>2019-09-16T17:01:53.000Z</published>
    <updated>2019-09-16T10:05:37.354Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><code>import seaborn as sns</code> to make your plots more stylish(optional).</p></li><li><p><code>df1[&quot;A&quot;].plot.hist(bins = 30)</code> to produce a histogram from <strong>values</strong>, y axis will be frequency.</p></li><li><p><code>df1[&quot;A&quot;].plot.line()</code> to produce a line plot. It is also the graph you get if you do <code>df1[&quot;A&quot;].plot()</code></p></li><li><p><code>df1.plot.area(alpha = 0.5)</code> to produce an area plot which is similar to a line plot but the area under the lines is filled.</p></li><li><p><code>df1.plot.bar()</code> to produce a bar plot</p><a id="more"></a></li><li><ul><li><code>df1.plot.scatter(x=&quot;A&quot;,y=&quot;B&quot;,c=&quot;C&quot;)</code> to produce a scatter plot(散布图). Use the argument <code>c</code> to set intensity of the color so we have a scatter plot in <strong>3D</strong>.</li><li><code>df1.plot.scatter(x=&quot;A&quot;,y=&quot;B&quot;,s=df1[&quot;C&quot;]*100)</code> we can also use sizes of the dots rather than intensity of the color to express values of the third column.</li></ul></li><li><p><code>df = pd.read_csv(&quot;Filename.csv&quot;,index_col = &quot;A&quot;, parse_dates= True)</code> to read data with datetime information.</p></li><li><p><code>df.plot.line(xlim = [&quot;2007-01-01&quot;,&quot;2008-01-01&quot;],ylim = [20,50])</code> set boundaries for x axis and y axis of the plot.</p></li><li><p>Formatting plots with datatime information:</p><ul><li><p>Full code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.dates <span class="keyword">as</span> dates</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'mcdonalds.csv'</span>,index_col=<span class="string">'Date'</span>,parse_dates=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#Slcing date information</span></span><br><span class="line">idx = df.loc[<span class="string">"2007-01-01"</span>:<span class="string">"2007-01-29"</span>].index</span><br><span class="line"><span class="comment">#slicing data</span></span><br><span class="line">data = df.loc[<span class="string">"2007-01-01"</span>:<span class="string">"2007-01-29"</span>,<span class="string">"Adj. Close"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Creating a plot on Matplotlib</span></span><br><span class="line">fig,axe = plt.subplots(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">#A special line of code when ploting time series data</span></span><br><span class="line">axe.plot_date(idx,data,<span class="string">"-"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Setting scale and formatting of the minor axis</span></span><br><span class="line">axe.xaxis.set_minor_locator(dates.DayLocator())</span><br><span class="line">axe.xaxis.set_minor_formatter(dates.DateFormatter(<span class="string">"%d"</span>))</span><br><span class="line"><span class="comment">#Setting scale and formatting of the major axis</span></span><br><span class="line">axe.xaxis.set_major_locator(dates.WeekdayLocator(byweekday=<span class="number">0</span>))</span><br><span class="line">axe.xaxis.set_major_formatter(dates.DateFormatter(<span class="string">"%A"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Fixing overlap</span></span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>Basically slicing data from the dataframe first. Then, plot and format data again in Matplotlib.</p></li><li><p><code>import matplotlib.dates as dates</code> the module used for formatting dates</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idx = df.loc[<span class="string">"2007-01-01"</span>:<span class="string">"2007-01-29"</span>].index</span><br><span class="line">data = df.loc[<span class="string">"2007-01-01"</span>:<span class="string">"2007-01-29"</span>,<span class="string">"Adj. Close"</span>]</span><br></pre></td></tr></table></figure><p>Slicing dates and values from the dataframe</p></li><li><p><code>axe.xaxis.set_major_locator(dates.Monthlocator())</code> setting the scale(刻度) of the major axis and the minor axis. There are:</p><ul><li><code>.MinuteLocator()</code>: set minute as the scale</li><li><code>.HourLocator()</code>: set hour as the scale</li><li><code>.DayLocator()</code>: set day as the scale</li><li><code>.WeekdayLocator(byweekday = 0)</code>: Set week as the scale and every Monday will be shown</li><li><code>.MonthLocator()</code>: Set month as the scale</li><li><code>.YearLocator()</code>: Set year as the scale</li></ul></li><li><p><code>axe.xaxis.set_major_formatter(dates.DateFormatter(&quot;%b-%Y&quot;))</code> formatting date expression</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axe.xaxis.set_minor_locator(dates.MonthLocator())</span><br><span class="line">axe.xaxis.set_minor_locator(dates.DateFormattor(<span class="string">"%n"</span>))</span><br></pre></td></tr></table></figure><p>Works exactly the same for setting minor axis.</p></li><li><p><code>fig.autofmt_xdate()</code> solve the overlapping problem in the x axis</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import seaborn as sns&lt;/code&gt; to make your plots more stylish(optional).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;df1[&amp;quot;A&amp;quot;].plot.hist(bins = 30)&lt;/code&gt; to produce a histogram from &lt;strong&gt;values&lt;/strong&gt;, y axis will be frequency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;df1[&amp;quot;A&amp;quot;].plot.line()&lt;/code&gt; to produce a line plot. It is also the graph you get if you do &lt;code&gt;df1[&amp;quot;A&amp;quot;].plot()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;df1.plot.area(alpha = 0.5)&lt;/code&gt; to produce an area plot which is similar to a line plot but the area under the lines is filled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;df1.plot.bar()&lt;/code&gt; to produce a bar plot&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
      <category term="Pandas" scheme="https://yuxuanliu.tech/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Python datetime summary</title>
    <link href="https://yuxuanliu.tech/datetime_summary/"/>
    <id>https://yuxuanliu.tech/datetime_summary/</id>
    <published>2019-09-15T23:03:21.000Z</published>
    <updated>2019-09-16T16:19:00.903Z</updated>
    
    <content type="html"><![CDATA[<p><code>import datetime</code></p><h2 id="1-datetime-date"><a href="#1-datetime-date" class="headerlink" title="1. datetime.date"></a>1. datetime.date</h2><ol><li><p><code>datetime.date.today()</code> return the date of today. </p></li><li><p>Accessing year, month and date attributes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = datetime.date.today()</span><br><span class="line">print(a.year)</span><br><span class="line">print(a.month)</span><br><span class="line">print(a.day)</span><br></pre></td></tr></table></figure></li><li><p><code>b = datetime.date(Year,Month,Day)</code> create a <code>datetime.date</code> object manually</p><a id="more"></a></li><li><p>Difference between two <code>datetime.date</code> objects:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = datetime.date.today()</span><br><span class="line">b = datetime.date(<span class="number">2019</span>,<span class="number">3</span>,<span class="number">15</span>)</span><br><span class="line">diff = a - b</span><br><span class="line">print(diff)</span><br><span class="line">print(diff.day)</span><br></pre></td></tr></table></figure><p><strong>diff</strong> is a <code>datetime.timedelta</code> object with <code>day</code>, <code>hour</code>, <code>minute</code>, <code>second</code> and <code>microsecond</code> attributes but you can’t <code>print()</code> these attributes directly. In stead, you need to add <code>datetime.timedelta</code> to <code>datetime.date</code> or <code>datetime.datetime</code>.</p></li><li><p>Compare size between <code>datetime.date</code> objects</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = datetime.date.today()</span><br><span class="line">b = datetime.date(<span class="number">2019</span>,<span class="number">3</span>,<span class="number">15</span>)</span><br><span class="line">print(a.__gt__(b))</span><br></pre></td></tr></table></figure><p>There are a list of similar methods available:</p><table><thead><tr><th>Methods</th><th>Operators</th></tr></thead><tbody><tr><td>a.__eq__(b)</td><td>a==b</td></tr><tr><td>a.__ge__(b)</td><td>a&gt;=b</td></tr><tr><td>a.__gt__(b)</td><td>a&gt;b</td></tr><tr><td>a.__le__(b)</td><td>a&lt;b</td></tr><tr><td>a.__lt__(b)</td><td>a&lt;=b</td></tr><tr><td>a.__ne__(b)</td><td>a!=b</td></tr></tbody></table></li><li><p><code>datetime.date()</code> methods:</p><ul><li><p><code>.isocalendar()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">day = datetime.date(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">3</span>)</span><br><span class="line">tup_format = day.isocalendar()</span><br><span class="line">print(tup_format)</span><br><span class="line"><span class="comment">#(2019, 36, 2)</span></span><br></pre></td></tr></table></figure><p>Returns a tuple in the format of <code>(year, week number, weekday)</code></p></li><li><p>String formatting</p><ul><li><p><code>.isoformat()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">day = datetime.date(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">3</span>)</span><br><span class="line">str_format = day.isoformat()</span><br><span class="line">print(str_format)</span><br><span class="line"><span class="comment">#"2019-09-03"</span></span><br></pre></td></tr></table></figure><p>Change <code>datetime.date</code> into a string(“%Y-%m-%d”)</p></li><li><p><code>.__format__()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">day = datetime.date(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">3</span>)</span><br><span class="line">str_format = day.__format(<span class="string">"%d/%m/%Y"</span>)</span><br><span class="line">print(str_format)</span><br><span class="line"><span class="comment">#"03/09/2019"</span></span><br></pre></td></tr></table></figure><p>Use the table in the appendix as reference. More control of the string format.</p></li><li><p><code>.__str__()</code></p><p>Does the same as <code>.isoformat()</code></p></li></ul></li><li><p><code>.isoweekday()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">day = datetime.date(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">3</span>)</span><br><span class="line">weekday = day.isoweekday()</span><br><span class="line">print(weekday)</span><br><span class="line"><span class="comment">#2</span></span><br></pre></td></tr></table></figure><p><strong>1</strong> stands for Monday and <strong>2</strong> stands for Tuesday etc.</p></li><li><p><code>.fromtimestamp()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">stamp = time.time()</span><br><span class="line">day = datetime.date.fromtimestamp(stamp)</span><br><span class="line">print(day.isoformat())</span><br><span class="line"><span class="comment">#"2019-09-16"</span></span><br></pre></td></tr></table></figure><p>Change a time stamp to <code>datetime.date</code></p></li></ul></li></ol><h2 id="2-datetime-time"><a href="#2-datetime-time" class="headerlink" title="2. datetime.time"></a>2. datetime.time</h2><ol><li><p>Create a <code>datetime.time()</code> object manually: <code>b = datetime.time(Hour,Minute,Second,microsecond)</code></p></li><li><p>Accessing hour, minute, second, microsecond attributes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = datetime.time(<span class="number">19</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">113232</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(a.hour)</span><br><span class="line">print(a.minute)</span><br><span class="line">print(a.second)</span><br><span class="line">print(a.microsecond)</span><br></pre></td></tr></table></figure></li><li><p>Compare size between <code>datetime.time</code> objects: works the same as <code>datetime.date</code></p></li><li><p>String formatting:</p><ul><li><code>.__format__()</code>: works the same as <code>datetime.date</code></li><li><code>.__str__()</code>: return a string in <code>Hour:Minute:Second:Mircosecond</code> format.</li></ul></li></ol><h2 id="3-datetime-datetime"><a href="#3-datetime-datetime" class="headerlink" title="3. datetime.datetime"></a>3. datetime.datetime</h2><ol><li><p><code>datetime.datetime()</code> is like a combination of <code>datetime.date</code> and <code>datetime.time</code></p></li><li><p>Create a <code>datetime.datetime()</code> object manually: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = datetime.datetime(Year,Month,Day,Hour,Minute,Second,microsecond)</span><br></pre></td></tr></table></figure></li><li><p>Accessing date and time attributes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = datetime.datetime(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">42</span>,<span class="number">352445</span>)</span><br><span class="line">print(b.date())</span><br><span class="line">print(b.time())</span><br></pre></td></tr></table></figure><p>In other words, splitting <code>datetime.datetime</code> into <code>datetime.date</code> and <code>datetime.time</code></p></li><li><p><code>datetime.datetime.now()</code> return the current datetime</p></li><li><p><code>datetime.datetime.combine()</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = datetime.date(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">17</span>)</span><br><span class="line">b = datetime.time(<span class="number">9</span>,<span class="number">13</span>,<span class="number">42</span>,<span class="number">352445</span>)</span><br><span class="line">c = datetime.datetime.combine(a,b)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><p>Combine a <code>datetime.date</code> and a <code>datetime.time</code> into a <code>datetime.datetime</code></p></li><li><p>Difference between two <code>datetime.datetime</code> objects:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">a = datetime.datetime.now()</span><br><span class="line">b = datetime.datetime(<span class="number">2019</span>,<span class="number">9</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">42</span>,<span class="number">352445</span>)</span><br><span class="line">diff = b-a</span><br><span class="line">print(diff)</span><br></pre></td></tr></table></figure><p><strong>diff</strong> is a <code>datetime.timedelta</code> object, we can also add a <code>datetime.timedelta</code> to another <code>datetime.datetime</code> to obtain a <code>datetime.datetime</code>.</p></li></ol><h2 id="4-Appendix"><a href="#4-Appendix" class="headerlink" title="4. Appendix"></a>4. Appendix</h2><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>%y</code></td><td>两位数的年份表示（00-99）</td></tr><tr><td><code>%Y</code></td><td>四位数的年份表示（000-9999）</td></tr><tr><td><code>%m</code></td><td>月份（01-12）</td></tr><tr><td><code>%d</code></td><td>月内中的一天（0-31）</td></tr><tr><td><code>%H</code></td><td>24小时制小时数（0-23）</td></tr><tr><td><code>%I</code></td><td>12小时制小时数（01-12）</td></tr><tr><td><code>%M</code></td><td>分钟数（00=59）</td></tr><tr><td><code>%S</code></td><td>秒（00-59）</td></tr><tr><td><code>%a</code></td><td>本地简化星期名称</td></tr><tr><td><code>%A</code></td><td>本地完整星期名称</td></tr><tr><td><code>%b</code></td><td>本地简化的月份名称</td></tr><tr><td><code>%B</code></td><td>本地完整的月份名称</td></tr><tr><td><code>%c</code></td><td>本地相应的日期表示和时间表示</td></tr><tr><td><code>%j</code></td><td>年内的一天（001-366）</td></tr><tr><td><code>%p</code></td><td>本地A.M.或P.M.的等价符</td></tr><tr><td><code>%U</code></td><td>一年中的星期数（00-53）星期天为星期的开始</td></tr><tr><td><code>%w</code></td><td>星期（0-6），星期天为星期的开始</td></tr><tr><td><code>%W</code></td><td>一年中的星期数（00-53）星期一为星期的开始</td></tr><tr><td><code>%x</code></td><td>本地相应的日期表示</td></tr><tr><td><code>%X</code></td><td>本地相应的时间表示</td></tr><tr><td><code>%Z</code></td><td>当前时区的名称</td></tr><tr><td><code>%%</code></td><td>%号本身</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;import datetime&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-datetime-date&quot;&gt;&lt;a href=&quot;#1-datetime-date&quot; class=&quot;headerlink&quot; title=&quot;1. datetime.date&quot;&gt;&lt;/a&gt;1. datetime.date&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;datetime.date.today()&lt;/code&gt; return the date of today. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Accessing year, month and date attributes:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = datetime.date.today()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(a.year)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(a.month)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(a.day)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;b = datetime.date(Year,Month,Day)&lt;/code&gt; create a &lt;code&gt;datetime.date&lt;/code&gt; object manually&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib basics</title>
    <link href="https://yuxuanliu.tech/Matplotlib_basics/"/>
    <id>https://yuxuanliu.tech/Matplotlib_basics/</id>
    <published>2019-09-13T22:55:53.000Z</published>
    <updated>2019-09-13T16:15:03.033Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>There are two ways of working with Matplotlib: function method and OOP method.</p></li><li><p><code>import matplotlib.pyplot as plt</code></p></li><li><ul><li><code>%matplotlib inline</code> to visualize plots inside the <strong>Jupyter notebook</strong>.</li><li><code>plt.show()</code> to visualize plots in other IDE.</li></ul></li><li><p>Quick examples:</p><ul><li><p>Functional method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">0.01</span>)</span><br><span class="line">y = x**<span class="number">2</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.xlabel(<span class="string">"X Label"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Y Label"</span>)</span><br><span class="line">plt.title(<span class="string">"Fill in the title"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>Just putting data into <code>plt.plot()</code></p><a id="more"></a></li><li><p>Subplot method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">0.01</span>)</span><br><span class="line">y = x**<span class="number">2</span></span><br><span class="line"><span class="comment">#First part of the subplot with 1 row and 2 column and the serial number: 1</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot(x,y)</span><br><span class="line"><span class="comment">#Second part of the subplot with 1 row and 2 column and has the serial number: 2</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.plot(y,x)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>A bit messy as we are using the function method, everything will be clear after we do the OOP method.</p></li><li><p>OOP method:</p><ul><li><p>Full codes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">  <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">  x = np.arange(<span class="number">1</span>,<span class="number">5</span>,<span class="number">0.1</span>)</span><br><span class="line">  y = x**<span class="number">2</span></span><br><span class="line">  fig = plt.figure()</span><br><span class="line">  axes1 = fig.add_axes([<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.3</span>,<span class="number">0.3</span>])</span><br><span class="line">  axes1.set_xlabel(<span class="string">"Fill in the name for x axis"</span>)</span><br><span class="line">  axes1.set_ylabel(<span class="string">"Fill in the name for y axis"</span>)</span><br><span class="line">  axes1.set_title(<span class="string">"Fill in the title"</span>)</span><br><span class="line">  axes1.plot(x,y)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  axes2 = fig.add_axes([<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.3</span>,<span class="number">0.3</span>])</span><br><span class="line">  axes2.set_xlabel(<span class="string">"Fill in the name for x axis"</span>)</span><br><span class="line">  axes2.set_ylabel(<span class="string">"Fill in the name for y axis"</span>)</span><br><span class="line">  axes2.set_title(<span class="string">"Fill in the title"</span>)</span><br><span class="line">  axes2.plot(y,x)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p><code>fig = plt.figure()</code> creating a figure object, you can consider this as a large canvas we may put multiple axes and plots on the canvas.</p></li><li><p><code>axes = fig.add_axe([origin_x,origin_y,length_x,length_y])</code> Creating an axes object on the canvas, we can put graph inside this axes object. It takes four arguments, first two set the origin of the axes, the remainder two determines the length of the axes, where <code>1.0</code> is the maximum length of the canvas. A quick example: <code>axes = fig.add_axe[0.1,0.1,0.8,0.8]</code></p></li><li><p><code>axes.plot(x,y)</code> plot the graph inside the axis.</p></li><li><p>We have two axis on one canvas. It is very clear and <strong>flexible</strong>. I highly recommend using the OOP method rather than the function method.</p></li></ul></li></ul></li><li><p><code>.subplots()</code>:</p><ul><li><p>Full codes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">5</span>,<span class="number">0.1</span>)</span><br><span class="line">y = x**<span class="number">2</span></span><br><span class="line"><span class="comment"># 1*2 layout</span></span><br><span class="line">fig,axes = plt.subplots(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">axes[<span class="number">0</span>].plot(x,y)</span><br><span class="line">axes[<span class="number">1</span>].plot(y,x)    </span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 2*1 layout</span></span><br><span class="line">fig1,axes1 = plt.subplots(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">axes1[<span class="number">0</span>].plot(x,y)</span><br><span class="line">axes1[<span class="number">1</span>].plot(y,x)    </span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p><code>.subplot()</code> will do the formatting for us when creating multiple axes so we don’t have to fill in <code>.add_axis()</code> manually which is quite laborious.</p></li><li><p><code>fig,axes = plt.subplots(nrows = 1,ncols = 2)</code> This will automatically set locations of axes on the canvas. We have one row and two columns of axes here(1$\times$2 axes).</p></li><li><p><code>axes</code> here is an array. We can access individual axes by indexing <code>axes[0]</code> etc.</p></li><li><p><code>plt.tight_layout()</code> will fix the problem that axes overlapping with each other. I would say just add this line every time you do <code>plt.show()</code>in case.</p></li></ul></li><li><p>Figure size and DPI(分辨率)</p><ul><li><code>fig = plt.figure(figsize = (3,2),dpi = 100)</code><ul><li><code>figsize</code> sets the size of the ‘canvas’ and unit is <strong>inch</strong>.</li><li>dpi stands for <strong>dots per inch</strong>, normally we can just use the default dpi.</li></ul></li><li><code>fig,axes = plt.subplots(2,1,figsize = (4,4),dpi = 100)</code> works for <code>.subplots()</code> as well</li></ul></li><li><p>Save the plot: </p><ul><li><code>fig.savefig(&quot;filename.png&quot;)</code> to save the plot, also supports <strong>.jpg</strong>, <strong>.pdf</strong> etc.</li><li>Must save the plot before <code>plt.show()</code></li></ul></li><li><p>Legends(图例):</p><ul><li><p>We can put multiple plots in one axe. By adding legends, the graph will become more clear.</p></li><li><p>Full codes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">5</span>,<span class="number">0.1</span>)</span><br><span class="line">figure = plt.figure()</span><br><span class="line">axe = figure.add_axes([<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.8</span>,<span class="number">0.8</span>])</span><br><span class="line">axe.plot(a,a**<span class="number">2</span>,label = <span class="string">"X^2"</span>)</span><br><span class="line">axe.plot(a,a**<span class="number">3</span>,label = <span class="string">"X^3"</span>)</span><br><span class="line">axe.legend(loc = <span class="number">0</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ul><li><p>add another argument <code>label</code> in <code>axe.plot()</code></p></li><li><p><code>axe.legend(loc = 0)</code> before <code>plt.show()</code>.</p><p><code>loc</code> argument will pick the best location for the legend to prevent overlapping with plots.</p></li></ul></li></ul></li><li><p>Styling:</p><ul><li><p>Full codes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">5</span>,<span class="number">0.1</span>)</span><br><span class="line">figure = plt.figure()</span><br><span class="line">axe = figure.add_axes([<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.8</span>,<span class="number">0.8</span>])</span><br><span class="line">axe.plot(a,a**<span class="number">2</span>,color = <span class="string">"orange"</span>,</span><br><span class="line">             linewidth = <span class="number">3</span>,</span><br><span class="line">         alpha = <span class="number">0.6</span>,</span><br><span class="line">         linestyle = <span class="string">"--"</span>,</span><br><span class="line">        marker = <span class="string">"o"</span>,</span><br><span class="line">        markersize = <span class="number">2</span>,</span><br><span class="line">        markerfacecolor = <span class="string">"blue"</span>,</span><br><span class="line">        )</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p><code>color = &quot;orange&quot;</code> to customize the color of the line, we can also use <strong>RGB hex code</strong> here for rare colors(Cambridge Blue:-) ).</p></li><li><p><code>linewidth = 3</code> to set the width of the line, by default it is 1.</p></li><li><p><code>alpha = 0.6</code> to set the transparency of our line, by default it is 1 which means not transparent at all.</p></li><li><p><code>linestype = &quot;--&quot;</code> to set the style of the line, refer to the doc for other options.</p></li><li><p><code>marker = &quot;o&quot;</code> to set some markers on the line, refer to the doc for other options.</p></li><li><p><code>markersize = 2</code> to set the size of markers.</p></li><li><p><code>markerfacecolor = &quot;blue&quot;</code> to set the color of markers.</p></li></ul></li><li><p>Plot range:</p><ul><li><p>Full code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">5</span>,<span class="number">0.1</span>)</span><br><span class="line">figure = plt.figure()</span><br><span class="line">axe = figure.add_axes([<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.8</span>,<span class="number">0.8</span>])</span><br><span class="line">axe.plot(a,a**<span class="number">2</span>)</span><br><span class="line">axe.set_xlim([<span class="number">0</span>,<span class="number">5</span>])</span><br><span class="line">axe.set_ylim([<span class="number">0</span>,<span class="number">30</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p><code>axe.set_xlim([lower_boundary,higher_boundary])</code> to set boundaries for the x axis.</p></li><li><p><code>axe.set_ylim([lower_boundary,higher_boundary])</code> to set boundaries for the y axis.</p></li></ul></li><li><p>Further reading:</p><ul><li><a href="http://www.matplotlib.org" target="_blank" rel="noopener">http://www.matplotlib.org</a> - The project web page for matplotlib.</li><li><a href="https://github.com/matplotlib/matplotlib" target="_blank" rel="noopener">https://github.com/matplotlib/matplotlib</a> - The source code for matplotlib.</li><li><a href="http://matplotlib.org/gallery.html" target="_blank" rel="noopener">http://matplotlib.org/gallery.html</a> - A large gallery with various types of plots matplotlib can create. Highly recommended! </li><li><a href="http://www.loria.fr/~rougier/teaching/matplotlib" target="_blank" rel="noopener">http://www.loria.fr/~rougier/teaching/matplotlib</a> - A good matplotlib tutorial.</li><li><a href="http://scipy-lectures.github.io/matplotlib/matplotlib.html" target="_blank" rel="noopener">http://scipy-lectures.github.io/matplotlib/matplotlib.html</a> - Another good matplotlib reference.</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;There are two ways of working with Matplotlib: function method and OOP method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import matplotlib.pyplot as plt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%matplotlib inline&lt;/code&gt; to visualize plots inside the &lt;strong&gt;Jupyter notebook&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plt.show()&lt;/code&gt; to visualize plots in other IDE.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Quick examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Functional method:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x = np.arange(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0.01&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;y = x**&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot(x,y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.xlabel(&lt;span class=&quot;string&quot;&gt;&quot;X Label&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.ylabel(&lt;span class=&quot;string&quot;&gt;&quot;Y Label&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.title(&lt;span class=&quot;string&quot;&gt;&quot;Fill in the title&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Just putting data into &lt;code&gt;plt.plot()&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="Matplotlib" scheme="https://yuxuanliu.tech/tags/Matplotlib/"/>
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pandas advanced</title>
    <link href="https://yuxuanliu.tech/pandas_advanced/"/>
    <id>https://yuxuanliu.tech/pandas_advanced/</id>
    <published>2019-09-12T14:21:17.000Z</published>
    <updated>2019-09-12T17:25:57.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Handling-missing-data"><a href="#1-Handling-missing-data" class="headerlink" title="1. Handling missing data"></a>1. Handling missing data</h2><ol><li><p>Creating a dataframe with <code>NaN</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">dict1 = &#123;<span class="string">"A"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">"B"</span>:[<span class="number">1</span>,<span class="number">2</span>,np.nan],<span class="string">"C"</span>:[<span class="number">1</span>,np.nan,np.nan]&#125;</span><br><span class="line">df = pd.DataFrame(dict1)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure></li><li><p>Drop missing values:</p><ul><li><code>df = df.dropna()</code> drop rows with at least one <code>NaN</code> inside</li><li><code>df = df.dropna(axis = 1)</code> drop columns with at least one <code>NaN</code> inside</li><li><code>df = df.dropna(axis = 1,thresh = 2)</code> The column won’t be dropped if there are at least two non-<code>NaN</code> values in the column.</li></ul><a id="more"></a></li><li><p>Replace missing values:</p><ul><li><code>df = df.fillna(value=&quot;Filled in value&quot;)</code> replace every <code>NaN</code> in the dataframe with a string.</li><li><code>df[&quot;B&quot;] = df[&quot;B&quot;].fillna(value=df[&quot;B&quot;].mean())</code> a very common operation in Pandas, replace <code>NaN</code> with the mean of other values within that column. There are many other Math or Statistical methods you may use to determine values for missing data.</li></ul></li></ol><h2 id="2-Group-by-method"><a href="#2-Group-by-method" class="headerlink" title="2. Group by method"></a>2. Group by method</h2><ol><li><p>It allows you to group together rows based on values in a column and perform an aggregate function(sum, average, std……) on them. See the example below.</p><table><thead><tr><th>ID</th><th>Value</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>1</td><td>110</td></tr><tr><td>1</td><td>120</td></tr><tr><td>2</td><td>130</td></tr><tr><td>2</td><td>140</td></tr><tr><td>2</td><td>150</td></tr><tr><td>3</td><td>160</td></tr><tr><td>3</td><td>170</td></tr><tr><td>3</td><td>180</td></tr></tbody></table><p>We can change it into:</p><table><thead><tr><th>ID</th><th>Value</th></tr></thead><tbody><tr><td>1</td><td>330</td></tr><tr><td>2</td><td>420</td></tr><tr><td>3</td><td>510</td></tr></tbody></table></li><li><p>Creating the dataframe:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;<span class="string">'Company'</span>:[<span class="string">'GOOG'</span>,<span class="string">'GOOG'</span>,<span class="string">'MSFT'</span>,<span class="string">'MSFT'</span>,<span class="string">'FB'</span>,<span class="string">'FB'</span>],</span><br><span class="line">       <span class="string">'Person'</span>:[<span class="string">'Sam'</span>,<span class="string">'Charlie'</span>,<span class="string">'Amy'</span>,<span class="string">'Vanessa'</span>,<span class="string">'Carl'</span>,<span class="string">'Sarah'</span>],</span><br><span class="line">       <span class="string">'Sales'</span>:[<span class="number">200</span>,<span class="number">120</span>,<span class="number">340</span>,<span class="number">124</span>,<span class="number">243</span>,<span class="number">350</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br></pre></td></tr></table></figure></li><li><p>Perform aggregate functions:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">by_Comp = df.groupby(<span class="string">"Company"</span>)</span><br><span class="line"><span class="comment">#by_company is not a dataframe but an object</span></span><br><span class="line">print(by_Comp.mean())</span><br><span class="line">print(by_Comp.std())</span><br><span class="line">print(by_Comp.sum())</span><br><span class="line">print(by_Comp.count())</span><br><span class="line">print(by_Comp.max())</span><br><span class="line">print(by_Comp.min())</span><br><span class="line">print(by_Comp.count())</span><br><span class="line">print(by_Comp.describe())</span><br><span class="line">print(df.groupby(<span class="string">'Company'</span>).sum().loc[<span class="string">'GOOG'</span>])</span><br></pre></td></tr></table></figure></li></ol><ul><li>A dataframe is returned after performing the aggregate function, so we can perform all dataframe operations on it such as the last line of the code</li><li><code>print(by_Comp.describe())</code> a super powerful aggregate function. It is the sum of all other aggregated functions listed above.</li></ul><h2 id="3-Merging-joining-and-concatenating"><a href="#3-Merging-joining-and-concatenating" class="headerlink" title="3. Merging, joining and concatenating"></a>3. Merging, joining and concatenating</h2><ol><li><p>Creating dataframes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># Concatenating</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>],</span><br><span class="line">                        <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>],</span><br><span class="line">                        <span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</span><br><span class="line">                        <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]&#125;,</span><br><span class="line">                        index=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="string">'A4'</span>, <span class="string">'A5'</span>, <span class="string">'A6'</span>, <span class="string">'A7'</span>],</span><br><span class="line">                        <span class="string">'B'</span>: [<span class="string">'B4'</span>, <span class="string">'B5'</span>, <span class="string">'B6'</span>, <span class="string">'B7'</span>],</span><br><span class="line">                        <span class="string">'C'</span>: [<span class="string">'C4'</span>, <span class="string">'C5'</span>, <span class="string">'C6'</span>, <span class="string">'C7'</span>],</span><br><span class="line">                        <span class="string">'D'</span>: [<span class="string">'D4'</span>, <span class="string">'D5'</span>, <span class="string">'D6'</span>, <span class="string">'D7'</span>]&#125;,</span><br><span class="line">                         index=[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]) </span><br><span class="line"></span><br><span class="line">df3 = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="string">'A8'</span>, <span class="string">'A9'</span>, <span class="string">'A10'</span>, <span class="string">'A11'</span>],</span><br><span class="line">                        <span class="string">'B'</span>: [<span class="string">'B8'</span>, <span class="string">'B9'</span>, <span class="string">'B10'</span>, <span class="string">'B11'</span>],</span><br><span class="line">                        <span class="string">'C'</span>: [<span class="string">'C8'</span>, <span class="string">'C9'</span>, <span class="string">'C10'</span>, <span class="string">'C11'</span>],</span><br><span class="line">                        <span class="string">'D'</span>: [<span class="string">'D8'</span>, <span class="string">'D9'</span>, <span class="string">'D10'</span>, <span class="string">'D11'</span>]&#125;,</span><br><span class="line">                        index=[<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>])</span><br><span class="line"><span class="comment">#Merging</span></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>],</span><br><span class="line">                     <span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>],</span><br><span class="line">                     <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>]&#125;)</span><br><span class="line">   </span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>],</span><br><span class="line">                          <span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</span><br><span class="line">                          <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]&#125;)   </span><br><span class="line"><span class="comment">#Joining</span></span><br><span class="line">left1 = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>],</span><br><span class="line">                     <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>]&#125;,</span><br><span class="line">                      index=[<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>]) </span><br><span class="line"></span><br><span class="line">right1 = pd.DataFrame(&#123;<span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</span><br><span class="line">                    <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]&#125;,</span><br><span class="line">                      index=[<span class="string">'K0'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>])</span><br></pre></td></tr></table></figure></li><li><p>Concatenating: simply glues multiple dataframes together. Leaving the missing data <code>NaN</code>, no need to set a column as the key.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(pd.concat([df1,df2,df3],axis = <span class="number">0</span>))</span><br><span class="line">print(pd.concat([df1,df2,df3],axis = <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>When <code>axis = 0</code>, sticking rows together</p><p>when <code>axis = 1</code>, sticking columns together</p></li><li><p>Merging: combine dataframes together by using a column(s) <strong>other than</strong> the index column as the key.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(pd.merge(left,right,on = <span class="string">"key"</span>,how = <span class="string">'inner'</span>))</span><br><span class="line">print(pd.merge(left,right,on = <span class="string">"key"</span>,how = <span class="string">'outer'</span>))</span><br><span class="line">print(pd.merge(left,right,on = <span class="string">"key"</span>,how = <span class="string">'left'</span>))</span><br><span class="line">print(pd.merge(left,right,on = <span class="string">"key"</span>,how = <span class="string">'right'</span>))</span><br></pre></td></tr></table></figure><ul><li>inner: only keep rows which contain keys that appear in both dataframes(intersection; 交集)</li><li>outer: keep all rows even though keys may only appear in one dataframes(union set; 并集)</li><li>left: keep every row in the left dataframe and remove rows in the right dataframe whose keys can not be found in the left dataframe(left join in SQL)</li><li>right: keep every row in the right dataframe and remove rows in the left dataframe whose keys can not be found in the right dataframe(right join in SQL)</li></ul></li><li><p>Joining: very similar to the <strong>merging</strong> method but the <strong>index column</strong> is used as the key.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(left1.join(right1, how = <span class="string">"inner"</span>))</span><br><span class="line">print(left1.join(right1, how = <span class="string">"outer"</span>))</span><br><span class="line">print(left1.join(right1, how = <span class="string">"left"</span>))</span><br><span class="line">print(left1.join(right1, how = <span class="string">"right"</span>))</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-Further-pandas-operations"><a href="#4-Further-pandas-operations" class="headerlink" title="4. Further pandas operations"></a>4. Further pandas operations</h2><ol><li><ul><li><p><code>df[&quot;column_name&quot;].unique()</code> return unique values in a column</p></li><li><p><code>df[&quot;column_name&quot;].nunique()</code> return the number of unique values in a column</p><p><code>len(df[&quot;column_name&quot;])</code> does the same</p></li><li><p><code>df[&quot;column_name&quot;].value_counts()</code> return how many times each unique value appears </p></li></ul></li><li><p><code>.apply()</code>:</p><ul><li><p>There are already many built in functions in pandas such as <code>.sum()</code> We can use <code>.apply()</code> to call customized functions or Python built-in functions to the dataframe(series). </p></li><li><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">by_two</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (value*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'col1'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="string">'col2'</span>:[<span class="number">444</span>,<span class="number">555</span>,<span class="number">666</span>,<span class="number">444</span>]&#125;)</span><br><span class="line">print(df.apply(by_two))</span><br><span class="line"></span><br><span class="line">df = df[<span class="string">'col2'</span>].apply(<span class="keyword">lambda</span> x: x*<span class="number">2</span>)</span><br><span class="line">df = df.apply(str)</span><br><span class="line">print(df.apply(len))</span><br></pre></td></tr></table></figure><p>Make sure to understand the codes above.</p></li></ul></li><li><p><code>df.isnull()</code> returns a dataframe with Boolean value. <code>True</code> if the value is <code>NaN</code>, <code>False</code> otherwise.</p></li><li><p>Pivot table(数据透视表): an advanced Excel technique, not often used. See the example below.</p><ul><li><p>Creating the dataframe:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'A'</span>:[<span class="string">'foo'</span>,<span class="string">'foo'</span>,<span class="string">'foo'</span>,<span class="string">'bar'</span>,<span class="string">'bar'</span>,<span class="string">'bar'</span>],</span><br><span class="line">     <span class="string">'B'</span>:[<span class="string">'one'</span>,<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'two'</span>,<span class="string">'one'</span>,<span class="string">'one'</span>],</span><br><span class="line">       <span class="string">'C'</span>:[<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>],</span><br><span class="line">       <span class="string">'D'</span>:[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>A</th><th>B</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>0</td><td>foo</td><td>one</td><td>x</td><td>1</td></tr><tr><td>1</td><td>foo</td><td>one</td><td>y</td><td>3</td></tr><tr><td>2</td><td>foo</td><td>two</td><td>x</td><td>2</td></tr><tr><td>3</td><td>bar</td><td>two</td><td>y</td><td>5</td></tr><tr><td>4</td><td>bar</td><td>one</td><td>x</td><td>4</td></tr><tr><td>5</td><td>bar</td><td>one</td><td>y</td><td>1</td></tr></tbody></table></li><li><p><code>df.pivot_table(values=&#39;D&#39;,index=[&#39;A&#39;, &#39;B&#39;],columns=[&#39;C&#39;])</code></p><p>It mainly takes three arguments, we can specify which column we want it to become values, index or columns names</p></li><li><p>Pivot table:</p><table><thead><tr><th></th><th>C</th><th>X</th><th>Y</th></tr></thead><tbody><tr><td>A</td><td>B</td><td></td><td></td></tr><tr><td></td><td>one</td><td>4.0</td><td>1.0</td></tr><tr><td>bar</td><td></td><td></td><td></td></tr><tr><td></td><td>two</td><td>NaN</td><td>5.0</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td>one</td><td>1.0</td><td>3.0</td></tr><tr><td>foo</td><td></td><td></td><td></td></tr><tr><td></td><td>two</td><td>2.0</td><td>NaN</td></tr></tbody></table></li><li><p>We have a compound index which are <code>A</code> and <code>B</code></p></li><li><p>We have column names which are in <code>C</code></p></li><li><p>Values are allocated according to index and columns</p></li></ul></li></ol><h2 id="5-Data-input-amp-output"><a href="#5-Data-input-amp-output" class="headerlink" title="5. Data input &amp; output"></a>5. Data input &amp; output</h2><ol><li><p>Main data input:</p><ul><li>csv</li><li>pandas data reader</li><li>Excel</li><li>HTML</li><li>SQL</li></ul></li><li><p><strong>CSV</strong> stands for Comma Separated Values.</p></li><li><p>CSV:</p><ul><li><p><code>df=pd.read_csv(&quot;filename.csv&quot;)</code> read data from a .csv file       </p></li><li><p><code>df.to_csv(&quot;filename.csv&quot;,index = False)</code> convert a dataframe to csv</p><p>We normally put <code>index = False</code>, otherwise there will be two columns of index when we <code>.read_csv()</code> again</p></li></ul></li><li><p>Excel:</p><ul><li><p><code>df=pd.read_excel(&quot;filename.xlsx&quot;,sheetname = &quot;Name_of_the_sheet&quot;)</code></p><p>Don’t forget to specify the sheet name. If there are formulae or images in the Excel file, pandas is very likely to crash.</p></li><li><p><code>df.to_excel(&quot;new_filename.xlsx&quot;,sheet_name = &quot;New_sheet&quot;)</code></p><p>A bit wired as the attribute name is <code>sheet_name</code></p></li></ul></li><li><p>HTML:</p><ul><li><p>A number of packages need to be installed for reading data from HTML</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br><span class="line">pip install html5lib</span><br><span class="line">pip install BeautifulSoup4</span><br></pre></td></tr></table></figure><ul><li><p>data = <code>pd.read_html(&quot;link_of_the_data&quot;)</code> read data between <code>&lt;table&gt; &lt;/table&gt;</code></p><p>This returns a Python list with tables as elements inside. Use <code>data[0]</code> to access them.</p></li><li><p>Data obtained from HTML may get messy. Some operations are needed to tidy up.</p></li><li><p><code>df.to_html(&quot;filename.html&quot;)</code> convert a dataframe to HTML.</p></li></ul></li></ul></li><li><p>SQL database: use external packages such as <strong>Pymysql</strong> to read data from SQL database.</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Handling-missing-data&quot;&gt;&lt;a href=&quot;#1-Handling-missing-data&quot; class=&quot;headerlink&quot; title=&quot;1. Handling missing data&quot;&gt;&lt;/a&gt;1. Handling missing data&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Creating a dataframe with &lt;code&gt;NaN&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict1 = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;:[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;string&quot;&gt;&quot;B&quot;&lt;/span&gt;:[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,np.nan],&lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;:[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,np.nan,np.nan]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df = pd.DataFrame(dict1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(df)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Drop missing values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df = df.dropna()&lt;/code&gt; drop rows with at least one &lt;code&gt;NaN&lt;/code&gt; inside&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df = df.dropna(axis = 1)&lt;/code&gt; drop columns with at least one &lt;code&gt;NaN&lt;/code&gt; inside&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df = df.dropna(axis = 1,thresh = 2)&lt;/code&gt; The column won’t be dropped if there are at least two non-&lt;code&gt;NaN&lt;/code&gt; values in the column.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
      <category term="Pandas" scheme="https://yuxuanliu.tech/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Pandas basics</title>
    <link href="https://yuxuanliu.tech/pandas_basics/"/>
    <id>https://yuxuanliu.tech/pandas_basics/</id>
    <published>2019-09-11T22:36:17.000Z</published>
    <updated>2019-09-16T16:42:37.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pandas-Python-data-analysis-library-basics"><a href="#Pandas-Python-data-analysis-library-basics" class="headerlink" title="Pandas(Python data analysis library) basics"></a>Pandas(Python data analysis library) basics</h2><ol><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure></li><li><p><code>pd.Series()</code> is similar to <code>np.array()</code> but we can assign series with a <strong>string</strong> or <strong>datetime</strong> index rather than just numerical index.</p><ul><li><p>Convert list, array and dictionary to a series:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">list1 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]</span><br><span class="line">array1 = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])</span><br><span class="line">dict1 = &#123;<span class="number">1</span>:<span class="number">10</span>,<span class="number">2</span>:<span class="number">20</span>,<span class="number">3</span>:<span class="number">30</span>,<span class="number">4</span>:<span class="number">40</span>&#125;</span><br><span class="line">series1 = pd.Series(list1)</span><br><span class="line">series2 = pd.Series(array1)</span><br><span class="line">series3 = pd.Series(dict1)</span><br><span class="line">print(series1)</span><br><span class="line">print(series2)</span><br><span class="line">print(series3)</span><br></pre></td></tr></table></figure><p>By default, we have ascending numerical index</p><a id="more"></a></li><li><p>Assign index to a series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">index1 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>]</span><br><span class="line">list1 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]</span><br><span class="line">array1 = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])</span><br><span class="line">dict1 = &#123;<span class="string">"a"</span>:<span class="number">10</span>,<span class="string">"b"</span>:<span class="number">20</span>,<span class="string">"c"</span>:<span class="number">30</span>,<span class="string">"d"</span>:<span class="number">40</span>&#125;</span><br><span class="line">series1 = pd.Series(list1,index1)</span><br><span class="line">series2 = pd.Series(array1,index1)</span><br><span class="line">series3 = pd.Series(dict1)</span><br><span class="line">print(series1)</span><br><span class="line">print(series2)</span><br><span class="line">print(series3)</span><br></pre></td></tr></table></figure><p>We now have a string index <code>&quot;a&quot;</code>, <code>&quot;b&quot;</code>, <code>&quot;c&quot;</code> and <code>&quot;d&quot;</code></p></li><li><p>Indexing series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">series1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="string">"USA"</span>,<span class="string">"CHINA"</span>,<span class="string">"UK"</span>,<span class="string">"IRELAND"</span>])</span><br><span class="line">series2 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="string">"USA"</span>,<span class="string">"CHINA"</span>,<span class="string">"FRANCE"</span>,<span class="string">"GERMANY"</span>])</span><br><span class="line">value = series1[<span class="string">"USA"</span>]</span><br><span class="line"><span class="comment">#value = series1.USA</span></span><br><span class="line">print(value)</span><br><span class="line">series3 = series1 + series2</span><br><span class="line">print(series3)</span><br></pre></td></tr></table></figure><p>There are two ways of indexing, see above. </p><p>Also, we can do mathematical operations between two series. Pandas will only carry out operations between values with the same index. For those index without a matching index in the other series, their value will be set to <code>NaN</code>. See below</p><table><thead><tr><th>CHINA</th><th>4.0</th></tr></thead><tbody><tr><td>FRANCE</td><td>NaN</td></tr><tr><td>GERMANY</td><td>NaN</td></tr><tr><td>IRELAND</td><td>NaN</td></tr><tr><td>UK</td><td>NaN</td></tr><tr><td>USA</td><td>2.0</td></tr></tbody></table></li></ul></li><li><ul><li>The main data structure in pandas is dataframe and it is built on top of series.</li><li>We could say a dataframe is a number of series that share the same index with each other. </li><li>Each column or row in a dataframe is a series if we consider it independently.</li></ul></li><li><p>Hard code method for creating a dataframe:</p><ul><li><p>Method 1(filling each column in a dictionary):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">dic1 = &#123;<span class="string">"date"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>],</span><br><span class="line">        <span class="string">"value"</span>:[<span class="number">2</span>,<span class="number">35</span>,<span class="number">64</span>,<span class="number">53</span>,<span class="number">67</span>,<span class="number">64</span>,<span class="number">32</span>,<span class="number">66</span>,<span class="number">87</span>,<span class="number">12</span>],</span><br><span class="line">        <span class="string">"ratio"</span>:[<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.43</span>,<span class="number">0.52</span>,<span class="number">0.41</span>,<span class="number">0.87</span>,<span class="number">0.12</span>,<span class="number">0.32</span>,<span class="number">0.15</span>,<span class="number">0.76</span>]&#125;</span><br><span class="line">df = pd.DataFrame(dic1)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure></li><li><p>Method 2(filling each row in a list): </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df=pd.DataFrame([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">0.2</span>],</span><br><span class="line">                 [<span class="number">2</span>,<span class="number">35</span>,<span class="number">0.3</span>],</span><br><span class="line">                 [<span class="number">3</span>,<span class="number">64</span>,<span class="number">0.43</span>],</span><br><span class="line">                 [<span class="number">4</span>,<span class="number">53</span>,<span class="number">0.52</span>],</span><br><span class="line">                 [<span class="number">5</span>,<span class="number">67</span>,<span class="number">0.41</span>],</span><br><span class="line">                 [<span class="number">6</span>,<span class="number">64</span>,<span class="number">0.87</span>],</span><br><span class="line">                 [<span class="number">7</span>,<span class="number">32</span>,<span class="number">0.12</span>],</span><br><span class="line">                 [<span class="number">8</span>,<span class="number">66</span>,<span class="number">0.32</span>],</span><br><span class="line">                 [<span class="number">9</span>,<span class="number">87</span>,<span class="number">0.15</span>],</span><br><span class="line">                 [<span class="number">10</span>,<span class="number">12</span>,<span class="number">0.76</span>]],columns=[<span class="string">'date'</span>,<span class="string">'value'</span>,<span class="string">'ratio'</span>])</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure></li><li><p>Another example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">5</span>,<span class="number">4</span>),columns = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>],index = [<span class="string">"CHINA"</span>,<span class="string">"USA"</span>,<span class="string">"UK"</span>,<span class="string">"FRANCE"</span>,<span class="string">"GERMANY"</span>])</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Adding new columns to an existing dataframe</p><ul><li><code>df[&#39;new_column&#39;]=(df.old_1+df.old_2)</code> add a new column from existing columns.</li><li><code>df[&#39;name_of_new_column&#39;] = list_of_data</code> add a new column into the dataframe directly.</li></ul></li><li><ul><li><code>df.drop(&quot;column name&quot;,axis = 1)</code> remove a column from the dataframe</li><li><code>df.drop([&quot;row_index_1&quot;,&quot;row_index_2&quot;],axis = 0)</code> remove a row from the dataframe </li></ul></li><li><p><code>df.index</code> return values in the <strong>index</strong> column of the dataframe. </p></li><li><p><code>df.columns</code>  return <strong>all column names</strong> of the dataframe.</p></li><li><p>If in the dataframe, we have missing data, we may assign <code>np.nan</code> to it which stands for <strong>not an number</strong></p></li><li><p>Slicing columns:</p><ul><li><code>df.Name_of_column</code> return all values under a column which is a <strong>series</strong>.</li><li><code>df[&#39;Name_of_column&#39;]</code> does exactly the same. You are encouraged to use this method.</li><li><code>df = df[[&#39;Name_of_column_1&#39;,&#39;Name_of_column_2&#39;]]</code> slicing multiple columns from the dataframe </li><li>The attribute method doesn’t need <code>&quot;&quot;</code> while the index method do.</li></ul></li><li><p>Slicing rows:</p><ul><li><p><code>df.head(n)</code> return first n rows in the dataframe </p></li><li><p><code>df.tail(n)</code> return last n rows in the dataframe</p></li><li><p><code>df = df[2:5]</code> slicing the data frame i.e. row 2,3,4</p></li><li><p><code>df = df.loc[&quot;index_name&quot;,[&#39;Name_of_column_1&#39;,&#39;Name_of_column_2&#39;]]</code></p><p>Extremely useful when values inside the index columns are not numerical.</p></li><li><p><code>df = df.iloc[from_row:to_row,[Index_of_column_1,Index_of_column_2]]</code></p><p>Very similar to <code>.loc[]</code> but we can treat index values as numerical based ascending index even though index values themselves may not be numerical. We must use the index numbers of columns instead of name of columns for <code>.iloc</code>.</p></li><li><p><code>.loc</code> and <code>.iloc</code> methods are based on indexing a matrix in numpy <code>a[row_index,column_index]</code></p></li></ul></li><li><p>Example for <code>.loc</code> and <code>.iloc</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">5</span>,<span class="number">4</span>),columns = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>],index = [<span class="string">"CHINA"</span>,<span class="string">"USA"</span>,<span class="string">"UK"</span>,<span class="string">"FRANCE"</span>,<span class="string">"GERMANY"</span>])</span><br><span class="line">print(df.loc[[<span class="string">"UK"</span>,<span class="string">"FRANCE"</span>],[<span class="string">"B"</span>,<span class="string">"C"</span>]])</span><br><span class="line">print(df.iloc[<span class="number">2</span>:<span class="number">4</span>,<span class="number">1</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>These two methods both give data at column “B” and “C” from row “UK” and “FRANCE”.</p></li><li><p><code>df.loc[row_num,[“Name of the column”]] = new_value</code> modify values in the dataframe</p></li><li><p><code>df.describle()</code> will return a number of useful statistical data of the dataframe includes: count, mean, std, min, 25% percentile, 50% percentile, 75% percentile and max.</p></li><li><p><code>df = df.sort_values(Name_of_column,ascending=True)</code> sort the dataframe according to numerical values in the column specified.</p></li><li><p>Filter:</p><ul><li><p>Filter by values in a column: <code>df[df[&quot;column_name&quot;]&gt;1.0]</code> applying the <strong>conditional selection</strong> method. This means return rows in the dataframe where we have a <code>True</code>.</p></li><li><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">5</span>,<span class="number">4</span>),columns = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>],index = [<span class="string">"CHINA"</span>,<span class="string">"USA"</span>,<span class="string">"UK"</span>,<span class="string">"FRANCE"</span>,<span class="string">"GERMANY"</span>])</span><br><span class="line">print(df[df&gt;<span class="number">0.5</span>])</span><br><span class="line">print(df[df[<span class="string">"A"</span>]&gt;<span class="number">0.5</span>])</span><br></pre></td></tr></table></figure><ul><li><code>df[df&gt;0.5]</code> will return a dataframe with <code>NaN</code> for values less than 0.5. This is because <code>df&gt;0.5</code> will return a dataframe.</li><li><code>df[df[&quot;A&quot;]&gt;0.5]</code> will only return rows whose values under column A are greater than 0.5. This is because <code>df[&quot;A&quot;]&gt;0.5</code> will return a pandas series rather than a dataframe.</li></ul></li><li><p>What if we want to put in multiple conditions, we CANNOT simply do <code>df[(df[&quot;A&quot;]&gt;0.5) and  (df[&quot;B&quot;]&gt;0.3)]</code> This is because normal python <code>and</code> doesn’t support pandas series. We need to use <code>&amp;</code> for <code>and</code> operator, <code>|</code> for <code>or</code> operator. See the example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">5</span>,<span class="number">4</span>),columns = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>],index = [<span class="string">"CHINA"</span>,<span class="string">"USA"</span>,<span class="string">"UK"</span>,<span class="string">"FRANCE"</span>,<span class="string">"GERMANY"</span>])</span><br><span class="line">print(df[(df[<span class="string">"A"</span>]&gt;<span class="number">0.5</span>) &amp; (df[<span class="string">"B"</span>]&gt;<span class="number">0.3</span>)])</span><br><span class="line">print(df[(df[<span class="string">"A"</span>]&gt;<span class="number">0.5</span>) | (df[<span class="string">"B"</span>]&gt;<span class="number">0.3</span>)])</span><br></pre></td></tr></table></figure></li></ul></li><li><ul><li><p><code>df.rename(columns = &quot;old name&quot;: &quot;new name&quot;, inplace = True)</code> to change a column name</p></li><li><p><code>df = df.rename(columns = &quot;old name&quot;: &quot;new name&quot;)</code> does exactly the same</p></li><li><p>Change multiple column names:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_name = [<span class="string">"new_date"</span>,<span class="string">"new_value"</span>,<span class="string">"new_ratio"</span>]</span><br><span class="line">df.columns = new_name</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Treating the dataframe as an iterable object, see the example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index,row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    print(index)</span><br><span class="line">    print(row[<span class="string">"A"</span>],row[<span class="string">"B"</span>],row[<span class="string">"C"</span>],row[<span class="string">"D"</span>])</span><br></pre></td></tr></table></figure><p>In other words, <code>.iterrows()</code> function will slice each row into pandas series.</p></li><li><ul><li><code>df = df.reset_index()</code> reset customized index back to numerical ascending index, the old index column will become a new column called <code>&quot;index&quot;</code> of the dataframe. It won’t cause confusion as we need to use <code>df.index</code> for new numerical index column and <code>df[&quot;index&quot;]</code> for old index column.</li><li><code>df = df.set_index(“name_of_the_column”)</code> will automatically remove the column we select and make it become the index column. </li><li>We may use <code>df.index = df[“name_of_the_column”]</code> but we still need to remove the <code>“name_of_the_column”</code> column using <code>df.drop(&quot;name_of_the_column&quot;,axis = 1)</code> </li></ul></li><li><p>Working with compound index: indexing from the outside to inside</p><ul><li><p>Producing a dataframe with compound index</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">outside = [<span class="string">'G1'</span>,<span class="string">'G1'</span>,<span class="string">'G1'</span>,<span class="string">'G2'</span>,<span class="string">'G2'</span>,<span class="string">'G2'</span>]</span><br><span class="line">inside = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">hier_index = list(zip(outside,inside))</span><br><span class="line">hier_index = pd.MultiIndex.from_tuples(hier_index)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">2</span>),index=hier_index,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>This will produce the following dataframe with two columns of index.</p><table><thead><tr><th>Group</th><th>Num</th><th>A</th><th>B</th></tr></thead><tbody><tr><td></td><td>1</td><td>0.153661</td><td>0.167638</td></tr><tr><td>G1</td><td>2</td><td>-0.765930</td><td>0.962299</td></tr><tr><td></td><td>3</td><td>0.902826</td><td>-0.537909</td></tr><tr><td></td><td>1</td><td>-1.549671</td><td>0.435253</td></tr><tr><td>G2</td><td>2</td><td>1.259904</td><td>-0.447898</td></tr><tr><td></td><td>3</td><td>0.266207</td><td>0.412580</td></tr></tbody></table></li><li><p>If we want to index 0.412580 at the bottom right corner, use: <code>print(df.loc[&quot;G2&quot;].loc[3,&quot;B&quot;])</code></p></li><li><p><code>df.loc[&quot;G2&quot;]</code> returns a dataframe with 3 rows under G2. Do <code>.loc</code> again inside this dataframe.</p></li><li><p><code>df.index.names = [&#39;Group&#39;,&#39;Num&#39;]</code> assign column names to compound index</p></li><li><p>What if rows with inside index <code>Num=1</code> are needed? It is a bit tedious to use <code>.loc</code> multiple times. There is another method: <code>print(df.xs(1,level=&#39;Num&#39;))</code> The <code>level</code> attribute specifies the column inside the compound index.</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Pandas-Python-data-analysis-library-basics&quot;&gt;&lt;a href=&quot;#Pandas-Python-data-analysis-library-basics&quot; class=&quot;headerlink&quot; title=&quot;Pandas(Python data analysis library) basics&quot;&gt;&lt;/a&gt;Pandas(Python data analysis library) basics&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pd.Series()&lt;/code&gt; is similar to &lt;code&gt;np.array()&lt;/code&gt; but we can assign series with a &lt;strong&gt;string&lt;/strong&gt; or &lt;strong&gt;datetime&lt;/strong&gt; index rather than just numerical index.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Convert list, array and dictionary to a series:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list1 = [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array1 = np.array([&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict1 = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;series1 = pd.Series(list1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;series2 = pd.Series(array1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;series3 = pd.Series(dict1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(series1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(series2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(series3)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;By default, we have ascending numerical index&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
      <category term="Pandas" scheme="https://yuxuanliu.tech/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Numpy notes</title>
    <link href="https://yuxuanliu.tech/numpy_notes/"/>
    <id>https://yuxuanliu.tech/numpy_notes/</id>
    <published>2019-09-09T23:05:15.000Z</published>
    <updated>2019-09-18T07:08:40.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy-Numerical-Python-notes"><a href="#Numpy-Numerical-Python-notes" class="headerlink" title="Numpy(Numerical Python) notes"></a>Numpy(Numerical Python) notes</h1><h2 id="1-Basics"><a href="#1-Basics" class="headerlink" title="1. Basics"></a>1. Basics</h2><ol><li><p><code>import numpy as np</code></p></li><li><p>The data type in Numpy is called <strong>array</strong></p></li><li><p><code>a = np.array([1,2,3])</code> to create a new array</p><p>Alternatively:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">array1 = np.array(list1)</span><br><span class="line">print(array1)</span><br></pre></td></tr></table></figure></li><li><p><code>a=np.arange(1,12,3)</code> from 1 to 11 with a step of 3   i.e. <code>[1,4,7,10]</code>  Super useful in <strong>matplotlib</strong>. </p><p>The starting value will be included for sure but the ending value may not be included(depend on step).</p><p><strong>arange</strong> stands for array range </p></li><li><p><code>a=np.linspace(1,13,5)</code> create an evenly spaced array with 5 values i.e.<code>[1,4,7,10,13]</code> Both, beginning and ending values will be included.</p><a id="more"></a></li><li><p><code>a = a.reshape(3,2)</code> change the dimension of an existing array. It means 3 rows and 2 columns here(2d array or <strong>matrix</strong>). </p><p>We may also create a 2d array(<strong>matrix</strong>) manually using <code>a = np.array([[1,2,3],[4,5,6],[7,8,9]])</code></p><p>Alternatively:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>),(<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)]</span><br><span class="line">array1 = np.array(list1)</span><br><span class="line">print(array1)</span><br></pre></td></tr></table></figure></li><li><p><code>print(a.shape)</code> will give us the shape of the array.</p></li><li><p><code>print(a.size)</code> will give us the length of the array kinda similar to <code>len(list1)</code></p></li><li><p><code>print(a.dtype)</code> will give us the datatype of elements inside the array.</p></li><li><p><code>a = np.zeros((3,4))</code> This creates a 3*4 matrix with zeros. Similarly, we have <code>a = np.ones((3,4))</code></p><p>Be careful, <code>a = np.ones((1,4))</code> will return a 2d matrix <code>[[1,1,1,1]]</code> .</p><p>However, <code>a = np.ones(4)</code> will return an 1d array <code>[1,1,1,1]</code>.</p></li><li><p><code>a = np.random.rand(3,4)</code> create a 3*4 matrix with random decimal values under 1. Each value has the equal possibility being picked.</p></li><li><p><code>a= np.random.randn(3,4)</code> The difference between <code>np.random.rand()</code> is that the possibility for each value being picked follows the standard normal distribution with mean at <strong>0</strong> and variance equals <strong>1</strong>.</p></li><li><p><code>a = np.random.randint(0,10,5)</code> create an array with 5 elements random integers ranging 0-10.</p></li><li><p><code>value = np.random.choice(a)</code> will help you choose a random value from the array <strong>a</strong>.</p></li><li><ul><li><code>print(a.sum())</code> will sum up all elements inside the array.</li><li><code>print(a.sum(axis=1))</code> sum up elements in each <strong>row</strong> (This axis trick also works for <code>min</code>, <code>max</code>, <code>mean</code> and <code>std</code> below)</li><li><code>print(a.sum(axis=0))</code> sum up elements in each <strong>column</strong></li></ul></li><li><p><code>print(a.min())</code> will give the minimum element.</p><p><code>print(a.max())</code> will give the maximum element.</p><p><code>print(a.argmin())</code> will give the index of the minimum element.</p><p><code>print(a.argmax())</code> will give the index of the maximum element.</p></li><li><p><code>print(a.mean())</code> will give the mean of the array.</p></li><li><p><code>print(a.std())</code> will give the standard deviation of the array.</p></li><li><p><code>print(a.ndim)</code> to find the dimension of the array.</p></li><li><p>print a sin function using both <strong>numpy</strong> and <strong>matplotlib</strong>:</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = np.arange(<span class="number">0</span>,<span class="number">3</span>*np.pi,<span class="number">0.1</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="2-Advanced"><a href="#2-Advanced" class="headerlink" title="2. Advanced"></a>2. Advanced</h2><ol><li><p><code>a = a*3</code> will multiply every element in array by 3. </p><p>Other Math operations(<code>+</code>,<code>-</code>,<code>/</code>,<code>**</code>) can also be applied this way.</p></li><li><p>There is a lot of math functions in numpy. You can do <code>np.sin(a)</code>, <code>np.log(a)</code>, <code>np.exp(a)</code>, <code>np.sqrt(a)</code> etc. Check the doc for more information</p></li><li><p>Product of metrics is super easy to do in numpy. See the example below</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">              [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">              [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">b = np.array([[<span class="number">1</span>],</span><br><span class="line">              [<span class="number">2</span>],</span><br><span class="line">              [<span class="number">3</span>]])</span><br><span class="line">print(a.dot(b))</span><br></pre></td></tr></table></figure><ul><li>Either <code>a.dot(b)</code> or <code>np.dot(a,b)</code> may be used.</li><li>It is a good practice to make sure both arrays are 2d before doing dot product</li></ul></li><li><p>Dot product and cross product between two vectors</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(np.dot(a,b))</span><br><span class="line">print(np.cross(a,b))</span><br></pre></td></tr></table></figure></li><li><p>Indexing of an array: <code>a=np.array([1,2,3,4,5,6,7,8])</code></p><ul><li>Very similar to Python list</li><li><code>print(a[3])</code> This will return 4.</li><li><code>print(a[3:5])</code> This will return 4, 5.</li></ul></li><li><p>Indexing of the matrix <code>a = np.array([(1,2,3),(4,5,6)])</code></p><ul><li>A bit different from Python, in the format <code>matrix[row,column]</code></li><li><code>print(a[0,2])</code> This will return <code>3</code>.</li><li><code>print(a[0:,2])</code> or <code>print(a[0:2,2])</code> These will return <code>[3, 6]</code>.</li></ul></li><li><p>Broadcasting: super cool, not working for standard Python list. See below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line">a[<span class="number">0</span>:<span class="number">3</span>]=<span class="number">20</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p><code>a</code> becomes <code>[20,20,20,4,5,6,7,8]</code></p></li><li><p>See the example below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">b = a</span><br><span class="line">a[<span class="number">0</span>:<span class="number">2</span>]=<span class="number">10</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>You will find out both <code>a</code> and <code>b</code> are changed even though we didn’t write any code to change b. It is because <code>b=a</code> is in fact setting the pointer of <code>b</code> to the pointer of <code>a</code>(in order to save RAM). If we want to fix this issue. We need to use <code>.copy()</code>. See below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">b = a.copy()</span><br><span class="line">a[<span class="number">0</span>:<span class="number">2</span>]=<span class="number">10</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure></li><li><p>Conditional selection</p><ul><li><p><code>print(a&gt;1)</code> to test size of elements inside the array. This will automatically compare all elements inside the array with 1 and return <code>True</code> or <code>False</code> for each element. This is the basis for conditional selection.</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line">a_compare = a&gt;<span class="number">4</span></span><br><span class="line">b = a[a_compare]</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>This will give us all elements which are greater than 4.</p></li><li><p>We can shorten the operation above, see below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line">b = a[a&gt;<span class="number">4</span>]</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>This trick is used in Pandas a lot.</p></li><li><p>Another example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>,<span class="number">51</span>)</span><br><span class="line">print(a[a%<span class="number">2</span>==<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li></ul></li><li><p>The identical matrix $I$ is often used, we can produce one using <code>np.eye(3)</code>. 3 is the dimension of the identical matrix. In other words, it is a $3\times 3$ matrix.   </p></li><li><p>Putting two array together. We can do it in two directions vertically &amp; horizontally</p><ul><li><p>Vertically:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)])</span><br><span class="line">b = np.array([(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)])</span><br><span class="line">c = np.vstack((a,b))</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></li><li><p>Horizontally:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">  a = np.array([(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)])</span><br><span class="line">  b = np.array([(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)])</span><br><span class="line">  c = np.hstack((a,b))</span><br><span class="line">  print(c)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="11"><li><p>Change 2d array to one dimension</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)])</span><br><span class="line">a = a.ravel()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>We get <code>[1,2,3,4,5,6]</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Numpy-Numerical-Python-notes&quot;&gt;&lt;a href=&quot;#Numpy-Numerical-Python-notes&quot; class=&quot;headerlink&quot; title=&quot;Numpy(Numerical Python) notes&quot;&gt;&lt;/a&gt;Numpy(Numerical Python) notes&lt;/h1&gt;&lt;h2 id=&quot;1-Basics&quot;&gt;&lt;a href=&quot;#1-Basics&quot; class=&quot;headerlink&quot; title=&quot;1. Basics&quot;&gt;&lt;/a&gt;1. Basics&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import numpy as np&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The data type in Numpy is called &lt;strong&gt;array&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;a = np.array([1,2,3])&lt;/code&gt; to create a new array&lt;/p&gt;
&lt;p&gt;Alternatively:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array1 = np.array(list1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(array1)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;a=np.arange(1,12,3)&lt;/code&gt; from 1 to 11 with a step of 3   i.e. &lt;code&gt;[1,4,7,10]&lt;/code&gt;  Super useful in &lt;strong&gt;matplotlib&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;The starting value will be included for sure but the ending value may not be included(depend on step).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;arange&lt;/strong&gt; stands for array range &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;a=np.linspace(1,13,5)&lt;/code&gt; create an evenly spaced array with 5 values i.e.&lt;code&gt;[1,4,7,10,13]&lt;/code&gt; Both, beginning and ending values will be included.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
      <category term="Numpy" scheme="https://yuxuanliu.tech/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>Finance basics notes</title>
    <link href="https://yuxuanliu.tech/finance_basics/"/>
    <id>https://yuxuanliu.tech/finance_basics/</id>
    <published>2019-09-09T14:31:27.000Z</published>
    <updated>2019-09-19T15:52:41.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h1><h2 id="The-interest-rate-in-general"><a href="#The-interest-rate-in-general" class="headerlink" title="The interest rate in general"></a>The interest rate in general</h2><ol><li><p>Get money earlier is good because there is opportunity cost, inflation and uncertainty of the financial condition(risk).</p></li><li><p>Interest: </p><ul><li>we are in fact losing for getting money back later, there need to be something to compensate for our loss. We call it <strong>interest</strong>.</li><li>People pay interests for time. </li><li>Interest rate kinda describes the risk of being patient.</li><li>What affects interest rates, same as the three things we talked about: opportunity cost(How strong is the economic growth?), inflation rate and level of risk(interest rate is higher during the war while lower during the peaceful time).</li><li>Interest is the foundation of economics as it describes the cost of time. Everything else is built based on this. </li></ul><a id="more"></a></li></ol><h2 id="Compounding-and-earning-returns-over-time"><a href="#Compounding-and-earning-returns-over-time" class="headerlink" title="Compounding and earning returns over time"></a>Compounding and earning returns over time</h2><ol><li>Compound interest growth exponentially</li><li>Future value(FV) = $PV\times (1+r)^{n}$</li><li>Annual percentage rate(APR), stated rate or nominal rate are the same thing: It means the periodic rate. We can multiply APR and the number of periods. It doesn’t take into account compounding interest.</li><li>Effective rate: The rate you actually earn if APR is compounded. This is the rate you are actually paying(getting) over a period of time.</li><li>$R_{effective}=(1+\frac{APR}{n})^{n}$ </li></ol><h2 id="Discounting-future-cash"><a href="#Discounting-future-cash" class="headerlink" title="Discounting future cash"></a>Discounting future cash</h2><ol><li>present value(PV) = $\frac{FV}{(1+r)^{n}}$</li><li>Two things will affect the PV of future cash: interest rates and time.</li></ol><h2 id="Valuation-by-discounted-cash-flow-DCF"><a href="#Valuation-by-discounted-cash-flow-DCF" class="headerlink" title="Valuation by discounted cash flow(DCF)"></a>Valuation by discounted cash flow(DCF)</h2><ol><li>DCF is the base for all financial valuation.</li><li>We can put a price on anything as long as we know when does cash come in? How much cash is coming in?</li><li>We can use the DCF method to valuate a bond, share etc. As long as we know how much cash will come in in the future, we can discount it back to today and find the total value of a bond.</li><li>mergers and acquisitions 兼并和收购</li></ol><h2 id="Valuation-by-Comparable"><a href="#Valuation-by-Comparable" class="headerlink" title="Valuation by Comparable"></a>Valuation by Comparable</h2><ol><li>Often referred as  <strong>Comps</strong>: Comparable transactions or prices or value-relevant ratio.</li><li>Quick, easy but <strong>dangerous</strong>, not as accurate as DCF.</li><li>$\frac {price}{attribute}$ gives you a ratio of your asset. You can compare this ratio of other asset to estimate the value of your asset. Attributes we may use are: <ul><li>P/E ratio(price earning ratio)</li><li>earnings yield</li><li>dividend yield</li><li>return on assets</li><li>EBITDA multiples</li><li>return on asset(ROA)</li><li>return on equity(ROE)</li><li>return on invested capital</li><li>PEG ratio(P/E ratio over the growth in earning)</li></ul></li></ol><h2 id="Bond"><a href="#Bond" class="headerlink" title="Bond"></a>Bond</h2><ol><li>Simple debt instruments that promise interest and face value.</li><li>We have national bonds(国家债券), corporate bonds, municipal bonds(地方债券) and sovereign bonds(主权债券).</li><li>Valuate a bond:<ul><li>Map up cash flow</li><li>Discount them accordingly</li><li>sum up all discounted cash</li></ul></li></ol><h2 id="Mortgage"><a href="#Mortgage" class="headerlink" title="Mortgage"></a>Mortgage</h2><ol><li><p>Simple debt instruments, each repayment includes the principal(本金) and the interest.</p></li><li><p>Amortization schedule(贷款分期偿付时间表):</p><ul><li><p>Question: Assume a bank charges 7% interest per year. You borrow $10,000 to be repaid in equal yearly instalments of $3810.52 over 3 years. Let’s amortize the loan schedule and compute interest and principal repayments.</p></li><li><p>Solution:</p><table><thead><tr><th align="left">Year</th><th>Payment</th><th>Interest</th><th>Principal repayment</th><th>Balance</th></tr></thead><tbody><tr><td align="left">0</td><td>$0</td><td>$0</td><td>$0</td><td>$10,000</td></tr><tr><td align="left">1</td><td>$3,810.52</td><td>$700</td><td>$3,110.52</td><td>$6,889.48</td></tr><tr><td align="left">2</td><td>$3,810.52</td><td>$482.26</td><td>$3,328.26</td><td>$3,561.22</td></tr><tr><td align="left">3</td><td>$3810.52</td><td>$249.29</td><td>$3561.22</td><td>$0</td></tr></tbody></table><p>Create this table and calculate the amount of interest paid, the remainder will be principal repayment.</p></li></ul><h2 id="Annuity-年金"><a href="#Annuity-年金" class="headerlink" title="Annuity(年金)"></a>Annuity(年金)</h2><ol><li>Annuities are a series of equal payments at regular intervals. For example, pension payment and monthly mortgage payment.</li><li>It is calculation is pretty standard, simply change annual rate back to monthly rate and discounting cash.</li><li></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">121</span>):</span><br><span class="line">    tem = (<span class="number">500</span>)/((<span class="number">1</span>+<span class="number">0.011715</span>)**i)</span><br><span class="line">    total+=tem</span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure><p>Python may be used to calculate annuity.</p><p>To sum up, all these valuation methods are used in the industry. Practitioner put them on different weight according to their confidence of these methods.</p></li></ol><h1 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h1><h2 id="Overview-of-the-capital-budgeting-process"><a href="#Overview-of-the-capital-budgeting-process" class="headerlink" title="Overview of the capital budgeting process"></a>Overview of the capital budgeting process</h2><ol><li>The firm uses its assets to generate cash flow(profit). CFO decides how to deal with the cash flow. We may:<ul><li>Pay out to the capital markets to debt holders, bondholders or equity holders through dividends or repurchases.</li><li>Re-invest within the firm to increase the firm’s profitability.</li></ul></li><li>If existing assets are not producing enough cash flow, CFO may decide to issue extra bonds, equity or mortgage in order to pull cash from the capital market into the firm.</li><li>The science of the capital budgeting process is actually <strong>HOW, WHEN, WHERE</strong> should the firm spend its money in order to <strong>maximize</strong> the return to equity holders.</li><li>Practice for capital budgeting:<ul><li>Arm’s-length(公平交易准则)</li><li>Objective</li><li>Transparent</li></ul></li><li>Common things to do during the capital budgeting process:<ul><li>Accept or reject a proposal</li><li>Find the best proposal within a set</li><li>Rank different proposals</li></ul></li></ol><h2 id="Net-present-value-NPV"><a href="#Net-present-value-NPV" class="headerlink" title="Net present value(NPV)"></a>Net present value(NPV)</h2><ol><li><p>Present value(PV) = total present value of all future cash flow of this project</p></li><li><p>Net present value(NPV) = PV - initial investment of this project</p></li><li><p>Decision rule: whether $NPV&gt;0$</p><p>In other words, whether money coming in out weight the money going out.</p></li><li><p>Here is an example, discount rate = 10%:</p><table><thead><tr><th>Period</th><th>Cash Flow</th><th></th><th>Present Value</th></tr></thead><tbody><tr><td>0</td><td>$-1500</td><td></td><td>$-1500</td></tr><tr><td>1</td><td>$900</td><td></td><td>$818.18</td></tr><tr><td>2</td><td>$750</td><td></td><td>$619.83</td></tr><tr><td>Total</td><td>$150</td><td></td><td>$-61.99</td></tr></tbody></table><p>We have a net cash inflow so the project is profitable but $NPV&lt;0$ so it is not worth doing. In other words, the project is not profitable enough.</p></li><li><p>NPV is the best capital budgeting tool This is because:</p><ul><li>It includes the effect cash flow, timing, opportunity cost and risk(discount rate). </li><li>It is an objective, arms-length and transparent metrics(衡量指标) for capital budgeting</li><li>Sometimes, projects will still be accepted even though $NPV&lt;0$. For example, government policies or environmental cleanup.</li></ul></li></ol><h2 id="Payback-period"><a href="#Payback-period" class="headerlink" title="Payback period"></a>Payback period</h2><ol><li><p>Payback period means how long it takes to earn back initial investment(no discount rate included)</p></li><li><p>Decision rule: If the payback period$&lt;X$, we will invest</p></li><li><p>Example:</p><table><thead><tr><th>Project</th><th></th><th></th><th></th><th></th><th>Pay back period</th></tr></thead><tbody><tr><td></td><td>0</td><td>1</td><td>2</td><td>3</td><td></td></tr><tr><td>X</td><td>$-500</td><td>$500</td><td>$250</td><td>$0</td><td>1</td></tr><tr><td>Y</td><td>$-500</td><td>$100</td><td>$200</td><td>$600</td><td>3</td></tr><tr><td>Z</td><td>$-500</td><td>$300</td><td>$400</td><td>$400</td><td>1.5</td></tr></tbody></table><p>It seems that <strong>X</strong> project has the shortest pay back period but it may not always be reliable. See cons below.</p></li><li><p>Pros: </p><ul><li>reflect time directly</li><li>reflects opportunity costs</li></ul><p>Cons: </p><ul><li><strong>Neglect cash flow after pay back period</strong></li><li><strong>neglect timing</strong></li><li><strong>Neglect risk(no discount rate included)</strong></li></ul></li></ol><table><thead><tr><th>Project</th><th></th><th></th><th></th><th></th><th>Payback period</th><th>NPV(10%)</th></tr></thead><tbody><tr><td></td><td>0</td><td>1</td><td>2</td><td>3</td><td></td><td></td></tr><tr><td>X</td><td>$-500</td><td>$500</td><td>$250</td><td>$0</td><td>1</td><td>$161</td></tr><tr><td>Y</td><td>$-500</td><td>$100</td><td>$200</td><td>$600</td><td>3</td><td>$207</td></tr><tr><td>Z</td><td>$-500</td><td>$300</td><td>$400</td><td>$400</td><td>1.5</td><td>$404</td></tr></tbody></table><p>​    If we calculate NPV for these projects, we get a different answer i.e. project <strong>Z</strong></p><ol start="5"><li>Pay back period is a weak capital budgeting tool, it often acts as a back up of NPV.</li></ol><h2 id="Accounting-ratios"><a href="#Accounting-ratios" class="headerlink" title="Accounting ratios"></a>Accounting ratios</h2><ol><li><p>Basically, putting one piece of accounting data over the other piece of accounting data.</p></li><li><p>Example: </p><ul><li><p>Return on invested capital(ROIC)= $\frac{NOPAT}{invested ; capital}$</p><p>NOPAT stands for net operating profit after tax</p></li><li><p>Return on assets(ROA)= $\frac{net ; income}{total ; asset}$</p></li><li><p>Return on equity(ROE)=$\frac {ASE}{net ; income}$</p><p>ASE stands for average shareholder’s equity</p></li><li><p>Gross margin = $\frac{gross ; profit}{sales}$</p></li><li><p>Profit margin = $\frac {net ; profit}{net ; sales}$</p></li><li><p>Profitability index = $\frac  {PV; of ; future ; flow}{initial ; investment}$</p></li></ul></li><li><p>Pros:</p><ul><li>Makes numerical sense</li><li>Reflects the use of capital</li></ul></li><li><p>Cons:</p><ul><li>Neglect timing(no discount ratio included)</li><li>Include too much accounting distortions(like depreciation)</li><li>Neglects risk</li></ul></li><li><p>Accounting ratio is a useful tool but it should act as a back up of NPV as well.</p></li></ol><h2 id="Internal-rate-of-return-IRR"><a href="#Internal-rate-of-return-IRR" class="headerlink" title="Internal rate of return(IRR)"></a>Internal rate of return(IRR)</h2><ol><li><p>IRR is basically the discounting rate which will make <strong>NPV = 0</strong>. In other words, we discount cash flow harder and harder until NPV reaches naught. IRR is kind of a measure of the resiliency of the project.</p></li><li><p>There is no direct connection between IRR and NPV. A large NPV doesn’t always mean we will have a high IRR. It is always a good practice to put NPV and IRR together </p></li><li><p>IRR holds all the pros of NPV. In addition, it scales NPV into percentage interpretation  to make it more intuitive(直观的). However, percentage interpretation may cause problems as well because we don’t know the actual size. For example, 2% of 1billion dollar is greater than 30% of 1000 dollar.</p></li><li><p><strong>WARNING</strong>: be careful about using IRR solely when directions of cash flow are often reversed.</p><table><thead><tr><th>Project</th><th>Year 0</th><th>Year 1</th><th>IRR</th><th>NPV(10%)</th></tr></thead><tbody><tr><td>X</td><td>$-400</td><td>$500</td><td>25%</td><td>$54.54</td></tr><tr><td>Y</td><td>$400</td><td>$-500</td><td>25%</td><td>$-54.54</td></tr></tbody></table><p>Project X is a standard case. Project Y is like issuing a mortgage of $400 at year 0 and pay back $500 at year 1. They both have the IRR but their NPV are opposite. </p><p>That is another reason why we often present IRR together with NPV.</p></li><li><p>There is a chance that we can have multiple IRR or no IRR because we are solving a polynomial equation. Math :)</p></li><li><p>We can calculate NPV, IRR using built-in functions in Microsoft Excel.</p></li></ol><h2 id="Sensitivity-analysis"><a href="#Sensitivity-analysis" class="headerlink" title="Sensitivity analysis"></a>Sensitivity analysis</h2><ol><li><p>Most CFOs rely on multiple metrics.</p></li><li><p>Everything depends on forecasts while all forecasts are technically wrong as there is always uncertainty in the financial market.</p></li><li><p>Forecasts depend on assumptions. Sensitivity analysis focus on how forecast results will change if assumptions changed slightly. See the example below</p><table><thead><tr><th>Time</th><th>Pessimistic</th><th>Expected</th><th>Optimistic</th></tr></thead><tbody><tr><td>0</td><td>-$6,000</td><td>-$5,000</td><td>-$5,000</td></tr><tr><td>1</td><td>$2,500</td><td>$3,200</td><td>$4,000</td></tr><tr><td>2</td><td>$2,000</td><td>$2,500</td><td>$3,000</td></tr><tr><td>3</td><td>$1,000</td><td>$1,200</td><td>$2,000</td></tr><tr><td>4</td><td>$1,000</td><td>$1,200</td><td>$1,500</td></tr><tr><td>5</td><td>$1,000</td><td>$1,200</td><td>$1,500</td></tr><tr><td>NPV(15%)</td><td>$-587</td><td>$1,745</td><td>$3,665</td></tr></tbody></table><p>We’ve got three different NPV depending on the assumptions we made and our forecasts make more sense.</p></li></ol><h1 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h1><h2 id="Overview-of-financial-statements"><a href="#Overview-of-financial-statements" class="headerlink" title="Overview of financial statements"></a>Overview of financial statements</h2><ol><li>Balance sheet<ul><li>What does the firm own?</li><li>Assets = Liabilities + owner’s Equity</li><li>There are three types of asset: current asset, fixed asset and other asset.</li><li>There are three types of liabilities: current liability, long-term liability and shareholder’s equity.</li></ul></li><li>Profit and loss statement<ul><li>Whether the firm is making money?</li><li>EBITDA(Earning before interest, tax, depreciation and amortization) = Net sale(Revenue) - Cost of goods sold - SG&amp;A expense(Selling, General &amp; Administrative expense)</li><li>EBIT(Earning before interest and tax) = EBITBDA - Depreciation - Amortization</li><li>Taxable income = EBIT - Interest expense</li><li>Net income(profit) = Taxable income - Tax - Dividends</li></ul></li><li>Cash flow statement<ul><li>Accrual method(权责发生制) of accounting.</li><li>Reports on cash movements</li><li>Reconciles cash movement between balance sheet and P/L statement </li></ul></li></ol><h2 id="Hunting-for-cash-creation"><a href="#Hunting-for-cash-creation" class="headerlink" title="Hunting for cash creation"></a>Hunting for cash creation</h2><ol><li>Having earnings doesn’t equal to having cash. It is due to the <strong>accrual method</strong> used in accounting. Sales are booked before cash actually comes in and there are non-cash items.</li><li><strong>We really need to find free cash flow because all our tools of discounting cash and capital budgeting depend on cash flow. Without cash, those formulae are useless.</strong> </li><li>Free cash flow(FCF) will tell us how much cash is there actually in the business.<ul><li>FCF = Operating Profit(after tax) - Increase in working capital + Depreciation - Capital expenditure + After-tax salvage value(税后残值)</li><li><strong>Working capital = Non-cash current asset - Current liability</strong></li><li><strong>Salvage value</strong> is the book value of an asset less depreciation. It is only included in FCF formula <strong>if assets are sold at the end of the project</strong>.</li></ul></li></ol><h2 id="Working-with-capital-adjustment"><a href="#Working-with-capital-adjustment" class="headerlink" title="Working with capital adjustment"></a>Working with capital adjustment</h2><ol><li>Increase in current liability is good for cash.</li><li>Increase in current asset is bad for cash.</li><li>Working capital is an opportunity cost, you have some net current asset in your hand but you can’t change it into cash to generate profit.</li></ol><h2 id="Depreciation-and-capital-expenditure-income"><a href="#Depreciation-and-capital-expenditure-income" class="headerlink" title="Depreciation and capital expenditure(income)"></a>Depreciation and capital expenditure(income)</h2><ol><li>Depreciation represents losing value due to wear and tear and it is a non-cash expenditure.</li><li>Amortization is kinda similar, it represents ‘depreciation’ for intangible assets.</li><li>Capital expenditure is a cash expenditure and it is not treated as expenditure in accounting often due to its large numerical size.</li><li>Salvage value of an asset is also an opportunity cost, we want to change it back to cash at the end of the project. It is the opposite of capital expenditure.</li></ol><h2 id="Taxes"><a href="#Taxes" class="headerlink" title="Taxes"></a>Taxes</h2><ol><li>Taxes are real cash flow.</li><li>All expenses shield revenue from tax, a firm should make use of all its shields.</li><li>Interest paid for debts can deduct tax and it’s part of the reason why debt is so attractive to firms.</li></ol><h1 id="Example-of-free-cash-flow"><a href="#Example-of-free-cash-flow" class="headerlink" title="Example of free cash flow"></a>Example of free cash flow</h1><table><thead><tr><th>Year</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>Revenue</td><td></td><td>$500</td><td>$500</td><td>$500</td></tr><tr><td>Total costs</td><td></td><td>$300</td><td>$300</td><td>$300</td></tr><tr><td>Depreciation</td><td></td><td>$100</td><td>$100</td><td>$100</td></tr><tr><td>EBIT</td><td></td><td>$100</td><td>$100</td><td>$100</td></tr><tr><td>Taxes(30%)</td><td></td><td>$30</td><td>$30</td><td>$30</td></tr><tr><td>NOPAT</td><td></td><td>$70</td><td>$70</td><td>$70</td></tr><tr><td>Capital spending</td><td>$500</td><td>$0</td><td>$0</td><td>$0</td></tr><tr><td>Net PP&amp;E</td><td>$500</td><td>$400</td><td>$300</td><td>$200</td></tr><tr><td>Cash from operations</td><td>$0</td><td>$170</td><td>$170</td><td>$170</td></tr><tr><td>Working capital</td><td>$150</td><td>$100</td><td>$50</td><td>$0</td></tr><tr><td>Asset sales</td><td>$0</td><td>$0</td><td>$0</td><td>$200</td></tr><tr><td>Free cash flow</td><td>-$650</td><td>$220</td><td>$220</td><td>$420</td></tr></tbody></table><ul><li><p>NOPAT: net operating profit after tax</p></li><li><p>Cash from operations = Depreciation + NOPAT</p></li><li><p>Discount rate = 10%</p></li><li><p>NPV = $47.37</p></li><li><p>IRR = 14%(using Excel function)</p></li><li><p>Payback period = 2.5 years</p></li><li><p>$$<br>ROIC = \frac{ave(NOPAT)}{ave(Net; PP&amp;E)}=\frac{(0+70+70+70)\div 3}{(500+400+300+200)\div 4}=20%<br>$$</p></li></ul><h1 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h1><h2 id="Debt-vs-Equity-股本"><a href="#Debt-vs-Equity-股本" class="headerlink" title="Debt vs Equity(股本)"></a>Debt vs Equity(股本)</h2><ol><li>For a firm, it usually has two sources of capital: debt($r_{d}$) and equity($r_{e}$). They have different discounting rate due to different level of risk.</li><li>Debt:<ul><li>Non-contingent claim: not contingent on the financial condition of the firm. In other words, you have to pay me back no matter what happened.</li><li>Collateral(需要抵押的)</li><li>Debt has priority in bankruptcy.</li><li>A lot of monitoring or restrictions on how a firm uses the money.</li><li>Types of debt:<ul><li>From banks: straight loan; line of credit; mortgage; business loan; industrial loan</li><li>From the public: bonds</li></ul></li></ul></li><li>Equity:<ul><li>Ownership of the company</li><li>Contingent claim: contingent on the financial condition of the firm.</li><li>Equity holders will get all the residual cash.</li><li>Equity holders experience higher risk than debt holders.</li><li>Equity will be wiped out in bankruptcy.</li></ul></li><li>Capital structure: how firm mix the use of debt and equity<ul><li><strong>IT DOES NOT CHANGE THE UNDERLYING BUSINESS RISK OF THE FIRM.</strong> <ul><li>For example, if a firm takes lots of debt, it doesn’t get riskier but the equity holders become riskier.</li><li>Another example, if KFC takes lots of debt, it won’t affect consumers’ desire to buy chicken so the business risk level stays unchanged.</li></ul></li></ul></li></ol><h2 id="Risk-free-rate"><a href="#Risk-free-rate" class="headerlink" title="Risk free rate"></a>Risk free rate</h2><ol><li>Risk free rate acts as the baseline for the interest rate.</li><li>Safest possible place to put money in the US will be US Treasury bonds.</li><li>Rate of return = risk free rate(US treasury bonds) + risk premium</li><li>If we go through historical data up to ancient Rome, we will find national bonds fluctuated between 5% and 7% in most years.</li><li>Bonds with longer maturity have a higher risk because the rate may rise in the future(opportunity cost) and there is more liquidity risk for long term bonds.</li></ol><h2 id="Historical-risk-and-return"><a href="#Historical-risk-and-return" class="headerlink" title="Historical risk and return"></a>Historical risk and return</h2><ol><li>The riskier asset I buy, greater the return I will get.</li><li>Stork return rates are around 10% - 12% per year on average in the U.S.</li><li>Storks generally do better in the long run.</li><li>Stork’s volatility(易变性) is much higher than bonds or equity.</li></ol><h2 id="Equity-risk-premium"><a href="#Equity-risk-premium" class="headerlink" title="Equity risk premium"></a>Equity risk premium</h2><ol><li><p>Equity premium = $R_{m} - r.f.$</p><p>$R_{m}$: Stork market return rate</p><p>$r.f.$: risk free rate</p></li><li><p>From historical data, $R_{m}=11%$, $r.f. = 5.5%$ . We have equity premium $=5.5%$ on average on condition that we are investing in a wide range of portfolio. It is kind of the fair rate to compensate for the stork market risk. </p></li><li><p>In the real world, equity premium around $4.5% - 6.5%$ is considered to be good.</p></li><li><p>Factors affecting equity premium: systemic risk, investors’ attitude toward risk.</p></li></ol><h2 id="Beta-and-cost-of-equity"><a href="#Beta-and-cost-of-equity" class="headerlink" title="Beta and cost of equity"></a>Beta and cost of equity</h2><ol><li><p>Diversification of a portfolio may decrease risk while the market risk can’t be diversified.</p></li><li><p>Ideally, we want a portfolio which wiggles less and provides a stable return.</p></li><li><p>如果我们想要一个震荡幅度小的组合投资，并不是说我们把它内部的股票全换成比较稳定的就能达到，因为可能多个稳定的股票同时跌。我们还要考虑股票的相互影响，最好是找到规律比如说：一个股票跌，另一个很容易涨，这样在组合投资外部看来，它的震荡幅度还是小的。</p></li><li><p>We want to measure how does a stork change the risk of my portfolio.</p><ul><li><p><strong>Beta</strong>(贝塔系数）: a measure of the risk arising from exposure to general market movements as opposed to idiosyncratic(特殊) factors. In other words, it is a measure of the sensitivity of a stork to the market risk.</p></li><li><p>It depends on the variance and covariance of the stork.</p><p><strong>Variance</strong>: how a stork wiggle by itself?</p><p><strong>Covariance</strong>: how two or storks wiggle with each other?</p></li><li><p>$\beta = \frac{Cov(R_{i},R{m})}{Var(R{m})}$</p><p>$Cov$: covariance</p><p>$R_{i}$: a specific stork</p><p>$R_{m}$: the whole stork market</p><p>In other words, beta equals to the covariance of a specific stork and the whole stork market over the variance of the whole stork market.</p></li><li><p>If beta = 2, this means the stork return is about twice the market return</p></li></ul></li><li><p>Capital asset pricing model(CAPM): giving us the return of putting on risk to any stork.</p><ul><li><p>$$<br>return(cost ;of; equity) =risk; free; rate + \beta \times market ; risk; premium(equity ; premium)<br>$$</p></li><li><p>If a stork has $\beta = 1.8$, equity premium $=5.5%$ and risk free rate $=3%$. We have:</p><p>cost of equity = $3%+1.8\times 5.5% = 12.9%$</p></li><li><p>We can use this value as the discounting rate for future cash inflow.</p></li><li><p>It also shows how much return I should get by taking that amount of risk.</p></li></ul></li></ol><h2 id="Credit-rating"><a href="#Credit-rating" class="headerlink" title="Credit rating"></a>Credit rating</h2><ol><li>A debt may default(无法偿还). Investor concerns the possibility of default and the principal recovery rate in default. These two things put a risk premium on debt and determine the credit rating of a company.</li><li>Possibility of default depends on:<ul><li>Maturity</li><li>Cash flow</li><li>Debt level</li><li>Profitability</li><li>Current economic conditions</li><li>Ability to raise capital</li></ul></li><li>Principal recover rate depends on:<ul><li>Tangibility</li><li>Marketability(易转让程度)</li><li>Transportability</li></ul></li></ol><h2 id="Cost-of-debt"><a href="#Cost-of-debt" class="headerlink" title="Cost of debt"></a>Cost of debt</h2><p>We have three methods to estimate the cost of debt.</p><ol><li><p><strong>Historical cost</strong>: what is the rate of interest last time the company borrow money?</p><p>It is a fine method but won’t reflect the current market conditions. Need to be cautious.</p></li><li><p><strong>Current yield to maturity</strong>: If we have outstanding debt and that debt is still traded on the market, we can use the current yield to maturity directly.</p><p>It is the best method but only works if the company has an existing debt. Works well for big companies.</p></li><li><p><strong>Ratings adjusted yield</strong>: put a risk premium on risk free rate according to the company’s credit rating. We can also use other companies with a similar credit rating for reference.</p></li><li><p>Interest rates are tax deductible. The effective rate = $r_{d}\times (1-r_{t})$ </p></li></ol><h2 id="Weighted-average-cost-of-capital-WACC"><a href="#Weighted-average-cost-of-capital-WACC" class="headerlink" title="Weighted average cost of capital(WACC)"></a>Weighted average cost of capital(WACC)</h2><ol><li>WACC is obtained by allocating different weight for $r_{e}$, $r_{d}$ then find the average.</li><li>WACC = $\frac{Equity}{Equity+Debt}\times r_{e}+\frac {Debt}{Equity+Debt}\times r_{d}(1-r_{t})$</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Week-1&quot;&gt;&lt;a href=&quot;#Week-1&quot; class=&quot;headerlink&quot; title=&quot;Week 1&quot;&gt;&lt;/a&gt;Week 1&lt;/h1&gt;&lt;h2 id=&quot;The-interest-rate-in-general&quot;&gt;&lt;a href=&quot;#The-interest-rate-in-general&quot; class=&quot;headerlink&quot; title=&quot;The interest rate in general&quot;&gt;&lt;/a&gt;The interest rate in general&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Get money earlier is good because there is opportunity cost, inflation and uncertainty of the financial condition(risk).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interest: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we are in fact losing for getting money back later, there need to be something to compensate for our loss. We call it &lt;strong&gt;interest&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;People pay interests for time. &lt;/li&gt;
&lt;li&gt;Interest rate kinda describes the risk of being patient.&lt;/li&gt;
&lt;li&gt;What affects interest rates, same as the three things we talked about: opportunity cost(How strong is the economic growth?), inflation rate and level of risk(interest rate is higher during the war while lower during the peaceful time).&lt;/li&gt;
&lt;li&gt;Interest is the foundation of economics as it describes the cost of time. Everything else is built based on this. &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Finance" scheme="https://yuxuanliu.tech/categories/Finance/"/>
    
    
      <category term="Finance" scheme="https://yuxuanliu.tech/tags/Finance/"/>
    
  </entry>
  
  <entry>
    <title>C++ basics</title>
    <link href="https://yuxuanliu.tech/c++_basics/"/>
    <id>https://yuxuanliu.tech/c++_basics/</id>
    <published>2019-09-08T22:59:17.000Z</published>
    <updated>2019-12-14T07:15:08.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Basics-information"><a href="#1-Basics-information" class="headerlink" title="1. Basics information"></a>1. Basics information</h2><ol><li>C++ file ends up with <code>.cpp</code></li><li>We always need to <code>build</code> the project first before running it. Build will translate your code to the language that the computer can understand</li><li>MAKE SURE TO PUT <code>;</code> EVERY TIME YOU FINISH A LINE IN C++.</li></ol><h2 id="2-Drawing-a-shape"><a href="#2-Drawing-a-shape" class="headerlink" title="2. Drawing a shape"></a>2. Drawing a shape</h2><ol><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>You need <code>#include &lt;iostream&gt;</code> and <code>using namespace std</code> at the beginning of your code. Don’t worry their meanings for now, will explain later.</p></li><li><p><code>int main()</code> is a function in c++, like a container so we can put our codes inside. Codes within the <code>{}</code> will be executed when we run the program.</p><a id="more"></a></li><li><p><code>return 0;</code> don’t worry too much for now, remember we need it inside the bracket.</p></li><li><p><code>cout</code> stands for console out. This will print out the string in the console. </p></li><li><p><code>endl</code> means ending a line in console.</p></li><li><p>c++ will read code from top to bottom</p></li><li><p>Here I am drawing out a triangle:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"   /|"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"  / | "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" /  |"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"/___|"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-Variable"><a href="#3-Variable" class="headerlink" title="3. Variable"></a>3. Variable</h2><ol><li><p>Variable is basically a container where we can store information</p></li><li><p>To create a variable, we need to tell c++ the <code>data type</code>. Let me create a <code>string</code> variable as example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> student_name = <span class="string">"John"</span>;</span><br></pre></td></tr></table></figure><p>We can also create a <code>integer</code> type variable in another format as followed:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> student_age;</span><br><span class="line">student_age = <span class="number">35</span>;</span><br></pre></td></tr></table></figure><p>These two formats are equivalent.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age,gpa;</span><br></pre></td></tr></table></figure><p>We may also create multiple variables of the same data type in one line as above.</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> student_name = <span class="string">"John"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, my name is "</span>&lt;&lt; student_name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can insert a <code>string</code> variable at the end of another string by putting the variable after <code>&lt;&lt;</code>. This operation is like <code>print(f&quot;Hello, my name is{student_name}&quot;)</code> is Python. </p></li></ol><ol start="4"><li><p>If we want to insert the variable in the middle of another string, we can use the trick below:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">   <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> student_age = <span class="number">19</span>;</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, I am "</span>&lt;&lt;student_age&lt;&lt;<span class="string">" years old"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Make sure to put the variable in between <code>&lt;&lt;</code>. These <code>&lt;&lt;</code> are linking <code>strings</code> and <code>variables</code> together.</p></li><li><p>We can also print two <code>variables</code> in a raw, see the example below:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> student_age;</span><br><span class="line">    student_age = <span class="number">19</span>;</span><br><span class="line">    <span class="keyword">bool</span> isMale;</span><br><span class="line">    isMale = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;student_age&lt;&lt;isMale&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It works kinda the same, we use <code>&lt;&lt;</code> link up variables.</p></li></ol><h2 id="4-Data-types"><a href="#4-Data-types" class="headerlink" title="4. Data types"></a>4. Data types</h2><ol><li><code>char grade = &#39;A&#39;;</code> stands for character, it can only store one character. Be careful, we must put the character in between <code>&#39;&#39;</code> rather than <code>&quot;&quot;</code>.<ol start="2"><li><code>string phase = &quot;Hello there&quot;;</code> stands for a string of characters. </li><li><code>int age = 50;</code> stands for a whole number. It can be either positive or negative</li><li><code>float value = 13.5;</code> can store decimal values.</li><li><code>double value = 3.1415;</code> can store decimal values. The difference between <code>double</code> and <code>float</code> is: <code>float</code> can take more decimal points. As a beginner, stick with <code>double</code></li><li><code>bool isMale = false</code> This stands for Boolean values, can either be <code>true</code> or <code>false</code>.</li></ol></li></ol><h2 id="5-Working-with-strings"><a href="#5-Working-with-strings" class="headerlink" title="5. Working with strings"></a>5. Working with strings</h2><ol><li><p><code>endl</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World! "</span> ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Whats up."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>endl</code> basically tells c++ to start a new line in the console after each <code>cout</code> operation. If we don’t want to move to a new line, we can remove <code>&lt;&lt; endl</code>.</p><p>Similar to Python, <code>\n</code> means starting a new line so <code>cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl;</code> is equivalent to <code>cout &lt;&lt; &quot;Hello world \n&quot;;</code> </p></li><li><p>string functions:</p><ul><li><p><code>.length()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> trial;</span><br><span class="line"> trial = <span class="string">"Hello world"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; trial.length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This will print out the length of a <code>string variable</code>. Be aware, we need to define the variable first. If we do <code>cout &lt;&lt; &quot;Hello world&quot;.length() &lt;&lt; endl</code>, an error will show up.</p></li><li><p>Indexing:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> trial;</span><br><span class="line"> trial = <span class="string">"Hello world"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; trial[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello world"</span>[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similar to Python, we can access a certain character in the <code>string</code> by indexing and we don’t have to define a <code>string variable</code> first like what  we do for <code>.length()</code>.  </p></li><li><p>Assigning a new character:</p><p>We can modify a character in the string by assigning a new character to it. <code>trial[1] = &#39;E&#39;</code> Now, we have <code>&quot;HEllo world&quot;</code> instead of <code>&quot;Hello world&quot;</code>.</p></li><li><p><code>.find()</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> trial;</span><br><span class="line"> trial = <span class="string">"Hello world"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; trial.find(<span class="string">"world"</span>,<span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can pass in two parameters, the first will be the <code>substring</code> we wish to find and the second will be where do we want <code>c++</code> to start searching. By default, the second parameter will be <code>0</code>.</p><p>If that <code>substring</code> can’t be find. <code>C++</code> will return <code>4294967295</code>. It is a bit odd but this value is actually the largest 32 bits unsigned value, which kind of make sense.</p></li><li><p><code>.substr()</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> trial;</span><br><span class="line"> trial = <span class="string">"Hello world"</span>;</span><br><span class="line"> <span class="built_in">string</span> trial_1;</span><br><span class="line"> trial_1 = trial.substr(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; trial_1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This function will help us cut a <code>substring</code> out of the main <code>string</code>. It requires two parameters, the first parameter will tell <code>c++</code> where to start cutting. The second parameter will tell <code>c++</code> how many characters do we need. </p><p><code>trial_1 = trial.substr(2,3);</code> Here, we start from the <code>2</code> position which is <code>&quot;l&quot;</code> and we need 3 characters. We get <code>llo</code> as expected. </p></li></ul></li></ol><h2 id="6-Working-with-numbers"><a href="#6-Working-with-numbers" class="headerlink" title="6. Working with numbers"></a>6. Working with numbers</h2><ol><li><p>A quick demo of the math operations</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">5</span> - <span class="number">7</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">15.0</span> / <span class="number">7</span>;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="number">5</span> * <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">10</span> % <span class="number">3</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is one thing interesting, if we do <code>cout &lt;&lt; 15/7;</code> C++ will return <code>2</code> as we are dividing an <code>int</code> by an <code>int</code> so the result is also an <code>int</code>. How can we fix this, use <code>15.0</code> or <code>7.0</code> instead.</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> value;</span><br><span class="line">    value = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    value++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    value--;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    value +=<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Here <code>value++</code> means an increment of <code>1</code> to a numerical variable. A short hand in <code>c++</code>.</li><li>Here <code>value--</code> means decreasing a numerical variable by 1. A short hand in <code>c++</code>.</li><li><code>+=</code> <code>-=</code> etc works the same as Python</li></ul></li><li><p>If we do <code>int</code>+<code>int</code>, we get <code>int</code>. That is kinda the reason why <code>int/int</code> will give <code>int</code> as well.</p></li><li><p>Math function:</p><ul><li><p><code>#include &lt;cmath&gt;</code> We need to import these functions before using them.</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This <code>pow(A,B)</code> function has two parameters, will return A to the power of B. </p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">sqrt</span>(<span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This <code>sqrt(A)</code> takes one parameter, will return the square root of A.</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; round(<span class="number">4.3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This <code>round(A)</code> function will follow the normal rounding rule(四舍五入).</p><p>We also have <code>ceil(A)</code> function, which will round up(向上取整).</p><p>Oppositely, we have <code>floor(A)</code> function, which will round down(向下取整)</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fmax(<span class="number">3</span>,<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fmax(A,B)</code> function will take two parameters, return the greater value between <code>A</code> and <code>B</code>.</p><p><code>fmin(A,B)</code> function will do the opposite.</p></li></ul></li></ol><h2 id="7-Getting-input-from-the-user"><a href="#7-Getting-input-from-the-user" class="headerlink" title="7. Getting input from the user"></a>7. Getting input from the user</h2><ol><li>Most data types:</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">int</span> age;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt;<span class="string">"Please enter your age"</span>;</span><br><span class="line"> <span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">"You are "</span>&lt;&lt; age &lt;&lt; <span class="string">" years old"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   Create a variable first as we want input from the user and we need to store it somewhere.</p><p>   Getting an input is kinda the opposite of <code>cout &lt;&lt;</code>. We use <code>cin &gt;&gt;</code>  and put the variable name after the <code>&gt;&gt;</code> sign. This method works for most data types except for <code>string</code>.</p><ol start="2"><li><code>string</code> type:</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> name;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt;<span class="string">"Please enter your name"</span>;</span><br><span class="line"> getline(<span class="built_in">cin</span>,name);</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">"You are "</span>&lt;&lt; name &lt;&lt; <span class="string">"."</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   We need to use the <code>getline()</code> function when input is the <code>string</code> type. It takes two parameters which are <code>cin</code> and <code>variable_name</code>.</p><h2 id="8-Building-a-calculator"><a href="#8-Building-a-calculator" class="headerlink" title="8. Building a calculator"></a>8. Building a calculator</h2><p>Our target is to get two input figures from the user and add them together and print out the result.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> num1, num2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"Please fill in the first number: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num1;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"Please fill in the second number: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The result is: "</span> &lt;&lt; num1+num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-Building-a-Mad-Libs-Game-疯狂填词-wth"><a href="#9-Building-a-Mad-Libs-Game-疯狂填词-wth" class="headerlink" title="9. Building a Mad Libs Game(疯狂填词 wth???)"></a>9. Building a Mad Libs Game(疯狂填词 wth???)</h2><p>Basically, let the user to input three words and put these words into three sentences. Funny? Maybe.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="built_in">string</span> color,plural_none,celebrity;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please fill in a colour."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>,color);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please fill in a plural none."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>,plural_none);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please fill in a celebrity."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>,celebrity);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Roses are "</span> &lt;&lt; color &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; plural_none &lt;&lt; <span class="string">" are blue"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"I love "</span> &lt;&lt; celebrity &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-Arrays"><a href="#10-Arrays" class="headerlink" title="10. Arrays"></a>10. Arrays</h2><ol><li><p>A <code>variable</code> can only store one value while an <code>array</code> can hold multiple data values.</p></li><li><p>Array operations:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">int</span> lucky_nums[<span class="number">20</span>] = &#123;<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">23</span>,<span class="number">42</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;lucky_nums[<span class="number">3</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    lucky_nums[<span class="number">1</span>] =  <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;lucky_nums[<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>It is similar to creating a variable but we need to put a <code>[]</code> after the <code>array</code> name and put its elements inside <code>{}</code>. We can limit the length(size) of the array by putting a value inside <code>[]</code>(optional).</li><li>We can obtain an element inside the array by <code>indexing</code>, standard stuff.</li><li>We can modify an element’s value by assigning a new value to it.</li><li>If we want to <code>cout</code> the whole <code>array</code>, we need to use <code>for</code> loop</li></ul></li></ol><h2 id="11-Function"><a href="#11-Function" class="headerlink" title="11. Function"></a>11. Function</h2><ol><li><p>A container to put codes so we can re-use them in the future</p></li><li><p><code>main()</code> is actually a function.</p></li><li><p>Create a basic function:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">say_hi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello user"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;say_hi();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>We need to define a function’s <code>return type</code> at the start of defining a function. Everything inside <code>{}</code> are codes of the function.</li><li><code>void</code> basically means <code>return nothing</code>.</li><li>Don’t forget to call the function inside the <code>main()</code>.</li></ul></li><li><p>Create a function with parameters</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">say_hi</span><span class="params">(<span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello "</span>&lt;&lt;name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> student = <span class="string">"Oscar"</span>;</span><br><span class="line">    say_hi(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is kinda similar to Python I guess but we must specify the <code>data type</code> of the formal parameter(形参) we want to input. In terms of the example above, <code>say_hi(string name)</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">say_hi</span><span class="params">(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello "</span>&lt;&lt;name&lt;&lt;<span class="string">". You are "</span>&lt;&lt; age &lt;&lt; <span class="string">" years old"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> student = <span class="string">"Oscar"</span>;</span><br><span class="line">    <span class="keyword">int</span> student_age = <span class="number">19</span>;</span><br><span class="line">    say_hi(student,student_age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We may pass in multiple parameters if we wish. MAKE SURE TO SPECIFY THE DATA TYPE.</p></li><li><p>Order is important in <code>c++</code>, make sure to define the function before calling it in main. If we really want to reverse the order, see the example below, there is a trick we can do.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">say_hi</span><span class="params">(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="built_in">string</span> student = <span class="string">"Oscar"</span>;</span><br><span class="line">    <span class="keyword">int</span> student_age = <span class="number">19</span>;</span><br><span class="line">    say_hi(student,student_age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">say_hi</span><span class="params">(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello "</span>&lt;&lt;name&lt;&lt;<span class="string">". You are "</span>&lt;&lt; age &lt;&lt; <span class="string">" years old"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can declare a function first by <code>void say_hi(string name, int age);</code>  and fill in codes later.</p></li><li><p>We may pass parameters into a function, but we are actually passing in their values instead of variables themselves. If we want to modify values of variables, WE MUST PASS IN POINTERS AND DEFERENCE THEM.</p></li></ol><h2 id="12-Return-statement"><a href="#12-Return-statement" class="headerlink" title="12. Return statement"></a>12. Return statement</h2><ol><li><p>We must specify the return <code>data type</code> when defining a function. We can set any one of the <code>data types</code> we know as return. If we don’t want anything to return, use <code>void</code></p></li><li><p>Define a function with <code>return</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cube</span><span class="params">(<span class="keyword">double</span> figure)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result;</span><br><span class="line">    result = figure*figure*figure;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> value = <span class="number">3.14</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;cube(value)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>return</code> is very similar to Python. The function will be terminated when <code>return</code> is executed.</p><p>Don’t forget to put a <code>;</code> after the <code>return</code> statement.</p></li></ol><h2 id="13-If-statement"><a href="#13-If-statement" class="headerlink" title="13. If statement"></a>13. If statement</h2><ol><li><p>Allow our program to respond to different conditions。</p></li><li><p><code>if(condition){operation}</code> In other words, if the condition in <code>()</code> is <code>true</code>, codes within <code>{}</code> will run. See the example, below</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> is_male = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(is_male)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hey, this is a boy"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>We can also do logic operators inside <code>()</code>. We have <code>&amp;&amp;</code> for <code>and</code> operator. <code>||</code> for <code>or</code> operator. Example:<code>if(is_male &amp;&amp; is_tall){cout&lt;&lt;&quot;You are both tall and male&quot;&lt;&lt;endl;}</code></p></li><li><p>The basic logic structure in <code>C++</code> is similar to <code>Python</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can also do <code>if</code>, <code>else</code> and <code>else if</code></p></li><li><p>The negation operator in <code>C++</code> is <code>!</code>. Basically, if we have <code>is_tall = true</code>, <code>!is_tall</code> will be <code>false</code>. This basically reverses the answer.</p></li></ol><h2 id="14-More-if-statement-comparison-operators"><a href="#14-More-if-statement-comparison-operators" class="headerlink" title="14. More if statement(comparison operators)"></a>14. More if statement(comparison operators)</h2><ol><li><p>A quick example, see below</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> num1,num2;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please fill in the first number"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; num1;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please fill in the second number"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; num2;</span><br><span class="line">    <span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"The first number is greater which is "</span>&lt;&lt;num1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num1&lt;num2)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"The second number is greater which is "</span>&lt;&lt;num2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num1==num2)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Two numbers are equal, they are both "</span>&lt;&lt;num2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>We have a number of comparison operators: <code>&gt;</code>, <code>&lt;</code>, <code>==</code>, <code>!=</code>. We can mix these comparison operators with logic operators(<code>&amp;&amp;</code>, <code>||</code>).</p></li></ol><h2 id="15-Build-a-more-powerful-calculator"><a href="#15-Build-a-more-powerful-calculator" class="headerlink" title="15. Build a more powerful calculator"></a>15. Build a more powerful calculator</h2><p>The user can fill in two numbers as well as the operator.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> operat;</span><br><span class="line">    <span class="keyword">double</span> num1,num2,result;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please fill in the first number"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num1;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please fill in the operator"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;operat;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please fill in the second number"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num2;</span><br><span class="line">    <span class="keyword">if</span> (operat == <span class="string">'+'</span>)&#123;</span><br><span class="line">        result = num1+num2;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;num1&lt;&lt;operat&lt;&lt;num2&lt;&lt;<span class="string">"="</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(operat == <span class="string">'-'</span>)&#123;</span><br><span class="line">        result = num1-num2;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;num1&lt;&lt;operat&lt;&lt;num2&lt;&lt;<span class="string">"="</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(operat == <span class="string">'*'</span>)&#123;</span><br><span class="line">        result = num1*num2;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;num1&lt;&lt;operat&lt;&lt;num2&lt;&lt;<span class="string">"="</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(operat == <span class="string">'/'</span>)&#123;</span><br><span class="line">        result = num1/num2;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;num1&lt;&lt;operat&lt;&lt;num2&lt;&lt;<span class="string">"="</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Invalid operator input"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-Switch-statements"><a href="#16-Switch-statements" class="headerlink" title="16.  Switch statements"></a>16.  Switch statements</h2><ol><li><p><code>switch</code> statement is a special type of <code>if</code> statement. See the example below.</p></li><li><p>In this example, we want to convert <code>0</code> to Sunday, <code>1</code> to Monday and <code>2</code> to Tuesday etc.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="keyword">int</span> choice)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> day_result;</span><br><span class="line">    <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            day_result = <span class="string">"Sunday"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            day_result = <span class="string">"Monday"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            day_result = <span class="string">"Tuesday"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            day_result = <span class="string">"Wednesday"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            day_result = <span class="string">"Thursday"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            day_result = <span class="string">"Friday"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            day_result = <span class="string">"Saturday"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            day_result = <span class="string">"Invalid input"</span>;</span><br><span class="line">            <span class="keyword">break</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> day_result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> figure;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please fill in the number you wish to convert."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;figure;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;convert(figure)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>switch</code> statement is very useful when we want to compare several values with a variable. </p><p>In the case above, we could compare 1, 2, 3…. to <code>choice</code> variable but it is inefficient. We may write a <code>switch (choice)</code> and <code>case 0:</code> which will be equivalent to <code>choice == 0</code>. </p><p>We need to put a <code>break</code> in each case. Otherwise, if <code>choice == 3</code>, it will enter <code>case 3</code> and keep going into <code>case4</code>, <code>case5</code>, <code>case6</code> and <code>default</code> unless there is a break in any case. We put a <code>break</code> in <code>case 3</code> so it won’t go into the following cases.</p></li></ol><h2 id="17-While-loops"><a href="#17-While-loops" class="headerlink" title="17. While loops"></a>17. While loops</h2><ol><li><p>Basic structure: <code>while(condition){codes}</code></p></li><li><p>Quick demo:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">int</span> index</span>;</span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(index&lt;<span class="number">5</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;index&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        index ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We get <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code> as expected.</p></li><li><p>There is also a loop called <code>do while</code> loop, see the example below</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    index = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;index&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        index ++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(index&lt;<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We get <code>6</code> as the answer. Let me explain, it is like the reverse of a <code>while</code> loop. We will run the codes inside<code>do{}</code> first before checking where <code>while()</code> is met. If <code>while</code> is met, it will keep going. If not, it will terminate. That is kinda why we still get <code>6</code> even though <code>index</code> is already greater than <code>5</code>. </p></li></ol><h2 id="18-Guessing-game"><a href="#18-Guessing-game" class="headerlink" title="18. Guessing game"></a>18. Guessing game</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result_figure,choice;</span><br><span class="line">    result_figure = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> chance,max_chance;</span><br><span class="line">    max_chance = <span class="number">5</span>;</span><br><span class="line">    chance = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please guess a number"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;choice;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(choice == result_figure)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Congrats, you win"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"You are wrong"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            chance ++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(chance == max_chance)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"You ran out of chance, lost"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nothin too exciting :-(</p><h2 id="19-For-loops"><a href="#19-For-loops" class="headerlink" title="19. For loops"></a>19. For loops</h2><ol><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>The <code>for</code> loop in <code>c++</code> is a bit different from python. We must pass in three parameters, the first parameter is to define a <code>i</code> or index. The second is to set the condition which will terminate the loop and finally what should be done to <code>i</code> every time we go through one circulation of the loop. We separate these parameters using<code>;</code> .</p><p>There is another way to write the above codes, see below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>One useful thing is to print out elements in an <code>array</code>. See below</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> list_of_nums[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">11</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;list_of_nums[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This basically print out every element in the <code>list_of_nums</code> array.</p></li></ol><h2 id="20-Exponent-function"><a href="#20-Exponent-function" class="headerlink" title="20. Exponent function"></a>20. Exponent function</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result,base,power;</span><br><span class="line">    base =<span class="number">3</span>;</span><br><span class="line">    power =<span class="number">3</span>;</span><br><span class="line">    result =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;power;i++)&#123;</span><br><span class="line">        result*=base;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Only consider positive power factor to simplify.</p><h2 id="21-2d-arrays-amp-nested-loops"><a href="#21-2d-arrays-amp-nested-loops" class="headerlink" title="21. 2d arrays &amp; nested loops"></a>21. 2d arrays &amp; nested loops</h2><ol><li><p>2d arrays: every element in an array is an array like <code>[[1,2,3],[4,5,6],[7,8,9]]</code> in Python.</p></li><li><p>Create a 2d array:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number_grid[<span class="number">3</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When creating a 2d array, we need two <code>[]</code>. The first <code>[]</code> is to define how many arrays do we have in the outside array. The second is two define how many elements do we have in each inside array.</p></li><li><p>We can access any element in a 2d array using <code>cout&lt;&lt;number_grid[row][column]</code></p></li><li><p>Nested loop is superposing <code>for</code> loops. In other words, a <code>for</code> loop in a <code>for</code> loop.</p><p>We can use this technique to return every element in the<code>number_grid</code> array. See below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number_grid[<span class="number">3</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;number_grid[i][j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Basically, putting the other <code>for</code> loop inside the <code>{}</code> of the first <code>for</code> loop.</p></li></ol><h2 id="22-Comments"><a href="#22-Comments" class="headerlink" title="22. Comments"></a>22. Comments</h2><ol><li>We can use <code>//</code> to create one line of comments.</li><li>We can use <code>/*</code> to start multiple lines of comments and <code>*/</code> to terminate.</li></ol><h2 id="23-Pointers-指针"><a href="#23-Pointers-指针" class="headerlink" title="23. Pointers(指针)"></a>23. Pointers(指针)</h2><ol><li><p>A variable is physically stored at a specific <code>address</code> inside the RAM so the computer can keep track.</p></li><li><p>If we want to print out the memory address of a variable, put <code>&amp;</code> before the variable name.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">12</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; &amp;num1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We get <code>0x6dfefc</code> in this case, it is an address in hexadecimal. </p></li><li><p>In <code>c++</code>, we won’t use the phrase memory address, instead, we call it <code>pointer</code>.</p></li><li><p>We can create a variable to store <code>pointer</code>. See the example below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">int</span>* pNum1 = &amp;num1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When creating a pointer variable, we put <code>*p</code> on top of the original variable name. </p><p>Also, the data type of the <code>pointer</code> variable is the same as the original variable data type. Let me explain, <code>&amp;num1</code> is an address so do <code>pNum1</code> while <code>*</code> means <code>dereferencing</code>, <code>*pNum1</code> is actually the value at that <code>pointer</code> address, which is <code>int</code>.</p></li><li><p>We can also <code>dereference</code> a <code>pointer</code> to find the actual value which is stored at that address.</p><ul><li><code>cout&lt;&lt;pNum1&lt;&lt;endl;</code> will print out the <code>pointer</code> address, we get <code>0x6dfef8</code>.</li><li><code>cout&lt;&lt;*pNum1&lt;&lt;endl;</code> will dereference and print out the actual value, we get <code>12</code>.</li></ul></li><li><p>If we do <code>cout&lt;&lt;*&amp;num1&lt;&lt;endl;</code>,  we get 12 as expected.</p><p>If we do <code>cout&lt;&lt;&amp;*&amp;num1&lt;&lt;endl;</code>,  we get <code>0x6dfef8</code> as expected.</p></li></ol><h2 id="24-Classes-amp-Objects-OOP"><a href="#24-Classes-amp-Objects-OOP" class="headerlink" title="24. Classes &amp; Objects(OOP)"></a>24. Classes &amp; Objects(OOP)</h2><ol><li><p>Existing data types in <code>c++</code> are not enough for us to model everything. We can kinda create a new  data type by creating a <code>class</code>.  See the example below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="built_in">string</span> cpu;</span><br><span class="line">    <span class="built_in">string</span> RAM;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Phone my_phone;</span><br><span class="line">    my_phone.name = <span class="string">"iphone x"</span>;</span><br><span class="line">    my_phone.price = <span class="number">6888</span>;</span><br><span class="line">    my_phone.cpu = <span class="string">"A10"</span>;</span><br><span class="line">    my_phone.RAM = <span class="string">"3G"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;my_phone.name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The codes above are similar to using <code>__init__</code> function in <code>Python</code>.</p></li><li><p><code>class</code> is more like a template, we can specify values of its attributes by creating an <code>object</code>. In the code above, we create an <code>object</code> using  <code>Phone my_phone;</code>.</p></li></ol><h2 id="25-Constructor-functions"><a href="#25-Constructor-functions" class="headerlink" title="25. Constructor functions"></a>25. Constructor functions</h2><ol><li><p>A special function which will always be called whenever we create an <code>object</code>. See codes below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    Phone()&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hey, I am creating a new object"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Phone my_phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We are creating a function inside <code>public</code>. The function name MUST be the same as the <code>class</code> name.</p></li><li><p>We may pass parameters into the constructor function. See below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    Phone(<span class="built_in">string</span> phone_name)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hey, I am creating a new object called "</span>&lt;&lt;phone_name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Phone <span class="title">my_phone</span><span class="params">(<span class="string">"Iphone X"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>We are passing in a <code>phone_name</code> parameter, we must specify its value when creating an <code>object</code>. Also similar to <code>__init__</code> function Python. However, we still need to manually specify values of attributes. Constructor functions can save us some efforts. See below</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="built_in">string</span> cpu;</span><br><span class="line">    <span class="built_in">string</span> RAM;</span><br><span class="line">    Phone(<span class="built_in">string</span> Aname,<span class="keyword">int</span> Aprice,<span class="built_in">string</span> Acpu,<span class="built_in">string</span> ARAM)&#123;</span><br><span class="line">        name = Aname;</span><br><span class="line">        price = Aprice;</span><br><span class="line">        cpu = Acpu;</span><br><span class="line">        RAM = ARAM;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Phone <span class="title">my_phone</span><span class="params">(<span class="string">"Iphone x"</span>,<span class="number">6888</span>,<span class="string">"A10"</span>,<span class="string">"3G"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;my_phone.name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>One thing I need to point out, when naming parameter names inside the constructor function. It is a good practice to put an <code>A</code> before the actual name. In Python, we do <code>Phone.name = name</code>. In <code>c++</code>, <code>name = name</code> can be very confusing so instead we do <code>name = Aname</code>. Make it crystal clear.</p></li><li><p>We may also create multiple constructor functions. See below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="built_in">string</span> cpu;</span><br><span class="line">    <span class="built_in">string</span> RAM;</span><br><span class="line">    Phone()&#123;</span><br><span class="line">        name = <span class="string">"No info"</span>;</span><br><span class="line">        price = <span class="number">0</span>;</span><br><span class="line">        cpu = <span class="string">"No info"</span>;</span><br><span class="line">        RAM = <span class="string">"No info"</span></span><br><span class="line">    &#125;</span><br><span class="line">    Phone(<span class="built_in">string</span> Aname,<span class="keyword">int</span> Aprice,<span class="built_in">string</span> Acpu,<span class="built_in">string</span> ARAM)&#123;</span><br><span class="line">        name = Aname;</span><br><span class="line">        price = Aprice;</span><br><span class="line">        cpu = Acpu;</span><br><span class="line">        RAM = ARAM;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Phone no_info_phone;</span><br><span class="line">    <span class="function">Phone <span class="title">my_phone</span><span class="params">(<span class="string">"Iphone x"</span>,<span class="number">6888</span>,<span class="string">"A10"</span>,<span class="string">"3G"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;my_phone.name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;no_info_phone.name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is an excellent way of setting attributes some default values.</p></li></ol><h2 id="26-Object-functions"><a href="#26-Object-functions" class="headerlink" title="26.  Object functions"></a>26.  Object functions</h2><ol><li><p>Functions we can put inside a <code>class</code>. See below.</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="built_in">string</span> cpu;</span><br><span class="line">    <span class="built_in">string</span> RAM;</span><br><span class="line">    Phone(<span class="built_in">string</span> Aname,<span class="keyword">int</span> Aprice,<span class="built_in">string</span> Acpu,<span class="built_in">string</span> ARAM)&#123;</span><br><span class="line">        name = Aname;</span><br><span class="line">        price = Aprice;</span><br><span class="line">        cpu = Acpu;</span><br><span class="line">        RAM = ARAM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">if_expensive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(price&gt;<span class="number">2000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Phone <span class="title">my_phone</span><span class="params">(<span class="string">"Iphone x"</span>,<span class="number">6888</span>,<span class="string">"A10"</span>,<span class="string">"3G"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;my_phone.if_expensive()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><p>We defined an <code>if_expensive</code> function inside the <code>class</code>. We don’t need to pass in <code>self</code> in <code>c++</code>. We can use parameters directly. To be specific, we use <code>price</code> rather than <code>self.price</code> that is kinda why we don’t need to pass in <code>self</code> as a parameter.</p></li></ol><h2 id="27-Getters-amp-Setters"><a href="#27-Getters-amp-Setters" class="headerlink" title="27. Getters &amp; Setters"></a>27. Getters &amp; Setters</h2><ol><li><p>We can use these to control access to attributes. See below.</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="built_in">string</span> cpu;</span><br><span class="line">    <span class="built_in">string</span> RAM;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Phone(<span class="built_in">string</span> Aname,<span class="keyword">int</span> Aprice,<span class="built_in">string</span> Acpu,<span class="built_in">string</span> ARAM)&#123;</span><br><span class="line">        name = Aname;</span><br><span class="line">        price = Aprice;</span><br><span class="line">        cpu = Acpu;</span><br><span class="line">        RAM = ARAM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">name_getter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name_setter</span><span class="params">(<span class="built_in">string</span> Aname)</span></span>&#123;</span><br><span class="line">        name = Aname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Phone <span class="title">my_phone</span><span class="params">(<span class="string">"Iphone x"</span>,<span class="number">6888</span>,<span class="string">"A10"</span>,<span class="string">"3G"</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;my_phone.name_getter()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    my_phone.name_setter(<span class="string">"Iphone 8"</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;my_phone.name_getter()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><p>We can put attributes that we don’t want users to access inside <code>private:</code>. These attributes can only be accessed by functions inside <code>class{}</code> but not elsewhere. </p><p>We may want users to modify certain data  so we define a <code>name_setter()</code>. We may want users to access certain data so we define a <code>name_getter()</code>.</p></li></ol><h2 id="28-Inheritance-继承"><a href="#28-Inheritance-继承" class="headerlink" title="28. Inheritance(继承)"></a>28. Inheritance(继承)</h2><ol><li><p>We can define a new <code>class</code> by extending an existing <code>class</code>. See the example below for a very basic introduction.</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gaming</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"I want to do some gaming"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"I want to spend some time studying"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yuxuan</span> :</span><span class="keyword">public</span> Student&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Yuxuan me;</span><br><span class="line">    me.study();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can inherit <code>public</code> functions, attributes from a <code>superclass</code> into a <code>subclass</code>. These functions can also be overwritten simply by defining it again.</p></li></ol><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>Thanks for reading. These notes are abstract from the <a href="https://www.mikedane.com/programming-languages/c++/" target="_blank" rel="noopener">c++ tutorial</a> created by <a href="https://www.mikedane.com/" target="_blank" rel="noopener">Mike Dane</a>(Giraffe academy). </p><p>I want to express my thanks to Mike. Awesome videos as always. Make sure to check out his website, contents are absolutely amazing.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Basics-information&quot;&gt;&lt;a href=&quot;#1-Basics-information&quot; class=&quot;headerlink&quot; title=&quot;1. Basics information&quot;&gt;&lt;/a&gt;1. Basics information&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;C++ file ends up with &lt;code&gt;.cpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We always need to &lt;code&gt;build&lt;/code&gt; the project first before running it. Build will translate your code to the language that the computer can understand&lt;/li&gt;
&lt;li&gt;MAKE SURE TO PUT &lt;code&gt;;&lt;/code&gt; EVERY TIME YOU FINISH A LINE IN C++.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-Drawing-a-shape&quot;&gt;&lt;a href=&quot;#2-Drawing-a-shape&quot; class=&quot;headerlink&quot; title=&quot;2. Drawing a shape&quot;&gt;&lt;/a&gt;2. Drawing a shape&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You need &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt; and &lt;code&gt;using namespace std&lt;/code&gt; at the beginning of your code. Don’t worry their meanings for now, will explain later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;int main()&lt;/code&gt; is a function in c++, like a container so we can put our codes inside. Codes within the &lt;code&gt;{}&lt;/code&gt; will be executed when we run the program.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="C++" scheme="https://yuxuanliu.tech/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Quick demo for Pymysql</title>
    <link href="https://yuxuanliu.tech/pymysql_demo/"/>
    <id>https://yuxuanliu.tech/pymysql_demo/</id>
    <published>2019-09-08T22:52:07.000Z</published>
    <updated>2019-09-11T15:33:01.882Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><code>import Pymysql</code></p></li><li><p>Search</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(host=<span class="string">"localhost"</span>,user=<span class="string">"root"</span>,passwd=<span class="string">"root"</span>,db=<span class="string">"python_summer"</span>)</span><br><span class="line"><span class="keyword">if</span> conn:</span><br><span class="line">    print(<span class="string">"success"</span>)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line">cur.execute(<span class="string">"SELECT * FROM student"</span>)</span><br><span class="line">all_info = cur.fetchall()</span><br><span class="line">print(all_info)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> all_info:</span><br><span class="line">    print(i[<span class="number">1</span>])</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>Alter</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(host=<span class="string">"localhost"</span>,user=<span class="string">"root"</span>,passwd=<span class="string">"root"</span>,db=<span class="string">"python_summer"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> conn:</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"success"</span>)</span><br><span class="line"></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">num = cur.execute(<span class="string">"UPDATE student SET student.student_name = 'Yuxuan Liu' WHERE student.student_name = 'Oscar'"</span>)</span><br><span class="line"></span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></li><li><p>append</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(host=<span class="string">"localhost"</span>,user=<span class="string">"root"</span>,passwd=<span class="string">"root"</span>,db=<span class="string">"python_summer"</span>)</span><br><span class="line"></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">num = cur.execute(<span class="string">"INSERT INTO student(student_name,student_subject,student_gpa) VALUES('Jim','Engineering','3.93')"</span>)</span><br><span class="line"></span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></li><li><p>delete</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(host=<span class="string">"localhost"</span>,user=<span class="string">"root"</span>,passwd=<span class="string">"root"</span>,db=<span class="string">"python_summer"</span>)</span><br><span class="line"></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">num = cur.execute(<span class="string">"DELETE FROM student WHERE student.student_name = 'Jim'"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">    </span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import Pymysql&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Search&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;conn = pymysql.connect(host=&lt;span class=&quot;string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;,user=&lt;span class=&quot;string&quot;&gt;&quot;root&quot;&lt;/span&gt;,passwd=&lt;span class=&quot;string&quot;&gt;&quot;root&quot;&lt;/span&gt;,db=&lt;span class=&quot;string&quot;&gt;&quot;python_summer&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; conn:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;success&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cur = conn.cursor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cur.execute(&lt;span class=&quot;string&quot;&gt;&quot;SELECT * FROM student&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;all_info = cur.fetchall()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(all_info)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; all_info:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(i[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cur.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conn.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://yuxuanliu.tech/tags/Python/"/>
    
      <category term="Pymysql" scheme="https://yuxuanliu.tech/tags/Pymysql/"/>
    
      <category term="Mysql" scheme="https://yuxuanliu.tech/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>HTML basics</title>
    <link href="https://yuxuanliu.tech/html_basics/"/>
    <id>https://yuxuanliu.tech/html_basics/</id>
    <published>2019-09-08T16:56:59.000Z</published>
    <updated>2019-09-11T15:33:59.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Tags"><a href="#1-Tags" class="headerlink" title="1. Tags"></a>1. Tags</h2><h3 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure><p>The tag as shown above will tell the internet explorer that we are writing an html file. For this tag, we don’t need an ending tag and for other tags(container tags) we need an ending tag for each starting tag.</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Here are <code>html</code> tags with a starting tag and an ending tag. <code>/</code> is used to denote that it is an ending tag. This is the highest level tag in our website, other contents are under these tags.</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Another type of tags are head tags. We can define the title, description of the document and also other information related to the document. It is like the settings of the html file.</p><a id="more"></a><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>body</code> tags are like the meat and bone of the web page. This is the main part of the website. Normally way longer than the <code>head</code> tags. We can simply put a <code>Hello World</code> inside the body tag and Chrome will print it out for us.</p><h3 id="Indent"><a href="#Indent" class="headerlink" title="Indent"></a>Indent</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Pay extra attention to the indents. <code>head</code> tags and <code>body</code> tags are both inside the <code>html</code> tags. <code>&lt;html&gt;</code> is like the parents while <code>&lt;head&gt;</code>&amp;<code>&lt;body&gt;</code> are like children ish.</p><p><code>&lt;head&gt;</code> and<code>&lt;body&gt;</code> are sort of siblings as they both have one tab indent.</p><h3 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>The title of the website<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Inside <code>head</code> tags, we can put an extra tag called  <code>title</code> tags. We fill the title of the web page in the tags.</p><h2 id="2-More-basic-tags-in-detail"><a href="#2-More-basic-tags-in-detail" class="headerlink" title="2. More basic tags in detail"></a>2. More basic tags in detail</h2><h3 id="Meta"><a href="#Meta" class="headerlink" title="Meta"></a>Meta</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>The title of the website<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> = <span class="string">"description"</span> <span class="attr">content</span> = <span class="string">"This is the description"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This tag will give us some meta data, we can put the type of character encoding inside as above.</p><p>Also, we can put a description inside the meta tag. So when people search our website on Google, this description will be used for reference. <code>meta</code> tags will be introduced in detail in later sections.</p><h3 id="Heading"><a href="#Heading" class="headerlink" title="Heading"></a>Heading</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        The fist header</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        THe second header</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can create a header using the code above, <code>&lt;h1&gt;</code> will give us the largest font size of the header while <code>&lt;h6&gt;</code> will give us the smallest font size available for a header.</p><h3 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Put the contents of the paragraph inside</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can create a paragraph using <code>&lt;p&gt;</code>. All paragraphs will format itself automatically. The order of paragraphs in the html file is simply the order shown on the webpage.</p><h3 id="Bold-加粗"><a href="#Bold-加粗" class="headerlink" title="Bold(加粗)"></a>Bold(加粗)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>The contents you want to bold<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Whenever you want to bold certain contents, simply put it inside <code>&lt;b&gt;</code>.</p><h3 id="Italic-斜体"><a href="#Italic-斜体" class="headerlink" title="Italic(斜体)"></a>Italic(斜体)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>The contents you want to make it italic<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Whenever you want to make certain contents italic, simply put it inside <code>&lt;i&gt;</code>.</p><p>Moreover, we can superpose<code>&lt;p&gt;</code>,<code>&lt;i&gt;</code>&amp;<code>&lt;b&gt;</code>. To make a paragraph both bold and italic.</p><h3 id="Whitespace"><a href="#Whitespace" class="headerlink" title="Whitespace"></a>Whitespace</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        The first paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        The second paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        The first paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        The second paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>html doesn’t read the whitespace between the codes. It only cares about what is in the tags. In other words, the codes above are technically the same.</p><h3 id="Break"><a href="#Break" class="headerlink" title="Break"></a>Break</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If we want a blank line on our web page. We could use the tag <code>&lt;br/&gt;</code> and html will read it. You can make multiple tags to create multiple blank lines.</p><h3 id="Horizontal-line"><a href="#Horizontal-line" class="headerlink" title="Horizontal line"></a>Horizontal line</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can create a horizontal line like this<img src="C:%5CUsers%5COscar%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1565290093941.png" alt="1565290093941">. We may want to use it on our web page to break up contents.</p><h3 id="Big-tag"><a href="#Big-tag" class="headerlink" title="Big tag"></a>Big tag</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        The <span class="tag">&lt;<span class="name">big</span>&gt;</span>first<span class="tag">&lt;/<span class="name">big</span>&gt;</span> paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If we want to make certain contents greater in font size,  using <code>&lt;big&gt;</code> tags is one of the easiest way. Simply put the contents between <code>&lt;big&gt;</code> and <code>&lt;/big&gt;</code>. It is not that significant but will work.</p><p>Things works exactly the same for <code>&lt;small&gt;</code>and <code>&lt;/small&gt;</code>.</p><h3 id="Subscript-下标-amp-superscript-上标"><a href="#Subscript-下标-amp-superscript-上标" class="headerlink" title="Subscript(下标)&amp;superscript(上标)"></a>Subscript(下标)&amp;superscript(上标)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    H<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>O</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If we want to write the chemical formula for water. We need a subscript 2. It can be easily achieved in html by putting 2 between <code>&lt;sub&gt;</code>&amp;<code>&lt;/sub&gt;</code>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    10<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If we want to write 10 square in html. We need a superscript 2. Simply do the very similar thing with <code>&lt;sup&gt;</code>&amp;<code>&lt;/sup&gt;</code>.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>This tags not only works in <code>&lt;body&gt;</code>. It works in all parts of the html file where there is a text.</p><h2 id="3-Comments"><a href="#3-Comments" class="headerlink" title="3. Comments"></a>3. Comments</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Put your </span></span><br><span class="line"><span class="comment">comments inside  --&gt;</span></span><br></pre></td></tr></table></figure><p>Everything within <code>&lt;!--</code> <code>--&gt;</code>is comments and it may take up multiple lines.</p><p>Very similar to other programming languages, it’s like a little note and can be ignored.</p><h2 id="4-Style-and-colors"><a href="#4-Style-and-colors" class="headerlink" title="4. Style and colors"></a>4. Style and colors</h2><p>This is a very basic introduction of CSS(Cascading style sheets) which is used for styling. There is a separate course just for CSS</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"color: blue"</span>&gt;</span></span><br><span class="line">        The fist paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can  pass some attributes to  <code>&lt;p&gt;</code> tags. Here, we are passing a style attribute and set the text color to blue.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"color: blue;backgroung-color: red"</span>&gt;</span></span><br><span class="line">        The fist paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can also set the background color to red using the code above.</p><p>These attributes also work for other tags like <code>&lt;h1&gt;</code>, even<code>&lt;body&gt;</code> tags work.</p><h2 id="5-Formatting-the-website"><a href="#5-Formatting-the-website" class="headerlink" title="5. Formatting the website"></a>5. Formatting the website</h2><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Most web pages will have three sections which are headers(页眉), main and footer(页脚). Html has various tags for creating these sections as shown in the code above.</p><p>Some extra things, using <code>&lt;nav&gt;</code> tags we could create a navigation table and it’s normally in the <code>&lt;header&gt;</code> part of the webpage</p><p>We can also create an article(like the ones in a blog) using <code>&lt;article&gt;</code>  tags and they are normally in the <code>&lt;main&gt;</code> part of the webpage.</p><h3 id="Section"><a href="#Section" class="headerlink" title="Section"></a>Section</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;section&gt;</code> tags often come with <code>&lt;article&gt;</code> tags as they make the web page well-structured.</p><p>Of course, an <code>&lt;article&gt;</code> can contain multiple <code>&lt;section&gt;</code>.</p><h3 id="Aside"><a href="#Aside" class="headerlink" title="Aside"></a>Aside</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You can put something that is not directly related to the core contents in the <code>&lt;aside&gt;</code> tags. A good example is advertisements on web pages.</p><h3 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h3><p>To be honest, all those tags are not necessary, you may create a fabulous website without these structural tags but they can make your website extremely organized and improve the readability of your code. Also, this kind of neat structure allows search engines to figure out what is inside easily.</p><h2 id="6-Links-超链接"><a href="#6-Links-超链接" class="headerlink" title="6. Links(超链接)"></a>6. Links(超链接)</h2><p>Links are used in html to link your website to other websites, other parts of your website or jpg, pdf etc.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"https://www.google.com"</span>&gt;</span>Text shown for this link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>By using  <code>&lt;a&gt;</code> tags we can create a link to a different website. Simply, put the website url inside the <code>href</code>attribute and put the text you wish to show between <code>&lt;a&gt;</code>&amp;<code>&lt;/a&gt;</code>.</p><p>Attention, the code above will navigate users to the url directly so they leave your website.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"https://google.com"</span> <span class="attr">target</span> = <span class="string">"_blank"</span>&gt;</span>Text shown for url<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If we want user to open a new web page for this link, we could add an extra attribute  <code>target = &quot;_blank&quot;</code> inside  <code>&lt;a&gt;</code>tags.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"relative local address"</span>&gt;</span>another page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If we want to link to a different pages of our website. We can simply set the <code>href</code> attribute equal to the relative local address(It must be the relative address, the absolute address won’t work) of our html file. This can automatically navigate to this file. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"address of picture"</span>&gt;</span>picture<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If we want to link to a picture in your computer, it works the same, simply put the relative address of the picture inside the <code>href</code> attribute.</p><h2 id="7-Images"><a href="#7-Images" class="headerlink" title="7.Images"></a>7.Images</h2><h3 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"url of the image"</span> <span class="attr">alt</span> = <span class="string">"text to show if the in scr image is not available"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>scr</code> attribute stores the source of the picture. <code>&lt;alt&gt;</code> attribute is more like a backup, it is some text that will be shown when the picture in <code>scr</code> is no longer available. It is always a good practice to write a <code>&lt;alt&gt;</code>.</p><p>Besides, we don’t need an end tag for  <code>&lt;img</code> simply do <code>/&gt;</code> when you finish.</p><p>Very similar to links, we can do relative address of the picture instead of the url.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span> = <span class="string">"100"</span> <span class="attr">height</span> = <span class="string">"50"</span> <span class="attr">src</span>=<span class="string">"url of the image"</span> <span class="attr">alt</span> = <span class="string">"text"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>We could alter dimensions of the image by passing in <code>width</code> &amp;<code>height</code>attributes.  The unit we use here are pixels(像素).   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span> = <span class="string">"100"</span> <span class="attr">src</span>=<span class="string">"url of the image"</span> <span class="attr">alt</span> = <span class="string">"text"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Instead of setting both height of width, we could set only one attribute of those. HTML will set the other value automatically to keep the aspect ratio(长宽比) unchanged.</p><h3 id="Example-Set-an-image-as-a-link"><a href="#Example-Set-an-image-as-a-link" class="headerlink" title="Example: Set an image as a link"></a>Example: Set an image as a link</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"https://www.google.com"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span> = <span class="string">"100"</span> <span class="attr">src</span>=<span class="string">"url of the image"</span> <span class="attr">alt</span> = <span class="string">"text"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The code above is an example of setting an image also as a link. This trick also works for other tags like<code>&lt;h1&gt;</code> etc.</p><h2 id="8-Videos-amp-YouTube"><a href="#8-Videos-amp-YouTube" class="headerlink" title="8. Videos &amp; YouTube"></a>8. Videos &amp; YouTube</h2><h3 id="Basics-1"><a href="#Basics-1" class="headerlink" title="Basics"></a>Basics</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span> =<span class="string">"relative address "</span> <span class="attr">controls</span> <span class="attr">width</span> = <span class="string">"100"</span>&gt;</span>Text shows if video can't play<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can add a video to the website using <code>&lt;video&gt;</code>. Very similar to adding a picture we use a relative address and reserved word <code>controls</code> afterwards(very important, otherwise there will be no buttons for us to control the video ). The text between <code>&lt;video&gt;</code> and <code>&lt;/video&gt;</code>will only be shown if the browser can’t play this video.</p><p>In addition, we can control dimensions of the video by passing in <code>width</code> and <code>height</code> attributes. Old tricks as we used it in previous sections already.</p><h3 id="Poster"><a href="#Poster" class="headerlink" title="Poster"></a>Poster</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span> =<span class="string">"relative address"</span> <span class="attr">controls</span> <span class="attr">poster</span> = <span class="string">"relative address"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Instead of showing the first scene of the video as the poster, we could DIY our poster. Simply set an extra attribute called <code>poster</code> and pass in the relative address of our poster.</p><h3 id="Auto-play-amp-loop-自动重复播放"><a href="#Auto-play-amp-loop-自动重复播放" class="headerlink" title="Auto play &amp; loop(自动重复播放)"></a>Auto play &amp; loop(自动重复播放)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span> =<span class="string">"relative address"</span> <span class="attr">controls</span> <span class="attr">loop</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Simply pass in extra reserved words <code>autoplay</code> and <code>loop</code>. Easy peasy, lemon squeasy!</p><h3 id="YouTube-videos"><a href="#YouTube-videos" class="headerlink" title="YouTube videos"></a>YouTube videos</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">"560"</span> <span class="attr">height</span>=<span class="string">"315"</span> <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/8JnfIa84TnU"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">allow</span>=<span class="string">"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Click the <code>share</code> button of the YouTube video and choose <code>Embed</code>. This will give us some<code>&lt;iframe&gt;</code> code. We can use them to add YouTube videos to our website. Don’t worry too much about<code>&lt;iframe&gt;</code> for now. This will also give you the YouTube control panel which is awesome.</p><h2 id="9-Lists"><a href="#9-Lists" class="headerlink" title="9. Lists"></a>9. Lists</h2><h3 id="Unordered-list"><a href="#Unordered-list" class="headerlink" title="Unordered list"></a>Unordered list</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"apple.com"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Pear<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We could create an unordered list by using the <code>&lt;ul&gt;</code>tags. The <code>&lt;ul&gt;</code> tags act as a container and we can put each list item inside tags <code>&lt;li&gt;</code> .  Different types of data can be put inside one unordered list. See the Apple example, we actually put a link inside the list along with some texts.</p><p>As we are creating an unordered list, each item starts with a black dot.</p><h3 id="Ordered-list"><a href="#Ordered-list" class="headerlink" title="Ordered list"></a>Ordered list</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"apple.com"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Pear<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>An ordered list actually works almost the same, except we got serial numbers at the start of each item instead of black dots. </p><h3 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span> = <span class="string">"a"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>bacon<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can change the style of the ordered list. Simply input an extra attribute called<code>type</code>. Its value can be <code>&quot;a&quot;</code>so we got a,b,c ….. It may also be <code>&quot;A&quot;</code> so we got A,B,C …… Apart from those, we can have Roman numerals(I,II,III,IV….) by inputting <code>&quot;I&quot;</code>  </p><h2 id="Cascade-lists"><a href="#Cascade-lists" class="headerlink" title="Cascade lists"></a>Cascade lists</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>school<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>uni<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can have lists in a list(cascade). See the example above, we have two unordered lists inside an ordered list.</p><h2 id="10-Table"><a href="#10-Table" class="headerlink" title="10. Table"></a>10. Table</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>The title of the table<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Title_1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Title_2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Title_3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>one<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>two<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>three<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We initialize tables in html using <code>&lt;table&gt;</code>tags. <code>&lt;tr&gt;</code> tags are placed inside to act as a row container. For elements in a row, we put every of them inside<code>&lt;td&gt;</code>tags.</p><p>Here we got three elements in a row. If we want more rows or more elements, simply add more <code>&lt;tr&gt;</code>&amp;<code>&lt;td&gt;</code>.</p><p>For creating table headers, it works similarly, just use <code>&lt;th&gt;</code> instead of <code>&lt;td&gt;</code>.</p><p>One more thing, we can create a caption(title) for the table using<code>&lt;caption&gt;</code>tags at the very top.</p><h2 id="11-Containers-in-HTML-div-span"><a href="#11-Containers-in-HTML-div-span" class="headerlink" title="11. Containers in HTML(div,span)"></a>11. Containers in HTML(div,span)</h2><h3 id="Basics-2"><a href="#Basics-2" class="headerlink" title="Basics"></a>Basics</h3><p>It is a good habit to put your HTML code inside containers. One reason is that in the future we will use CSS to formatting your web page. It makes CSS code really easy if your HTML codes are well structured in containers. <code>&lt;div&gt;</code> and <code>&lt;span&gt;</code> are two popular containers.</p><h3 id="Types-of-elements"><a href="#Types-of-elements" class="headerlink" title="Types of elements"></a>Types of elements</h3><p>There are basically two types of elements in HTML. The first type is called the block elements. They will occupy the entire width of the page. The other one is called inline elements. They will only occupy the space they actually need.  See the example below.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"google.com"</span>&gt;</span>link1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"apple.com"</span>&gt;</span>link2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Link1 and link2 are clearly inline elements. As neither of them takes up the entire lines, they are actually sitting beside(in the same line with) each other.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Paragraph 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Paragraph 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Paragraphs here are clearly block elements. There is enough space after paragraph 1 for paragraph 2. However, these two paragraphs don’t sit beside each other. Instead, paragraph 2 switch to a different line.</p><h3 id="lt-span-gt"><a href="#lt-span-gt" class="headerlink" title="&lt;span&gt;"></a><code>&lt;span&gt;</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>The fist span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>The second span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;span&gt;</code> tags are inline elements. The contents inside are able to sit beside each other.</p><h3 id="lt-div-gt"><a href="#lt-div-gt" class="headerlink" title="&lt;div&gt;"></a><code>&lt;div&gt;</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    The fist div</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    The second div</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;div&gt;</code> tags are block elements. Either of them occupies their own line. They can’t sit beside each other.</p><h3 id="Summary-2"><a href="#Summary-2" class="headerlink" title="Summary"></a>Summary</h3><p><code>&lt;div&gt;</code>  is a block element.</p><p> <code>&lt;span&gt;</code> is a inline element. More popular than<code>&lt;div&gt;</code>.</p><h2 id="12-Input-tags"><a href="#12-Input-tags" class="headerlink" title="12. Input tags"></a>12. Input tags</h2><h3 id="Text-box"><a href="#Text-box" class="headerlink" title="Text box"></a>Text box</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span> = <span class="string">"DPOefault text"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We are using a single <code>&lt;input&gt;</code> tag in html. We need to pass in a <code>type</code> attribute. The code above will generate a text box for user to type in.</p><p>We can set default text for the text box by passing in a <code>value</code> attribute and set it equal to the text we want to show.</p><h3 id="Password-box"><a href="#Password-box" class="headerlink" title="Password box"></a>Password box</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Here we are creating a text box for password. This text box will automatically hide the user inputs.</p><h3 id="Textarea"><a href="#Textarea" class="headerlink" title="Textarea"></a>Textarea</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span> = <span class="string">"10"</span> <span class="attr">cols</span>=<span class="string">"3"</span>&gt;</span>Default text<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>It is simply a bigger block where users can input some text. We can control its dimension by setting <code>rows</code> and <code>cols</code> attributes.</p><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"date"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The will create a box where users can select a certain date.</p><h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"range"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This will produce a slider.</p><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"file"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This will create a button for user to choose file. The file explorer will shown up if an user click the button.</p><h3 id="Checkbox"><a href="#Checkbox" class="headerlink" title="Checkbox"></a>Checkbox</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"checkbox"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A tiny box, user a click it to tick the box. We could tick as many checkboxes as we want.</p><h3 id="Radio-button"><a href="#Radio-button" class="headerlink" title="Radio button"></a>Radio button</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span> =<span class="string">"Oscar"</span> <span class="attr">type</span> = <span class="string">"radio"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span> = <span class="string">"Oscar"</span> <span class="attr">type</span> = <span class="string">"radio"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span> = <span class="string">"Oscar"</span> <span class="attr">type</span> = <span class="string">"radio"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Radio buttons are kinda similar to checkbox. The biggest difference is that we can only tick one of the radio buttons with the same <code>name</code> attribute.</p><p>There are so many types of inputs. I am only listing a number of them, there is a web page for references. Make sure to check it out <a href="https://www.w3schools.com/tags/tag_input.asp&gt;" target="_blank" rel="noopener">https://www.w3schools.com/tags/tag_input.asp&gt;</a>.</p><h2 id="13-iFrame"><a href="#13-iFrame" class="headerlink" title="13. iFrame"></a>13. iFrame</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">scr</span> = <span class="string">"www.mikedane.com"</span> <span class="attr">width</span> = <span class="string">"1000"</span> <span class="attr">height</span> =<span class="string">"800"</span>&gt;</span></span><br><span class="line">    The text will be shown if iframe is not working    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>By using the <code>&lt;iframe&gt;</code> tags, we could display the website in the <code>scr</code> attribute on your website(kinda like enbedded someone else’s website on yours).</p><p>The default size for<code>&lt;iframe&gt;</code> is tiny, we can change its dimensions by passing in <code>width</code> &amp;<code>height</code> attributes similar to before.</p><p>One of the biggest problem for <code>iframe</code> is that many big websites(amazon.com etc) have settings preventing other developers to iframe their websites so don’t be too surprised if <code>iframe</code> is not working!</p><h2 id="14-Meta-tags"><a href="#14-Meta-tags" class="headerlink" title="14. Meta tags"></a>14. Meta tags</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> = <span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"Your description"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> = <span class="string">"author"</span> <span class="attr">content</span> = <span class="string">"Name of the author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> = <span class="string">"keywords"</span> <span class="attr">content</span> = <span class="string">"HTML, Blog, what not"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> = <span class="string">"viewport"</span> <span class="attr">content</span> =<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;meta&gt;</code>tags are in the <code>&lt;head&gt;</code> . They define some key information of your web page.</p><p><code>charset</code> defines how your words are encoded. </p><p>For the other<code>&lt;meta&gt;</code> tags, there are two attributes, the <code>name</code> will tell html what types of <code>meta</code> tags you are defining and <code>content</code> is actually the content inside your <code>meta</code> tags.</p><p><code>description</code> gives a short description of your website to help search engines. Normally less than 160 characters. If too long, your website can be disadvantaged in terms of priority in search engine</p><p><code>author</code> tells the author of the web page</p><p><code>keywords</code> set several keywords to help search engines, are normally ignored these days but still a good practice to fill in.</p><p><code>viewport</code> how your website is displayed on different devices like pc, mobile, ipad etc. It can get really complicated, for now just keep in mind using the following statement:                           </p><p><code>content =&quot;width=device-width, initial-scale=1.0&quot;</code> before you become an experienced developer.</p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>Thanks for reading. These notes are abstract from the <a href="https://www.mikedane.com/web-development/html/" target="_blank" rel="noopener">HTML tutorial videos</a> created by <a href="https://www.mikedane.com/" target="_blank" rel="noopener">Mike Dane</a>(Giraffe academy).</p><p>I want to express my thanks to Mike. Awesome videos as always. Make sure to check out his website, contents are absolutely amazing.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Tags&quot;&gt;&lt;a href=&quot;#1-Tags&quot; class=&quot;headerlink&quot; title=&quot;1. Tags&quot;&gt;&lt;/a&gt;1. Tags&lt;/h2&gt;&lt;h3 id=&quot;DOCTYPE&quot;&gt;&lt;a href=&quot;#DOCTYPE&quot; class=&quot;headerlink&quot; title=&quot;DOCTYPE&quot;&gt;&lt;/a&gt;DOCTYPE&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The tag as shown above will tell the internet explorer that we are writing an html file. For this tag, we don’t need an ending tag and for other tags(container tags) we need an ending tag for each starting tag.&lt;/p&gt;
&lt;h3 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Here are &lt;code&gt;html&lt;/code&gt; tags with a starting tag and an ending tag. &lt;code&gt;/&lt;/code&gt; is used to denote that it is an ending tag. This is the highest level tag in our website, other contents are under these tags.&lt;/p&gt;
&lt;h3 id=&quot;head&quot;&gt;&lt;a href=&quot;#head&quot; class=&quot;headerlink&quot; title=&quot;head&quot;&gt;&lt;/a&gt;head&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Another type of tags are head tags. We can define the title, description of the document and also other information related to the document. It is like the settings of the html file.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="https://yuxuanliu.tech/categories/Programming/"/>
    
    
      <category term="HTML" scheme="https://yuxuanliu.tech/tags/HTML/"/>
    
  </entry>
  
</feed>
